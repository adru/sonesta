// define our application and pull in ngRoute and ngAnimate
var trueBlue = angular.module('trueBlue', ['ngRoute', 'ngSanitize', 'ngTouch', 'ngStorage', 'LocalForageModule']);

trueBlue.run(function($timeout, $location, $rootScope, $localStorage, $filter, AppService, DataService, UserService, ShoppingService, AnalyticsService, LanguageService, Override, BeaconService) {
  FastClick.attach(document.body);

  // OFFLINE?
  $rootScope.offline = false;
  $rootScope.preload = preload;
  $rootScope.done = false;
  $rootScope.finished = false; // for overrides.
  $rootScope.defaultShowLimit = showLimit;
  $rootScope.server = (!server) ? "dev" : server;

  // client id
  $rootScope.clientId = clientId; //3;
  $rootScope.GCMSenderID = GCMSenderID; //"349235497400";
  $rootScope.APIpath = "http://"+((server) ? server : "dev")+".trueblue.guru/application/"+APIversion+"/public";

  // page classes
  $rootScope.backIcon = backIcon;
  $rootScope.pages = null;
  $rootScope.currentParent = null;

  $rootScope.selectedLanguage = null;
  $rootScope.languages = null;

  $rootScope.selectedRegion = null;
  $rootScope.regions = null;

  $rootScope.notification = null;
  $rootScope.backVars = [];

  // GPS!
  $rootScope.GPS = null;

  // user variables
  $rootScope.apiKey = null;
  $rootScope.userDetails = null;
  $rootScope.previousQuery = null;
  $rootScope.token = null;
  $rootScope.tokenStatus = null;
  $rootScope.cart = null;
  $rootScope.cartRewardTotal = 0;
  $rootScope.cartRewardTotalPoints = 0;
  $rootScope.cartPreRewardTotal = 0;

  $rootScope.popUpType = "";

  if ($rootScope.done === false) {
    //console.log("go to loader");
    $location.url('/loader/');
  }


  // SETUP INITIAL DATA
  $rootScope.initData = function() {
    ShoppingService.checkActiveOrders();
  }


  //console.log("setup initial data...");
  // SETUP INITIAL DATA
  if(navigator.network && navigator.network.connection && navigator.network.connection.type == Connection.NONE) {
    AppService.isOffline();
  } else {
    $rootScope.initData();
  }


  // LANGUAGE STUFF
  //if (window.localStorage.getItem('TBlanguage')) {
  if ($localStorage.TBlanguage) {
    $rootScope.selectedLanguage = $localStorage.TBlanguage;//window.localStorage.getItem('TBlanguage');
  }
  $rootScope.changeLanguage = function($lang) {
    if ($rootScope.selectedLanguage != $lang) {
      $rootScope.selectedLanguage = $lang;
    }
  }
  LanguageService.init();


  // REGION STUFF
  //if (window.localStorage.getItem('TBregion')) {
  if ($localStorage.TBregion) {
    $rootScope.selectedRegion = $localStorage.TBregion;//window.localStorage.getItem('TBregion');
  }
  $rootScope.changeRegion = function($region) {
    if ($rootScope.selectedRegion != $region) {
      $rootScope.newsShowLimit = $rootScope.defaultShowLimit;
      $rootScope.selectedRegion = $region;
      $localStorage.TBregion = $region;
      //window.localStorage.setItem('TBregion', $region);
      AnalyticsService.registerEvent("click", "region", $region);
    }
  }
  $rootScope.revealMenuHighlightRegion = function() {
    $('body').addClass('open menu highlight_region');
  }
  $rootScope.getRegionDetails = function($region_id) {
    //console.log("get details for:", $region_id);
    return DataService.getRegionDetails($region_id);
  }


  // OPEN LINKS, IF EXTERNAL, OPEN IN NATIVE BROWSER
  $rootScope.openSystem = function($event) {
    //console.log("openSystem", $event, $($event.target).attr('link'), $($event.currentTarget).attr('link'));
    if ($event.target) {
      var $href = $($event.target).attr('link');
    }
    //console.log("$href",$href, typeof $href, $($event.target).attr('link'));
    if ($event.currentTarget && $href === undefined) {
      $href = $($event.currentTarget).attr('link');
    }
    //console.log("$href",$href, typeof $href, $($event.currentTarget).attr('link'));
    if ($href === undefined) {
      $href = $event;
    }
    //console.log("$href",$href, typeof $href);
    //console.log("WINDOW OPEN ",$event.target,$($event.target),$($event.target).attr('id'),$($event.target).attr('class'),$($event.target).attr('rel'),$href);
    if (!$href || typeof $href !== "string") return false;
    if ($href.indexOf('http') == 0 || $href.indexOf('maps') == 0 || $href.indexOf('tel') == 0 || $href.indexOf('mailto') == 0 || $href.indexOf('itms') == 0 || $href.indexOf('market') == 0 || $href.indexOf('instagram') == 0 || $href.indexOf('fb') == 0) {
      //console.log("external");
      AnalyticsService.registerEvent("link", "external", $href).then(function() {
        window.open($href, '_system');
      });
      $event.preventDefault();
    } else {
      //console.log("internal", $href, decodeURI($href), decodeURIComponent($href));
      AnalyticsService.registerEvent("link", "internal", $href);//.then(function() {
      $location.url(decodeURIComponent($href));
      //});
      $event.preventDefault();
      return false;
    }
  }

  $rootScope.currentUrl = null;
  $rootScope.$on("$routeChangeStart", function (event, next, current) {
    if ($rootScope.currentUrl) {
      $rootScope.backVars[$rootScope.currentUrl] = { "x" : $('.content').scrollTop() };
    }
    //console.log("start", $rootScope.backVars, $rootScope.currentUrl);//, "params", event, next, current, $location.url());
  });
  $rootScope.$on("$routeChangeSuccess", function (event, current, previous) {
    //console.log("SUCCESS", event, current, previous, "$previous: ",$previous);
    //console.log($location);
    if ($location.url() != "") {
      AnalyticsService.registerEvent("link", "internal", $location.url());
    }
    if ($rootScope.backVars && $rootScope.backVars[$location.url()] && $rootScope.backVars[$location.url()].x) {
      $timeout(function() {
        // doesnt work if the content isn't loaded yet :(... longer timeout..?
        $('.content').animate({ scrollTop : $rootScope.backVars[$location.url()].x });
        //delete $rootScope.backVars[$location.url()];
        //console.log("success", $rootScope.backVars, "SET:", $rootScope.backVars[$location.url()].x);//, "params", event, current, previous, $location.url());
        //console.log("success", $location.absUrl());
      }, 500);
    }
    $rootScope.currentUrl = $location.url();
  });


  // LOGIN IN NAV
  $rootScope.showLoginInNav = false;
  $rootScope.showLoginInForm = false;
  $rootScope.showLogin = function() {
    AnalyticsService.registerEvent("click", "login, menu", $location.url());
    $rootScope.showLoginInNav = true;
  }
  $rootScope.showLoginForm = function() {
    AnalyticsService.registerEvent("click", "login, popup", $('section#forms').attr('class'));
    $rootScope.showLoginInForm = true;
  }
  $rootScope.profilePic = function($user) {
    if ($user) {
      var $css = {};
      if ($user.image) {
        $css['background-image'] = 'url("' + $user.image + '")';
        $css['background-size'] = 'cover';
        $css['background-position'] = 'center center';
      }
      return $css;
    }
  }


  // SHARE
  $rootScope.shareApp = function() {
    //alert("shareapp click");
    var $shareLink = "http://trueblue.guru/redirect.php?id="+$rootScope.clientId;
    if ($rootScope.userDetails) {
      $shareLink += "&uid="+$rootScope.userDetails.id;
    }
    //console.log($shareLink);
    AnalyticsService.registerEvent("share", "clicked", $shareLink);
    window.plugins.socialsharing.available(function(isAvailable) {
      //console.log("available", isAvailable);
      if (typeof device !== "undefined") {
        if(device.platform === 'iOS') {
          var $client_logo = DataService.clientInfo.client_logo;
        } else {
          $client_logo = null;
        }
      }
      if (isAvailable) {
        window.plugins.socialsharing.share(
          $rootScope.text.custom.shareMessage, // message
          $rootScope.text.custom.shareSubject, // subject
          $client_logo, // file, image? logo maybe... - ANDROID CANNOT SUPPORT BOTH AN IMAGE AND A LINK IF FACEBOOK
          $shareLink,
          function(result) {
            AnalyticsService.registerEvent("share", "success", result.app + " > " +$shareLink);
            //console.log("Share completed? " + result.completed); // On Android apps mostly return false even while it's true
            //console.log("Shared to app: " + result.app); // On Android result.app is currently empty. On iOS it's empty when sharing is cancelled (result.completed=false)
          }, // e.g. function(result) {console.log('result: ' + result)}
          function(result) {
            AnalyticsService.registerEvent("share", "error", result);
          } // e.g. function(result) {alert('error: ' + result);
        );
      }
    });
  }


  // POPUP SHIELD
  $rootScope.enableShield = function() {
    //console.log("shield enabled");
    $('.shield').removeClass('disabled');
  }
  $rootScope.disableShield = function() {
    //console.log("shield disabled");
    $('.shield').addClass('disabled');
  }

  // set the icon in the popup div
  $rootScope.setFormImage = function($pic) {
    var $icon = $('section#forms > .icon');
    if ($pic == "hide") {
      $icon.hide();
    } else if ($pic) {
      $icon.css({
        'background-image': 'url("'+$pic+'")',
        'background-size': 'cover',
        'background-position': 'center center'
      }).addClass('w_pic').show();
    } else {
      $icon.removeAttr('style').removeClass('w_pic').show();
    }
  }
  // POPUP FORM
  $rootScope.popupForm = function($type) {
    if ($type.indexOf("user") > -1) {
      if ($rootScope.userDetails) {
        if ($type == "favourite user") {
          $rootScope.popUpType = "favourite";
        } else if ($type == "review user") {
          $rootScope.popUpType = "review";
        }
        if (!$type.indexOf("favourite") > -1 && !$type.indexOf("review") > -1) {
          $rootScope.setFormImage($rootScope.userDetails.image);
        }
      } else {
        if ($type == "user") {
          AnalyticsService.registerEvent("click", "login, rewards", "button");
          $rootScope.popUpType = "user";
        } else if ($type == "user login") {
          AnalyticsService.registerEvent("click", "login, header", $location.url());
          $rootScope.popUpType = "login";
        } else if ($type == "favourite user") {
          AnalyticsService.registerEvent("click", "login, products", "favourite");
          $rootScope.popUpType = "favourite";
        } else if ($type == "review user") {
          AnalyticsService.registerEvent("click", "login, products", "review");
          $rootScope.popUpType = "review";
        } else if ($type == "user plans") {
          AnalyticsService.registerEvent("click", "login, plans", $location.url());
          $rootScope.popUpType = "login";
        } else {
          AnalyticsService.registerEvent("click", "login, other", $location.url());
          $rootScope.popUpType = "login";
        }
        // voteHelper?
        $rootScope.showLoginInForm = true;
      }
    } else {
      $rootScope.popUpType = $type;
    }

    //console.log("popupForm", $type, $rootScope.popUpType, $rootScope.showLoginInForm);
    $('section#forms').removeClass().addClass($type).show();
    $('body').addClass('open form');

    $rootScope.disableMap();
  };

  $rootScope.closePopup = function($event) {
    //console.log("closePopup?");
    if ($event && $($event.currentTarget).hasClass('disabled')) {
      //console.log("BLOCK");
      return false;
    }

    $rootScope.enableShield();
    var $section = $('section#forms');

    $section.removeData('reward_points');
    $section.hide().removeClass().removeAttr('pid rid lid');

    $rootScope.showLoginInForm = false;
    $rootScope.editProduct = null;
    $rootScope.popUpType = null;
    $rootScope.updateAvailable = null;

    $timeout(function() {
      $rootScope.$apply();
    });

    $('> .icon',$section).removeAttr('style').removeClass('w_pic');
    $('body').removeClass('open menu form');
    $('body').removeData('loggingin');
    $('.submit_btn.processing').removeClass('processing');
    $('form',$section).each(function() {
      $('.error',this).html('').hide();
      $('.submit_btn',this).removeClass('processing');
      $(this)[0].reset();
    });

    $rootScope.enableMap();
  }

  // SCAN BUTTON
  $rootScope.scan = function() {
    //console.log("regular scan...");
    UserService.scan();
    //console.log("scan!");
    //UserService.registerScan("9rtnA79yRtMKZftN8q-Zms_3ov3Vc7GpYPacIBlfa10=");
  }


  // Beacon STUFF
  var clientWatch = $rootScope.$watch(function() {
    return $rootScope.clientInfo;
  }, function() {
    if ($rootScope.clientInfo) {
      BeaconService.watch();
      clientWatch();
    }
  });

  // Update STUFF
  var updateWatch = $rootScope.$watchGroup([function() {
    return $rootScope.clientInfo;
  },function() {
    return $rootScope.appVersion;
  }], function() {
    if ($rootScope.clientInfo && $rootScope.appVersion && $rootScope.appVersion != $rootScope.clientInfo.app_version) {
      $rootScope.updateAvailable = true;
      updateWatch();
    }
  }, true);


  // CART
  $rootScope.toggleCart = function() {
    DataService.locations().then(function() {
      $rootScope.popupForm('show_cart');
    });
  }
  $rootScope.showQR = function() {
    if ($rootScope.clientInfo && $rootScope.clientInfo.client_mode == 'merchant') {
      $rootScope.disableShield();
      $rootScope.popupForm('my_qr');
    }
    // else, nothing.
  }
  $rootScope.orderStatusText = function(va) {
    if (va.status.indexOf("minutes") > -1) {
      var $minutes = va.status.split('-')[1];
      var $now = Math.floor(new Date().getTime()/1000);
      var $countdown = $minutes - Math.floor((parseInt($now) - parseInt(va.created))/60);
      //console.log($minutes, $now, va.created, $countdown);
      var $text = ($countdown < 0) ? $rootScope.text.order_minutes_start_over + $filter('abs')($countdown) + $rootScope.text.order_minutes_end_over : $rootScope.text.order_minutes_start + $countdown + $rootScope.text.order_minutes_end;
      return $text;
    } else {
      return $rootScope.text["order_"+va.status];
    }
  }
  $rootScope.orderStatusStatusText = function(va) {
    return $rootScope.text["order_status_"+va.status];
  }


  // VOTEHELPER CLAIM FILTER
  $rootScope.unclaimed = function(item) {
    return !item.claimed;
  }

  $rootScope.toggleMenu = function() {
    $('body').toggleClass('open menu');
    $rootScope.enableShield();
    $rootScope.toggleMap();
  };
  $rootScope.openMenu = function() {
    $('body').addClass('open menu');
    $rootScope.disableMap();
  };
  $rootScope.closeMenu = function($event) {
    //console.log("closeMenu?");
    if ($event && $($event.currentTarget).hasClass('disabled')) {
      //console.log("BLOCK");
      return false;
    }
    $rootScope.enableMap();
    if ($event) {
      $rootScope.customBackTitle = null;
    }
    $('body').removeClass('open menu highlight_region');
    $rootScope.closePopup();
  };
  $rootScope.toggleMap = function() {
    if ($('body').is('.open')) {
      $rootScope.disableMap();
    } else {
      $rootScope.enableMap();
    }
  }
  $rootScope.enableMap = function() {
    //console.log("enableMap?");
    if ($rootScope.map && $('body').is('.maps')) {
      //console.log("set map clickable true!");
      $rootScope.map.setClickable(true);
    }
  }
  $rootScope.disableMap = function() {
    //console.log("disableMap?");
    if ($rootScope.map && $('body').is('.maps')) {
      //console.log("set map clickable false!");
      $rootScope.map.setClickable(false);
    }
  }

  $rootScope.shortcutPlacementFilter = function(str){
    return function(shortcut) {
      if (!str || str == "" || shortcut.placement == str) {
        return true;
      }
    }
  };

  $rootScope.shortcutTextCount = function(shortcuts){
    var $count = 0;
    angular.forEach(shortcuts, function (shortcut) {
      if (shortcut.text) {
        $count++;
      }
    });
    return $count;
  };

  $rootScope.getShortcutLink = function(shortcut, location) {
    var $link = $filter('getTranslation')(shortcut.link, $rootScope.selectedLanguage);
    if ($link) {
      return $link
    }
    if (shortcut.name == "food" || shortcut.name == "products" || shortcut.name == "drink" || shortcut.name == "shop" || shortcut.name == "shopping") {
      return "/products/";
    }
    if (shortcut.name == "rewards") {
      return "/rewards/";
    }
    if (shortcut.name == "locations") {
      if (location) {
        return $filter('encodeURIComponent')(location.location_address + ' ' + location.location_city + ' ' + location.location_province + ' ' + location.location_country);
      }
      return "/locations/" + (($rootScope.clientInfo.location_count == 1) ? $rootScope.clientInfo.location_id+'/' : '');
    }
    if (shortcut.name == "top10") {
      return "/top10/1/" + (($rootScope.selectedRegion) ? $rootScope.selectedRegion+'/' : '');
    }
    if (shortcut.name == "web") {
      return (location) ? ((location.location_website) ? location.location_website : null) : $rootScope.clientInfo.web;
    }
    if (shortcut.name == "facebook") {
      if (location && location.location_facebook) {
        return "http://facebook.com/" + location.location_facebook;
      } else if ($rootScope.clientInfo.facebook) {
        return "http://facebook.com/" + $rootScope.clientInfo.facebook;
      } else {
        return null;
      }
    }
    if (shortcut.name == "twitter") {
      if (location && location.location_twitter) {
        return "https://twitter.com/" + location.location_twitter;
      } else if ($rootScope.clientInfo.twitter) {
        return "https://twitter.com/" + $rootScope.clientInfo.twitter;
      } else {
        return null;
      }
    }
    if (shortcut.name == "instagram") {
      return (location) ? ((location.location_instagram) ? location.location_instagram : null) : $rootScope.clientInfo.instagram;
    }
    if (location && shortcut.name == "email") {
      return (location.location_email) ? "mailto:"+location.location_email : null;
    }
    if (location && shortcut.name == "phone") {
      return (location.location_phone) ? "tel:"+location.location_phone : null;
    }
    if (location && shortcut.name == "tripadvisor") {
      return (location.location_tripadvisor) ? location.location_tripadvisor : null;
    }
    return "";
  }


  Override.init();
  //console.log("WATCHERS", getWatchers().length);
});

function getWatchers(root) {
  root = angular.element(root || document.documentElement);
  var watcherCount = 0;

  function getElemWatchers(element) {
    var isolateWatchers = getWatchersFromScope(element.data().$isolateScope);
    var scopeWatchers = getWatchersFromScope(element.data().$scope);
    var watchers = scopeWatchers.concat(isolateWatchers);
    angular.forEach(element.children(), function (childElement) {
      watchers = watchers.concat(getElemWatchers(angular.element(childElement)));
    });
    return watchers;
  }

  function getWatchersFromScope(scope) {
    if (scope) {
      return scope.$$watchers || [];
    } else {
      return [];
    }
  }

  return getElemWatchers(root);
}


/* ANGULAR APP SCRIPTS */
/*
  <script type="text/javascript" src="js/app.cfdo.js"></script>
  <script type="text/javascript" src="js/routing.js"></script>
  <script type="text/javascript" src="js/services.push.js"></script>
  <script type="text/javascript" src="js/services.app.js"></script>
  <script type="text/javascript" src="js/services.data.js"></script>
  <script type="text/javascript" src="js/services.user.js"></script>
  <script type="text/javascript" src="js/controllers.js"></script>
*/

// @koala-prepend "app.js"
// @koala-append "app.cfdo.js"
// @koala-append "routing.js"
// @koala-append "services.analytics.js"
// @koala-append "services.push.js"
// @koala-append "services.app.js"
// @koala-append "services.data.js"
// @koala-append "services.user.js"
// @koala-append "services.shopping.js"
// @koala-append "services.language.js"
// @koala-append "services.youtube.js"
// @koala-append "services.beacon.js"
// @koala-append "controllers.js"

// whitelist hrefs for native use // http://stackoverflow.com/questions/15606751/angular-changes-urls-to-unsafe-in-extension-page
trueBlue.config(function($compileProvider) {
  $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|file|blob|ftp|mailto|geo|tel|c‌​hrome-extension|fb|instagram|itms|market|youtube):/);
});

// http://stackoverflow.com/questions/41272314/angular-all-slashes-in-url-changed-to-2f
trueBlue.config(['$locationProvider', function($locationProvider) {
  $locationProvider.hashPrefix('');
}]);

trueBlue.config(['$routeProvider', '$sceDelegateProvider', function($routeProvider, $sceDelegateProvider) {
  $sceDelegateProvider.resourceUrlWhitelist(['^(?:http(?:s)?:\/\/)?(?:[^\.]+\.)?\(vimeo|youtube|instagram|cdninstagram|facebook|wechat)\.com(/.*)?$', 'self']);
}]);

// check if one of the item's regions is valid for the selected region
trueBlue.filter('checkRegion', function($rootScope) {
  return function(item) {
    if (!$rootScope.selectedRegion || !item.region_ids || (item.region_ids).match(new RegExp("(?:^|,)"+($rootScope.selectedRegion)+"(?:,|$)"))) {
      return item;
    } else {
      return false;
    }
  }
});

// return the selected translation, else English
trueBlue.filter('getTranslation', function() {
  return function(item, language_code) {
    if (item) {
      if (typeof item == 'object') {
        //console.log(item, language_code);
        return (item[language_code]) ? item[language_code] : item['ENG'];
      } else {
        return item;
      }
    }
  }
});

// return translated month abbreviations
trueBlue.filter('translateMonth', function() {
  return function(item, language_code) {
    if (language_code == "ENG") {
      return item
    } else if (language_code == "FRE") { // french
      switch (item.toLowerCase()) {
        case "jan":
        case "mar":
        case "sep":
        case "oct":
        case "nov":
          return item;
        case "feb":
          return "fev";
        case "apr":
          return "avr";
        case "may":
          return "mai";
        case "jun":
          return "jui";
        case "jul":
          return "juil";
        case "aug":
          return "auô";
        case "dec":
          return "déc";
        default:
          return item;
      }
    } else if (language_code == "CHI" || language_code == "CHT" || language_code == "CHS") { // chinese
      switch (item.toLowerCase()) {
        case "jan":
          return "一月";
        case "feb":
          return "二月";
        case "mar":
          return "三月";
        case "apr":
          return "四月";
        case "may":
          return "五月";
        case "jun":
          return "六月";
        case "jul":
          return "七月";
        case "aug":
          return "八月";
        case "sep":
          return "九月";
        case "oct":
          return "十月";
        case "nov":
          return "十一月";
        case "dec":
          return "十二月";
        default:
          return item;
      }
    } else if (language_code == "SP") { // chinese
      switch (item.toLowerCase()) {
        case "jan":
          return "ene";
        case "feb":
          return "feb";
        case "mar":
          return "mar";
        case "apr":
          return "abr";
        case "may":
          return "may";
        case "jun":
        case "jul":
        case "oct":
        case "nov":
          return item;
        case "aug":
          return "ago";
        case "sep":
          return "set";
        case "dec":
          return "dic";
        default:
          return item;
      }
    }
  }
});

// translate the month
trueBlue.filter('translateDate', function() {
  return function(item, language_code) {
    if (language_code == "ENG") {
      return item
    } else if (language_code == "FRE") { // french
      var $date = item.split(" ");
      var $month = $date[0];
      var $day = $date[1];
      switch ($month.toLowerCase()) {
        case "january": $month = "janvier"; break;
        case "february": $month = "février"; break;
        case "march": $month = "mars"; break;
        case "april": $month = "avril"; break;
        case "may": $month = "mai"; break;
        case "june": $month = "juin"; break;
        case "july": $month = "juillet"; break;
        case "august": $month = "août"; break;
        case "september": $month = "septembre"; break;
        case "october": $month = "octobre"; break;
        case "november": $month = "novembre"; break;
        case "december": $month = "décembre"; break;
      }
      return $day + " " + $month;
    } else if (language_code == "CHI" || language_code == "CHT" || language_code == "CHS") { // chinese
      var $date = item.split(" ");
      var $month = $date[0];
      var $day = $date[1];
      switch ($month.toLowerCase()) {
        case "january": $month = "一月"; break;
        case "february": $month = "二月"; break;
        case "march": $month = "三月"; break;
        case "april": $month = "四月"; break;
        case "may": $month = "五月"; break;
        case "june": $month = "六月"; break;
        case "july": $month = "七月"; break;
        case "august": $month = "八月"; break;
        case "september": $month = "九月"; break;
        case "october": $month = "十月"; break;
        case "november": $month = "十一月"; break;
        case "december": $month = "十二月"; break;
      }
      return $day + " " + $month;
    } else if (language_code == "SP") { // chinese
      var $date = item.split(" ");
      var $month = $date[0];
      var $day = $date[1];
      switch ($month.toLowerCase()) {
        case "january": $month = "enero"; break;
        case "february": $month = "febrero"; break;
        case "march": $month = "marzo"; break;
        case "april": $month = "abril"; break;
        case "may": $month = "mayo"; break;
        case "june": $month = "junio"; break;
        case "july": $month = "julio"; break;
        case "august": $month = "agosto"; break;
        case "september": $month = "septiembre"; break;
        case "october": $month = "octubre"; break;
        case "november": $month = "noviembre"; break;
        case "december": $month = "diciembre"; break;
      }
      return $day + " " + $month;
    }
  }
});

// replace breaks from html strings
trueBlue.filter('convertBR', function() {
  return function(item) {
    if (item) {
      return item.replace(/\n/g,"<br>");
    } else {
      return "";
    }
  }
});

trueBlue.filter('encodeURIComponent', function() {
  return window.encodeURIComponent;
});

// retrieve the 600px version of the image source.
// 600, 300, 100 versions created on upload from admin panel
trueBlue.filter('get600px', function() {
  return function(item) {
    //console.log("item", item);
    if (item && item.indexOf("trueblue") >= 0) {
      var a = item;
      var b = "600px_";
      var position = a.lastIndexOf('/')+1;
      var output = [a.slice(0, position), b, a.slice(position)].join('');
      return output;
    } else {
      return item;
    }
  }
});
trueBlue.filter('get1200px', function() {
  return function(item) {
    //console.log("item", item);
    if (item && item.indexOf("trueblue") >= 0) {
      var a = item;
      var b = "1200px_";
      var position = a.lastIndexOf('/')+1;
      var output = [a.slice(0, position), b, a.slice(position)].join('');
      return output;
    } else {
      return item;
    }
  }
});

// for page labels, remove strings and convert to lowercase
trueBlue.filter('lowercaseTrim', function() {
  return function(item) {
    return item.toLowerCase().replace(/ /g,'');
  }
});

// reduce facebook link into it's crucial part
trueBlue.filter('getFBPageName', function() {
  return function(item) {
    if (item && item.indexOf("pages/") >= 0) {
      return (item.match("pages/(.*)/"))[1];
    } else {
      return item;
    }
  }
});

// convert numbers into dollars or percentages
trueBlue.filter('buildValue', function($filter) {
  return function(item, value, type) {
    // type 0 - dollars
    // type 1 - percentage
    if (value == 0) {
      return "";
    } else {
      if (type == 0) {
        return ", " + ((value > 0) ? '+' : '–') + $filter('currency')(Math.abs(value), "$", 2);
      } else if (type == 1) {
        return ", " + ((value > 0) ? '+' : '–') + Math.abs(value) + "%";
      }
    }
  }
});

// for the countdown
trueBlue.filter('abs', function() {
  return function(item) {
    if (item) {
      return Math.abs(item);
    } else {
      return "";
    }
  }
});

// zero pad numbers and cut years to 2 digits
trueBlue.filter('twoDigits', function() {
  return function(item) {
    if (String(item).length == 1) {
      return "0"+item;
    } else if (String(item).length == 2) {
      return item;
    } else {
      return String(item).substr(2,3);
    }
  }
});

// ng-bind-html safely, // http://odetocode.com/blogs/scott/archive/2014/09/10/a-journey-with-trusted-html-in-angularjs.aspx
trueBlue.filter('to_trusted', ['$sce', function($sce){
    return function(text) {
        return $sce.trustAsHtml(text);
    };
}]);

trueBlue.filter('to_trusted_source', ['$sce', function($sce){
    return function(text) {
        return $sce.trustAsResourceUrl(text);
    };
}]);

// image placeholder
trueBlue.directive('imageph', function() {
  return {
    restrict: 'A',
    scope: { imageph: '@' },
    link: function(scope, element, attrs) {
      element.bind('load', function() {
        //alert('image is loaded');
        element.attr('src', scope.imageph);
      });
      element.bind('error', function(){
        //alert('image could not be loaded');
      });
    }
  };
});

// instagram link
trueBlue.directive('instagramUser', function() {
  return {
    restrict: 'A',
    scope: { instagramUser: '@' },
    link: function(scope, element, attrs) {
      var scheme;
      var app_link = "instagram://user?username="+scope.instagramUser;
      var web_link = "http://instagram.com/"+scope.instagramUser+"/";

      //console.log("instagramUser", app_link, web_link);

      if (typeof device !== "undefined") {
        //console.log("device", device);
        // Don't forget to add the org.apache.cordova.device plugin!
        if(device.platform === 'iOS') {
          scheme = 'instagram://';
        }
        else if(device.platform === 'Android') {
          scheme = 'com.instagram.android';
        }
      } else {
        //console.log("no device!", web_link);
        element.attr('link', web_link);
        return false;
      }

      if (typeof appAvailability !== "undefined") {
        appAvailability.check(
          scheme,       // URI Scheme or Package Name
          function() {  // Success callback
            //console.log(scheme + ' is available :)', app_link);
            element.attr('href', app_link);
            return false;
          },
          function() {  // Error callback
            //console.log(scheme, "not available :(", web_link);
            element.attr('link', web_link);
            return false;
          }
        );
      }
    }
  };
});

// instagram link
trueBlue.directive('instagramTag', function() {
  return {
    restrict: 'A',
    scope: { instagramTag: '@' },
    link: function(scope, element, attrs) {
      var scheme;
      var app_link = "instagram://tag?name="+scope.instagramTag;
      var web_link = "http://instagram.com/explore/tags/"+scope.instagramTag+"/";

      //console.log("instagramTag", app_link, web_link);

      if (typeof device !== "undefined") {
        //console.log("device", device);
        // Don't forget to add the org.apache.cordova.device plugin!
        if(device.platform === 'iOS') {
          scheme = 'instagram://';
        }
        else if(device.platform === 'Android') {
          //console.log("android tag", web_link);
          scheme = 'com.instagram.android';
          element.attr('link', web_link);
          return false;
        }
      } else {
        //console.log("no device!", web_link);
        element.attr('link', web_link);
        return false;
      }

      if (typeof appAvailability !== "undefined") {
        appAvailability.check(
          scheme,       // URI Scheme or Package Name
          function() {  // Success callback
            //console.log(scheme + ' is available :)', app_link);
            element.attr('href', app_link);
            return false;
          },
          function() {  // Error callback
            //console.log(scheme, "not available :(", web_link);
            element.attr('link', web_link);
            return false;
          }
        );
      }
    }
  };
});

// parse dynamic css
trueBlue.directive('parseStyle', function($interpolate) {
  return function(scope, elem) {
    var exp = $interpolate(elem.html());
    var watchFunc = function () { return exp(scope); };

    scope.$watch(watchFunc, function (html) {
      elem.html(html);
    });
  };
});

// count the number of banners on the news item to control the width of the title.
trueBlue.directive('countBanners', ['$timeout', function($timeout) {
  return {
    restrict: 'A',
    link: function(scope, element){
      $timeout(function() {
        var count = $('.banner', element).length;
        //console.log("countBanners", count);
        if (!count) {
          return false;
        } else  if (count == 1) {
          $('.fleft', element).addClass('one');
        } else  if (count == 2) {
          $('.fleft', element).addClass('two');
        } else  if (count == 3) {
          $('.fleft', element).addClass('three');
        }
      });
    }
  };
}]);

// use history for the back button
trueBlue.directive('backButton', function() {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      element.bind('click', goBack);
      function goBack() {
        history.back();
        scope.$apply();
      }
    }
  }
});

// create the submit buttons
trueBlue.directive('submitBtn',  function() {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      var $console = $(element).closest('ul');

      if ($(element).hasClass('centered')) {
        if ($(element).closest('nav').is('#menu')) {
          $(element).wrap('<div class="submit_btn right">');
        } else {
          $(element).wrap('<div class="submit_btn centered">');
        }
      } else {
        $(element).wrap('<div class="submit_btn">');
      }
      $('<div class="spinner"><div class="dot1"></div><div class="dot2"></div></div>').insertBefore($(element));
    }
  };
});

// create the maps link for ios or android - watch the link, as it may change on the ordering page
// but this is another watch... hmm.
trueBlue.directive('addressHref', [function() {
  return {
    restrict: 'A',
    link: function(scope, element){
      scope.$watch(function() {
        return $(element).attr('address');
      }, function() {
        var address = $(element).attr('address');
        if (!address) {
          return false;
        }
        if (navigator.userAgent.match(/(iPod|iPhone|iPad)/)) {
          $(element).attr('href','maps:q='+address);
        } else {
          $(element).attr('href','geo:0,0?q='+address);
        }
      });
    }
  };
}]);

// load nav header template with icon attribute
trueBlue.directive('navHeader',  [function() {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/nav-header.html',
    link: function(scope, element, attrs) {
      //console.log(attrs.iconImage);
      scope.iconImage = attrs.iconImage;
    }
  };
}]);

// load menu top template
trueBlue.directive('menuTop',  [function() {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/menu-top.html',
  };
}]);

// load menu bottom template
trueBlue.directive('menuBottom',  [function() {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/menu-bottom.html',
  };
}]);

// load popup form template
trueBlue.directive('allForms',  [function() {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/all-forms.html',
  };
}]);

// load loading template
trueBlue.directive('loadingPage',  [function() {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/loading.html'
  };
}]);

// load offline page template
trueBlue.directive('offlinePage',  [function() {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/offline.html'
  };
}]);

// load update page template
trueBlue.directive('updatePage',  ['$rootScope', 'AnalyticsService', function($rootScope, AnalyticsService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/update.html',
    link: function(scope, element, attrs) {
      //console.log(attrs.iconImage);
      scope.updateApp = function() {
        var $href = "http://trueblue.guru/redirect.php?id="+$rootScope.clientId;        
        AnalyticsService.registerEvent("update", "clicked", $href).then(function() {
          window.open($href, '_system');
        });
      }
    }
  };
}]);

// load the registration/login template
trueBlue.directive('userForms', ['$rootScope', '$localStorage', 'UserService', function($rootScope, $localStorage, UserService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/user-forms.html',
    link: function(scope, element, attrs) {
      if ($localStorage.TBtoken && !$rootScope.token) {
        $rootScope.token = $localStorage.TBtoken;//window.localStorage.getItem('TBtoken');
      }
      //console.log("userForms Directive");
      UserService.init(element);
    }
  };
}]);

// the review/rating form
trueBlue.directive('ratingForm', ['UserService', function(UserService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/rating-form.html',
    link: function(scope, element, attrs) {
      UserService.initRating(element);
    }
  };
}]);

// reward form
trueBlue.directive('rewardForm', ['UserService', 'DataService', 'ShoppingService', '$rootScope', function(UserService, DataService, ShoppingService, $rootScope) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/reward-form.html',
    link: function(scope, element, attrs) {
      var $section = $('section#forms');
      var $rid = $section.attr('rid');
      $rootScope.redeem_token = null;

      // load the reward based on the reward_id
      DataService.getRewardDetails($rid).then(function(data) {
        scope.reward = data;
        // console.log("getRewardDetails", $rid, data);

        // 100px version of reward image
        if (scope.reward.reward_url) {
          var a = scope.reward.reward_url;
          var b = "100px_";
          var position = a.lastIndexOf('/')+1;
          var output = [a.slice(0, position), b, a.slice(position)].join('');
        }
        $rootScope.setFormImage((output) ? output : null);

        $rootScope.popupForm('reward');
      }, function(e) {
        //console.log("error", e);
      });

      scope.scanClaim = function() {
        $rootScope.disableShield();
        UserService.scanClaim($rid);
      }

      scope.addRewardToCart = function() {
        ShoppingService.addRewardToCart(scope.reward);
        $rootScope.closePopup();
      }
    }
  };
}]);

// change name form
trueBlue.directive('userFormName', ['UserService', function(UserService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/user-form-name.html',
    link: function(scope, element, attrs) {
      UserService.initUserForms(element);
    }
  };
}]);

// change email form
trueBlue.directive('userFormEmail', ['UserService', function(UserService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/user-form-email.html',
    link: function(scope, element, attrs) {
      UserService.initUserForms(element);
    }
  };
}]);

// change password form
trueBlue.directive('userFormPassword', ['UserService', function(UserService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/user-form-password.html',
    link: function(scope, element, attrs) {
      UserService.initUserForms(element);
    }
  };
}]);

// display user's QR code
trueBlue.directive('myQr', ['$rootScope', '$timeout', function($rootScope, $timeout) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/my-qr.html',
    link: function(scope, element, attrs) {
      $rootScope.$watch(function() {
        return $rootScope.apiKey;
      }, function() {
        if ($rootScope.apiKey) {
          populateQR();
        }
      });

      if ($rootScope.apiKey) {
        populateQR();
      }

      function populateQR() {
        $('.qr_code',element).empty().attr('title',$rootScope.apiKey).qrcode({
          width: 300,
          height: 300,
          text: $rootScope.apiKey
        });
      }
    }
  };
}]);

// add items to the cart
trueBlue.directive('addToCart', ['DataService', '$localStorage', '$rootScope', '$timeout', 'AnalyticsService', function(DataService, $localStorage, $rootScope, $timeout, AnalyticsService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/add-to-cart.html',
    link: function(scope, element, attrs) {

      // are we editing an item from the cart?
      scope.edit = false;
      if ($rootScope.editProduct) {
        scope.edit = true;
        scope.cartProduct = $rootScope.editProduct;
        scope.product = $rootScope.editProduct.data;
      } else {
        scope.product = $rootScope.tempProduct;
      }

      var $cart = [];

      // the cart is stored as a string in localStorage, convert it back into an object.
      if ($localStorage.cart) {
        $cart['products'] = JSON.parse($localStorage.cart);
      } else {
        $cart['products'] = [];
      }

      scope.filterVariations = function($variation){
        if ($variation.purchase_flag && (!$variation.quantity || $variation.quantity > parseInt($variation.sold))) {
          return true;
        }
      };

      // select the variation
      scope.selectVariation = function(v_id) {
        $('form .variation[v_id]',element).removeClass('selected');
        $('form .variation[v_id="'+v_id+'"]',element).addClass('selected');
      }

      // add a variable item
      scope.addVariableItem = function($event, $limit) {
        var $parent = $($event.currentTarget).closest('section.variable');
        var $target = $('.add_here',$parent);

        if ($('.select_wrapper',$target).length == 1 && $('.select_wrapper',$target).is(':hidden')) {
          $('.select_wrapper',$target).slideDown();
        } else {
          var $clone = $('.dyn.select_wrapper:first',$target).clone(true).slideDown();
          $clone.appendTo($target);
        }

        // check if the variable has a limit
        if ($limit != 0 && $('select',$target).length >= $limit) {
          $('.add_variable_item',$parent).slideUp();
        }

        $timeout(function() {
          // calculate the total based on the new variable
          scope.evaluateTotal();
        });
      }

      // ADD IT! not so fast...
      scope.addToCart = function() {
        //console.log("addToCart");
        var $product = {};
        $product['id'] = scope.product.id;
        $product['variation'] = $('form .variation.selected',element).attr('v_id');
        // if any variables are selected, add it into the product object
        if ($('form .variable[set_id] select:visible',element).length) {
          $product['variable'] = {};
          $('form .variable[set_id] select:visible',element).each(function() {
            var $target = $product['variable'][$(this).closest('.variable').attr('set_id')];
            //console.log("$target",$target);
            if ($target) {
              if( Object.prototype.toString.call($target) === '[object Array]' ) {
                //console.log("$target isArray");
                $product['variable'][$(this).closest('.variable').attr('set_id')].push($(this).val());
              } else {
                //console.log("$target !isArray");
                var $tempVal = $target;
                $product['variable'][$(this).closest('.variable').attr('set_id')] = [];
                $product['variable'][$(this).closest('.variable').attr('set_id')].push($tempVal);
                $product['variable'][$(this).closest('.variable').attr('set_id')].push($(this).val());
              }
            } else {
              $product['variable'][$(this).closest('.variable').attr('set_id')] = [];
              $product['variable'][$(this).closest('.variable').attr('set_id')].push($(this).val());
              //console.log("!$target", $product['variable'][$(this).closest('.variable').attr('set_id')]);
            }
          });
        }

        // check if the cart already has the same item with identical variables
        var $found = null;
        if ($cart['products'] && $cart['products'].length) {
          for (var $cp in $cart['products']) {
            var $p = $cart['products'][$cp];
            //console.log("COMPARE TO CART ITEMS", $p, $product);
            var $temp = {};
            $temp['id'] = $p.id;
            $temp['variation'] = $p.variation;
            $temp['variable'] = $p.variable;
            if (JSON.stringify($temp) == JSON.stringify($product)) {
              $cart['products'][$cp].quantity += scope.quantity;
              $cart['products'][$cp].subtotal += scope.subtotal;
              $found = true;
              break;
            }
          }
        }

        // NOPE! new! push!
        if (!$found) {
          $product['quantity'] = scope.quantity;
          $product['subtotal'] = scope.subtotal;
          $cart["products"].push($product);
        }

        try { window.plugins.toast.showLongCenter($rootScope.text.addedToCart, function(a){
          // console.log('toast success: ' + a)
        }, function(b){
          alert('toast error: ' + b)
        }); } catch(e) {}
        AnalyticsService.registerEvent("cart", "add", scope.product.id);

        //console.log("Cart before adding to LS", $cart);

        // minor animation for adding items
        $('nav#header #cart').addClass('added');
        setTimeout(function() {
          $('nav#header #cart').removeClass('added');
        }, 2000);

        // convert it back into a string for localstorage
        $localStorage.cart = JSON.stringify($cart['products']);
        $rootScope.closePopup();
      }

      // calculate the running total
      scope.evaluateTotal = function() {
        //console.log("evaluateTotal");
        scope.subtotal = parseFloat($('form .variation.selected',element).attr('v'));
        //console.log(">",scope.subtotal);

        $('form .variable[set_id] select:visible',element).each(function(i) {
          $('option:selected', this).each(function(j) {
            if ($(this).attr('t') == 0) {
              scope.subtotal += parseFloat($(this).attr('v'));
            } else if ($(this).attr('t') == 1) {
              var $p = scope.subtotal * (parseFloat($(this).attr('v'))/100);
              scope.subtotal += $p;
            }
            //console.log(i, j, scope.subtotal);
          });
        });

        scope.subtotal *= parseInt(scope.quantity);
      };

      for (var v in scope.product.variables) {
        //console.log("scope.product.variables", v, scope.product.variables[v]);
        scope.product.variables[v].selected = scope.product.variables[v].items[0];
      }
      if (scope.cartProduct) {
        scope.cartProductVariables = [];
        for (var w in scope.cartProduct.variable) {
          //console.log("scope.cartProduct.variable", w, scope.cartProduct.variable[w]);
          scope.cartProductVariables[w] = [];
          for (var u in scope.cartProduct.variable[w]) {
            var val = scope.cartProduct.variable[w][u];
            //console.log("scope.cartProduct.variable[w]", u, scope.cartProduct.variable[w][u]);
            scope.cartProductVariables[w][u] = {}
            scope.cartProductVariables[w][u].selected = findVariableItem(w, val);
          }
        }
        //console.log("scope.cartProductVariables", scope.cartProductVariables);
      }

      function findVariableItem(cv_id, cvi_id) {
        for (var vv in scope.product.variables) {
          if (scope.product.variables[vv].id == cv_id) {
            for (var vi in scope.product.variables[vv].items) {
              if (scope.product.variables[vv].items[vi].id == cvi_id) {
                return scope.product.variables[vv].items[vi];
                break;
              }
            }
            break;
          }
        }
      }

      $timeout(function() {
        scope.quantity = ($rootScope.editProduct) ? $rootScope.editProduct.quantity : 1;
        scope.evaluateTotal();

        $('.quantity .plus').click(function() {
          scope.quantity++;
          scope.evaluateTotal();
        });
        $('.quantity .minus').click(function() {
          if (scope.quantity != 1) {
            scope.quantity--;
            scope.evaluateTotal();
          }
        });

        $('.dyn.select_wrapper').each(function() {
          $('select', this).change(function() {
            scope.evaluateTotal();
          });
          $('.icon[rel="close"]',this).click(function() {
            var $select = $(this).closest('.select_wrapper');
            var $parent = $(this).closest('section.variable');
            if ($('.dyn.select_wrapper',$parent).length > 1) {
              $select.slideUp(function() {
                $select.remove();
              });
            } else {
              $select.hide();
            }

            $('.add_variable_item',$parent).slideDown();
            scope.evaluateTotal();
          });
        });

        $('section.variable').each(function() {
          if ($(this).attr('limit') != 0 && $('select',this).length >= $(this).attr('limit')) {
            $('.add_variable_item',this).slideUp();
          }
        });
      });

      // remove the item from cart and fix localstorage string
      // change to object and remove object..?
      scope.removeCart = function() {
        var $cart = JSON.stringify($rootScope.cart['products']);
        var $original = JSON.stringify($rootScope.editProduct);
        var $newCart = $cart.replace($original, '');
        $newCart = $newCart.replace("[,{", '[{');
        $newCart = $newCart.replace(/,,/g, ',');
        $newCart = $newCart.replace("},]", '}]');

        AnalyticsService.registerEvent("cart", "remove", $rootScope.editProduct.id);
        $localStorage.cart = $newCart;

        scope.backToCart();
      }

      // when editing, update the cart!
      scope.updateCart = function() {
        //console.log("CART",JSON.stringify($rootScope.cart));
        //console.log("EDIT PRODUCT",JSON.stringify($rootScope.editProduct));

        var $product = {};
        $product['id'] = scope.product.id;
        $product['variation'] = $('form .variation.selected',element).attr('v_id');
        //console.log($('form .variable[set_id] select:visible',element).length);
        if ($('form .variable[set_id] select:visible',element).length) {
          $product['variable'] = {};
          $('form .variable[set_id] select:visible',element).each(function() {
            var $target = $product['variable'][$(this).closest('.variable').attr('set_id')];
            //console.log("$target",$target);
            if ($target) {
              if( Object.prototype.toString.call($target) === '[object Array]' ) {
                //console.log("$target isArray");
                $product['variable'][$(this).closest('.variable').attr('set_id')].push($(this).val());
              } else {
                //console.log("$target !isArray");
                var $tempVal = $target;
                $product['variable'][$(this).closest('.variable').attr('set_id')] = [];
                $product['variable'][$(this).closest('.variable').attr('set_id')].push($tempVal);
                $product['variable'][$(this).closest('.variable').attr('set_id')].push($(this).val());
              }
            } else {
              $product['variable'][$(this).closest('.variable').attr('set_id')] = [];
              $product['variable'][$(this).closest('.variable').attr('set_id')].push($(this).val());
              //console.log("!$target", $product['variable'][$(this).closest('.variable').attr('set_id')]);
            }
          });
        }
        $product['quantity'] = scope.quantity;
        $product['subtotal'] = scope.subtotal;

        //console.log("NEW CART PRODUCT",JSON.stringify($product));
        var $cart = JSON.stringify($rootScope.cart['products']);
        var $original = JSON.stringify($rootScope.editProduct);
        $localStorage.cart = $cart.replace($original, JSON.stringify($product));
        //console.log("Updated $localStorage.cart", $localStorage.cart);

        scope.backToCart();
      }

      scope.backToCart = function() {
        $rootScope.editProduct = null;
        $rootScope.setFormImage(null);
        //$rootScope.showAddToCart = null;
        $rootScope.popupForm('show_cart');
      }

      scope.close = function() {
        $rootScope.closePopup();
      }
    }
  };
}]);

// shopping cart!
trueBlue.directive('shoppingCart', ['DataService', '$localStorage', '$rootScope', '$timeout', 'AnalyticsService', 'ShoppingService', function(DataService, $localStorage, $rootScope, $timeout, AnalyticsService, ShoppingService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/shopping-cart.html',
    link: function(scope, element, attrs) {
      scope.Math = window.Math;

      DataService.resolveClient().then(function(data) {
        if ($localStorage.cart) {
          if (!$rootScope.cart) {
            $rootScope.cart = {};
          }
          $rootScope.cart['products'] = JSON.parse($localStorage.cart);
          //console.log("existing cart", $rootScope.cart);
        }
      }, function(e) {
        //console.log("error", e);
      });

      scope.$watchGroup([function() {
        return $rootScope.userDetails;
      },function() {
        return $rootScope.cartRewardTotalPoints;
      }], function() {
        //console.log("scope.$watchShoppingCart", $rootScope.userDetails, $rootScope.cartRewardTotalPoints);
        if ($rootScope.userDetails) {
          scope.showRewards = false;
          DataService.rewards().then(function(data) {
            for (var $d in DataService.rewardData) {
              if (DataService.rewardData[$d].cart_flag) {
                //console.log("rewards?", $rootScope.userDetails.current_points, $rootScope.cartRewardTotalPoints, DataService.rewardData[$d].reward_points);
                if (($rootScope.userDetails.current_points-$rootScope.cartRewardTotalPoints) >= DataService.rewardData[$d].reward_points) {
                  scope.showRewards = true;
                  break;
                }
              }
            }
          }, function(e) {
            //console.log("error", e);
          });
        }
      }, true);

      // grab the global cart variables (taxes, etc)
      scope.variables = $rootScope.clientInfo.order_variables;

      // keep the cart updated
      scope.$watch(function() {
        return $localStorage.cart;
      }, function() {
        if (!$rootScope.cart) {
          $rootScope.cart = {};
        }
        //console.log("$localStorage.cart", $localStorage.cart);
        $rootScope.cart['products'] = ($localStorage.cart) ? JSON.parse($localStorage.cart) : null;
        if ($rootScope.cart && $rootScope.cart['products'] && !$rootScope.cart['products'].length) {
          delete $localStorage.cart;
          $rootScope.cart = null;
        }
        console.log("updated!",$rootScope.cart);
        cartProducts();
      }, true);

      scope.$watch(function() {
        return $rootScope.popUpType;
      }, function() {
        if ($rootScope.popUpType == "show_cart") {
          cartProducts();
        }
      });

      // since the cart only stores ids, we need to grab the product data to display names and such
      function cartProducts() {
        // //console.log("cartProducts");
        DataService.resolveClient().then(function(data) {
          // //console.log("client resolved");
          DataService.products().then(function(data) {
            // //console.log("got products");
            DataService.rewards().then(function(data) {
              // //console.log("$rootScope.cart && $rootScope.cart['products']", $rootScope.cart, $rootScope.cart['products']);
              if ($rootScope.cart && $rootScope.cart['products']) {
                scope.cartProducts = $rootScope.cart['products'];
                // //console.log("scope.cartProducts", scope.cartProducts);
                if (scope.cartProducts) {
                  DataService.getProductDetailsCart(scope.cartProducts).then(function(data) {
                    scope.subtotal = 0;
                    scope.totals = [];
                    $rootScope.cart.quantity = 0;
                    $rootScope.cartRewardTotal = 0;
                    $rootScope.cartRewardTotalPoints = 0;
                    $rootScope.cartPreRewardTotal = 0;
                    $rootScope.cart['types'] = [];
                    scope.cartProducts = data;
                    for (var $c in scope.cartProducts) {
                      console.log("scope.cartProducts[$c]", scope.cartProducts[$c]);
                      if (scope.cartProducts[$c].data === null) {
                        console.log("this item is no longer available.");
                        ShoppingService.removeProductFromCart($c)
                        continue;
                      }
                      scope.subtotal += parseFloat(scope.cartProducts[$c].subtotal);
                      $rootScope.cart.quantity += scope.cartProducts[$c].quantity;
                      var product_type = scope.cartProducts[$c].data.product_type;
                      if (product_type) {
                        if (!$rootScope.cart['types'].includes(product_type)) {
                          $rootScope.cart['types'].push(product_type);
                        }
                        //console.log("scope.totals", scope.totals);
                        if (!scope.totals[product_type]) {
                          scope.totals[product_type] = 0;
                        }
                        //console.log("scope.totals", scope.totals);
                        scope.totals[product_type] += parseFloat(scope.cartProducts[$c].subtotal);
                        //console.log("cart types", $rootScope.cart['types']);
                        //console.log($rootScope.cart['types'].join(","));
                        //console.log("scope.totals", scope.totals);
                      }
                      if (scope.cartProducts[$c].type && scope.cartProducts[$c].type == "reward") {
                        $rootScope.cartRewardTotal += parseFloat(scope.cartProducts[$c].subtotal);
                        $rootScope.cartRewardTotalPoints += parseInt(scope.cartProducts[$c].data.reward_points);
                        // need to be added to the cart too!
                        if (!scope.totals['reward']) {
                          scope.totals['reward'] = 0;
                        }
                        scope.totals['reward'] += parseFloat(scope.cartProducts[$c].subtotal);
                      } else {
                        $rootScope.cartPreRewardTotal += parseFloat(scope.cartProducts[$c].subtotal);
                      }
                    }

                    $timeout(function() {
                      scope.potentialPoints = ($rootScope.clientInfo.dollar_divisor && $rootScope.clientInfo.order_get_points_flag) ? scope.subtotal/$rootScope.clientInfo.dollar_divisor : null;
                      scope.evaluateTotal();
                    });
                  });
                };
              }
            }, function(e) {
              //console.log("rewards error", e);
            });
          }, function(e) {
            //console.log("products error", e);
          });
        }, function(e) {
          //console.log("resolve client error", e);
        });
      }

      // let's edit an item in the cart
      scope.editProduct = function($index) {
        var product = scope.cartProducts[$index];
        if (product.type && product.type == "reward") {
          ShoppingService.removeProductFromCart($index, product);
        } else {
          $rootScope.editProduct = product;
          //console.log("editProduct", $index, $rootScope.editProduct);
          if ($rootScope.editProduct.data.image) {
            var a = $rootScope.editProduct.data.image;
            var b = "100px_";
            var position = a.lastIndexOf('/')+1;
            var output = [a.slice(0, position), b, a.slice(position)].join('');
          }

          AnalyticsService.registerEvent("cart", "edit", $rootScope.editProduct.id);

          $rootScope.setFormImage((output) ? output : null);
          $rootScope.popupForm('add_to_cart');
        }
      }

      // the cart can have variables too!
      scope.addVariableItem = function($event, $limit) {
        var $parent = $($event.currentTarget).closest('section.variable');
        var $target = $('.add_here',$parent);

        if ($('.select_wrapper',$target).length == 1 && $('.select_wrapper',$target).is(':hidden')) {
          $('.select_wrapper',$target).slideDown();
          //console.log("show");
        } else {
          var $clone = $('.dyn.select_wrapper:first',$target).clone(true).slideDown();
          $clone.appendTo($target);
          //console.log("clone");
        }

        if ($limit != 0 && $('select',$target).length >= $limit) {
          $('.add_variable_item',$parent).slideUp();
        }

        $timeout(function() {
          scope.evaluateTotal();
        });
      }

      scope.findVariableItem = function(cv_id, cvi_id) {
        for (var vv in scope.variables) {
          if (scope.variables[vv].id == cv_id) {
            for (var vi in scope.variables[vv].items) {
              if (scope.variables[vv].items[vi].id == cvi_id) {
                return scope.variables[vv].items[vi];
                break;
              }
            }
            break;
          }
        }
      }

      // keep the cart total up to date
      scope.evaluateTotal = function() {
        console.log("evaluateTotal");
        scope.total = scope.subtotal;
        //console.log(">",scope.total);

        var $variables = {};
        if ($('form .variable[set_id] select:visible',element).length) {
          $('form .variable[set_id] select:visible',element).each(function() {
            var $set_id = $(this).closest('.variable').attr('set_id');
            $('option:selected', this).each(function(j) {
              var item = scope.findVariableItem($set_id, $(this).val());
              // //console.log("item", item);
              //console.log($(this).attr('t'), $(this).attr('v'));
              if (item.type == 0) {
                scope.total += parseFloat(item.value);
              } else if (item.type == 1) {
                var $p = 0;
                console.log("scope.totals", scope.totals);
                if (Object.keys(scope.totals).length) { // if a product_type is there (should be always)
                  // //console.log("here");
                  if (scope.totals['item'] != undefined) { // only apply stuff to items
                    // //console.log("got it");
                    console.log("evaluateTotal item", parseFloat(scope.totals['item']) * (parseFloat(item.value)/100));
                    $p = parseFloat(scope.totals['item']) * (parseFloat(item.value)/100);
                  }
                  if (scope.totals['reward'] != undefined) { // only apply stuff to items
                    console.log("evaluateTotal reward", parseFloat(scope.totals['reward']) * (parseFloat(item.value)/100));
                    $p += parseFloat(scope.totals['reward']) * (parseFloat(item.value)/100);
                  }
                } else {
                  // //console.log("or here", scope.subtotal, item.value);
                  $p = parseFloat(scope.subtotal) * (parseFloat(item.value)/100);
                }
                //console.log((parseFloat(item.value)/100));
                //console.log(scope.subtotal);
                // //console.log($p);
                //console.log(parseFloat($p));
                // //console.log("scope.totals", scope.totals, scope.totals.length, $p);
                scope.total += parseFloat($p);
                // //console.log("scope.total", scope.total);
              }
            });
            var $target = $variables[$set_id];
            //console.log("$target",$target);
            if ($target) {
              if( Object.prototype.toString.call($target) === '[object Array]' ) {
                //console.log("$target isArray");
                $variables[$set_id].push($(this).val());
              } else {
                //console.log("$target !isArray");
                var $tempVal = $target;
                $variables[$set_id] = [];
                $variables[$set_id].push($tempVal);
                $variables[$set_id].push($(this).val());
              }
            } else {
              $variables[$set_id] = [];
              $variables[$set_id].push($(this).val());
              //console.log("!$target", $variables[$(this).closest('.variable').attr('set_id')]);
            }
          });
        }

        $rootScope.cart['variables'] = $variables;
        $rootScope.cart['total'] = scope.total;

        //console.log("cart:", $rootScope.cart);
      };

      scope.continueCart = function() {
        $('.error',element).html('').hide();
        ShoppingService.checkAvailablePoints().then(function(response) {
          if (response.error) {
            //console.log("ERROR");
            if (response.message == "insufficient") { $errorMessage = $rootScope.text.formMsgInsufficient + "<br>" + $rootScope.text.formRemoveReward; }
            $('.error',element).html($errorMessage).show();
          } else {
            //console.log("SUBMIT CART!", $rootScope.cart);
            $rootScope.setFormImage(null);

            $rootScope.showCart = null;
            AnalyticsService.registerEvent("cart", "confirm", $rootScope.cart['name']);
            $rootScope.popupForm('confirm_cart');
          }
        }, function(e) {
          //console.log("checkAvailablePoints error", e);
        });
      }

      scope.close = function() {
        $rootScope.closePopup();
      }

      for (var v in scope.variables) {
        scope.variables[v].selected = scope.variables[v].items[0];
      }

      $timeout(function() {
        $('.dyn.select_wrapper').each(function() {
          $('select', this).change(function() {
            scope.evaluateTotal();
          });
          $('.icon[rel="close"]',this).click(function() {
            var $select = $(this).closest('.select_wrapper');
            var $parent = $(this).closest('section.variable');
            if ($('.dyn.select_wrapper',$parent).length > 1) {
              $select.slideUp(function() {
                $select.remove();
              });
            } else {
              $select.hide();
            }

            $('.add_variable_item',$parent).slideDown();
            scope.evaluateTotal();
          });
        });

        $('section.variable').each(function() {
          if ($(this).attr('limit') != 0 && $('select',this).length >= $(this).attr('limit')) {
            $('.add_variable_item',this).slideUp();
          }
        });
      });
    }
  };
}]);

// CONFIRM!
trueBlue.directive('confirmCart', ['DataService', '$localStorage', '$rootScope', '$timeout', '$filter', 'UserService', 'ShoppingService', 'AnalyticsService', function(DataService, $localStorage, $rootScope, $timeout, $filter, UserService, ShoppingService, AnalyticsService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/confirm-cart.html',
    link: function(scope, element, attrs) {
      scope.backToCart = function() {
        scope.saveCart();

        $rootScope.setFormImage(null);
        //$rootScope.confirmCart = null;
        $rootScope.popupForm('show_cart');
      }

      scope.later = false;

      scope.pickUpAsap = function ($event) {
        $event.preventDefault();
        scope.later = false;
        // send the request to server, indicating pick up asap
      }
      scope.pickUpLater = function ($event) {
        $event.preventDefault();
        scope.later = true;
        // invoke functions associate with pick up time selection and validation
      }
      // is the location open, available for orders?
      // even if the location is closed, if pickup_time can be LATER, allow ordering.
      scope.checkTime = function($location, $minutes) {
        if ($location.preorder_day_limit > 0) {
          return "open";
        } else {
          return DataService.isItOpen($location, $minutes);
        }
      }

      scope.goodOrder = true;
      scope.underMinimum = 0;
      scope.overMaximum = 0;
      scope.locationMinimum = null;
      scope.locationMaximum = null;

      // every 15mins between pick up slot
      var pickUpInterval = [0.25, 0.5, 0.75]
      // days to pick up after order is set to 3 weeks
      var daysForPickUp;
      var $currentDate = new Date();
      var $currentDayOfWeek = $currentDate.getDay();
      var $currentHour = $currentDate.getHours();
      var $currentMin = $currentDate.getMinutes();
      var $currentTime = $currentHour + Math.round(($currentMin/60)*100)/100;
      $currentTime = ($currentTime == 0) ? 24 : $currentTime;

      var miniPreTime;
      var timeWindow;
      var sameDayAllowed;
      var availableDates = new Array();
      var lastDay;
      var chosenTime;
      scope.allowASAP = false;
      scope.allowSelect = false;

      // keep the location button updated when changing
      scope.updateAddressA = function($id) {
        //console.log("updateAddressA", $id);
        DataService.getLocationDetails($id).then(function(cl) {
          scope.locationMinimum = cl.cart_order_min;
          scope.locationMaximum = cl.cart_order_max;
          scope.always_allowed = cl.always_allowed;

          if (scope.locationMinimum && scope.locationMaximum) {
            // using $rootScope.cartPreRewardTotal, total is prior to taxes, rewards, other cart variables.
            // product variables that affect totals are assigned within this total
            scope.underMinimum = scope.locationMinimum - $rootScope.cartPreRewardTotal;//$rootScope.cart['total'];
            scope.overMaximum = $rootScope.cartPreRewardTotal - scope.locationMaximum; //$rootScope.cart['total'] - scope.locationMaximum;
            if (scope.underMinimum > 0) {
              scope.goodOrder = false;
            }
            if (scope.overMaximum > 0) {
              scope.goodOrder = false;
            }
          }

          var cartClose = (cl.cart_close_minutes) ? cl.cart_close_minutes : 15;
          sameDayAllowed = cl.same_day_allowed;
          timeWindow = cl.pickup_times;
          miniPreTime = cl.minimum_prep / 60;
          daysForPickUp = cl.preorder_day_limit;
          // if store is closing or closed, you cannot order for the next day.
          lastDay = $currentDate.getTime() + daysForPickUp*24*60*60*1000 + (scope.pushDay(cl, cartClose) ? 1*24*60*60*1000 : 0);

          var $address = $filter('encodeURIComponent')(cl.location_address + ' ' + cl.location_city + ' ' + cl.location_province + ' ' + cl.location_country);
          $('a.loc_btn', element).attr('address',$address);

          scope.allowASAP = (sameDayAllowed) ? true : false;
          scope.allowSelect = (daysForPickUp > 0) ? true : false;
          scope.allowOrder = (scope.always_allowed) ? 'open' : scope.checkTime(cl, cartClose);
          if (scope.allowASAP && !scope.allowSelect) {
            scope.later = false; // because the only option is ASAP, do not show pickup options, and later must be false
          } else if (!scope.allowASAP && scope.allowSelect) {
            scope.later = true; // because ASAP is NOT an option, and you must select one, do not show ASAP, and later must be true
          }

          if (scope.later) {
            updatePickUpTime(timeWindow, miniPreTime, cl);
          }
        });
      }

      scope.pushDay = function(cl, cartClose) {
        return (DataService.isItOpen(cl, cartClose) != "open" && !DataService.isItOpeningLaterToday(cl));
      }

      function updatePickUpTime(timeWindow, miniPreTime) {
        availableDates.length = 0;
        var notOpen = timeWindow.filter(function (time) {
          if (time[0] === null || time[1] === null) {
            time[2] = timeWindow.indexOf(time);
            return time;
          }
        });
        // get all the date in 3 weeks available for pick up, set the hours for each day
        for (var i = daysForPickUp; i > -1; i--) {
          var dateOption = new Object();
          var day = new Date(lastDay - i*24*60*60*1000);
          var dayOfWeek = day.getDay();
          var min;
          var pickUpTime;
          var notAvailable = notOpen.find(function (time) {
            return time[2] === dayOfWeek;
          })
          if (!notAvailable) {
            if (i === daysForPickUp) {
              if (sameDayAllowed) {
                dateOption["date"] = "Today";
                if ($currentTime + miniPreTime < timeWindow[dayOfWeek[0]]) {
                  dateOption["hours"] = timeWindow[dayOfWeek];
                }else {
                  min = pickUpInterval.find(function (time) {
                    return time > ($currentTime + miniPreTime) % 1;
                  });
                  if (!min) {
                    min = 1;
                  }
                  pickUpTime = Math.floor($currentTime + miniPreTime) + min;
                  dateOption["hours"] = [pickUpTime, timeWindow[dayOfWeek][1]];
                }
              }else {
                continue;
              }
            }else {
              dateOption["hours"] = timeWindow[dayOfWeek];
              // dateOption["date"] = months[day.getMonth()] + " " + day.getDate() + ", "+ (day.getYear() + 1900);
              dateOption["date"] = $filter('date')(lastDay - i*24*60*60*1000, 'fullDate')
            }
          }else {
            dateOption["date"] = $filter('date')(lastDay - i*24*60*60*1000, 'fullDate');
            dateOption["noHour"] = true;
          }
          dateOption["dateInMilS"] = lastDay - i*24*60*60*1000;
          availableDates.push(dateOption);
        }

        getTimeSlots(availableDates);

        var haveSlots = availableDates.filter(function (dateOption) {
          if (dateOption.timeSlots && dateOption.timeSlots.length > 0) {
            return dateOption;
          }
        });
        scope.dateAvailable = haveSlots;
        scope.selectedDate = haveSlots[0];
        scope.theDate = haveSlots[0].date;
        scope.timeSelected = haveSlots[0].timeSlots[0];
      }

      scope.updateHours = function () {
        var date = scope.theDate;
        var the_day = scope.dateAvailable.find(function (day) {
          return day.date === date;
        })
        scope.selectedDate = the_day;
        scope.timeSelected = the_day.timeSlots[0];
      }

      scope.alertPickUptime = function() {
        var time = scope.timeSelected;
        chosenTime = (time.value).split(":");
        //console.log(chosenTime);
      }

      function getTimeSlots(dates) {
        for (var i = 0; i < dates.length; i++) {
          if (!dates[i].noHour) {
            if (!dates[i].timeSlots) {
              dates[i]["timeSlots"] = new Array();
            }
            var x = dates[i].hours[0];
            var counter;
            if (dates[i].hours[0] > dates[i].hours[1]) {
              counter = 24;
            } else {
              counter = 1;
            }
            while ( x <= (dates[i].hours[1])) {
              var the_min;
              if (Math.round(x % 1 * 60) === 0) {
                the_min = "00";
              } else {
                the_min = Math.round(x % 1 * 60);
              }
              var the_hour;
              var time = new Array();
              var time_string;
              var time_value;

              the_hour = Math.floor(x);
              time_value = the_hour + ":" + the_min;

              if (the_hour == 12 && the_min == "00") {
                time_string = $rootScope.text.noon;
              } else if (the_hour == 24 && the_min == "00") {
                time_string = $rootScope.text.midnight;
              } else if (the_hour < 12) {
                time_string = the_hour + ":" + the_min + " AM";
              } else {
                if (the_hour > 12) {
                  the_hour -= 12;
                }
                time_string = the_hour + ":" + the_min + " PM";
              }

              dates[i]["timeSlots"].push({"text":time_string, "value":time_value});
              x += 0.25;
            }
          }
        }
      }

      // save the cart with new parameters into the rootscope
      scope.saveCart = function() {
        var pickUp;
        if (!scope.later) {
          pickUp = "asap"
        } else {
          if (!chosenTime) {
            chosenTime = ($('[ng-model="timeSelected"] option:selected',element).val()).split(":");
          }
          pickUp = new Date(scope.selectedDate.dateInMilS).setHours(chosenTime[0], chosenTime[1], 0);
        }
        $rootScope.cart['estimate'] = pickUp;
        $rootScope.cart['location_id'] = $('section.variable.location select option:selected',element).val();
        $rootScope.cart['name'] = $('input[name="name"]',element).val();
        $rootScope.cart['email'] = $('input[name="email"]',element).val();
        $rootScope.cart['phone'] = $('input[name="phone"]',element).val();
        $rootScope.cart['notes'] = $('textarea[name="notes"]',element).val();
        if ($rootScope.userDetails) {
          $rootScope.cart['user_id'] = $rootScope.userDetails.id;
        }

        //console.log("saved", $rootScope.cart);
      }

      // SUBMIT!!
      scope.submitCart = function(type) {
        $('input[required], select[required]',element).each(function() {
          $(this).removeClass("required");
          if ($(this).val() == "") {
            $(this).addClass("required");
          }
        });

        if ($('.required',element).length) {
          //console.log("required!",$('.required',element).length);
          return false;
        }

        scope.saveCart();

        AnalyticsService.registerEvent("cart", "submit", $rootScope.cart['total']);
        // send cart to services.
        ShoppingService.addOrder($rootScope.cart).then(function(data) {
          //console.log("addOrder", data);
          if (!data.error) {
            if (type == "payment") {
              $rootScope.cart['order_id'] = data.order_id;
              scope.gotoPaymentDetails();
            } else {
          		UserService.getUserDetails("points");
              UserService.getHistory("points");
              $rootScope.closePopup();
            }
          } else {
            //console.log("error in making the order...");
          }
        }, function(e) {
          //console.log("error", e);
        });
        // return "order sent", etc.
      }

      scope.gotoPaymentDetails = function() {
        $rootScope.setFormImage(null);
        AnalyticsService.registerEvent("cart", "payment", $rootScope.cart['name']);
        $rootScope.popupForm('payment_details');
      }

      scope.close = function() {
        $rootScope.closePopup();
      }

      // set the initial location address href
      $timeout(function() {
        scope.selectedLoc = $rootScope.clientInfo.cart_locations[0];
        scope.updateAddressA(scope.selectedLoc.id);
      });
    }
  };
}]);

// payment, with stripe!
trueBlue.directive('paymentDetails', ['DataService', '$localStorage', '$rootScope', '$timeout', '$filter', 'UserService', 'ShoppingService', 'AnalyticsService', function(DataService, $localStorage, $rootScope, $timeout, $filter, UserService, ShoppingService, AnalyticsService) {
  return {
    restrict: 'EA',
    templateUrl: 'Partials/payment-details.html',
    link: function(scope, element, attrs) {
      var d = new Date();
      var n = d.getFullYear();
      scope.thisYear = n;
      scope.thisMonth = d.getMonth();
      scope.original_total;

      scope.backToCart = function() {
        $rootScope.setFormImage(null);
        //$rootScope.paymentDetails = null;
        $rootScope.popupForm('confirm_cart');
      }

      var form, $error, $submit;
      var obj = {};

      scope.total = null;

      // start here, create the order object
      scope.getCustomer = function() {
        form = $('form', element);
        $error = $('.error', form);

        obj["client_id"] = $rootScope.clientId;
        obj["email"] = $rootScope.cart['email'];
        obj["order_id"] = $rootScope.cart['order_id'];
        obj["description"] = "Order #"+$rootScope.cart['order_id'];
        obj["amount"] = $rootScope.cart['total'];
        if ($rootScope.cart['subscription_token']) {
          obj["subscription_token"] = $rootScope.cart['subscription_token'];
        }

        scope.original_total = $rootScope.cart['total'];
        scope.total = scope.original_total;

        // if we have the user's stripe token, we can skip some stripe functions
        if ($localStorage.stripe_token) {
          // get cards to choose from
          ShoppingService.getStripeCards().then(function(data) {
            //console.log("getStripeCards", data);
            if (!data.error) {
              scope.cards = data.cards;
              if (scope.cards && scope.cards.data.length) {
                scope.newCard = false;
              } else {
                scope.newCard = true;
              }
            } else {
              $localStorage.stripe_token = null;
              scope.cards = [];
              scope.newCard = true;
            }
            $timeout(function() {
              $submit = $('.submit_btn', form);
              //console.log("getCustomer elements", form.length, $error.length, $submit.length);
            });
          }, function(e) {
            //console.log("error", e);
          });
        } else {
          scope.cards = [];
          scope.newCard = true;
        }
      }

      scope.toggleAddCard = function() {
        if (scope.newCard) {
          scope.newCard = false;
        } else {
          scope.newCard = true;
        }
      }

      scope.deleteCard = function($event) {
        var card = $($event.currentTarget);
        $(card).closest('li').fadeOut();
        ShoppingService.deleteStripeCard($localStorage.stripe_token, card.attr('card_id')).then(function(data) {
          //console.log("DELETE STRIPE CARD!", data);
          scope.getCustomer();
        }, function(e) {
          //console.log("error", e);
        });
      }

      scope.selectCard = function($event) {
        var card = $($event.currentTarget);
        $('ul.cards li .btn').removeClass('selected');
        card.addClass('selected');
      }

      scope.submitPayment = function() {
        //console.log("submitPayment");
        if (!form) {
          form = $('form', element);
        }
        if (!$error) {
          $error = $('.error', form);
        }
        if (!$submit) {
          $submit = $('.submit_btn', form);
        }
        //console.log($error.length, $submit.length, form.length);

        if ($('input[name="coupon_code"][type="text"]', form).length && $('input[name="coupon_code"][type="text"]', form).val() != "") {
          //console.log("add coupon first");
          scope.addCoupon();
          return false;
        }

        $error.hide().html('');
        $submit.addClass('processing');
        form.addClass("processing");
        $rootScope.disableShield();

        // if the total was affected by a coupon...
        obj["amount"] = scope.total;
        // if there's a coupon...
        if ($rootScope.cart.coupon) {
          obj["coupon_code"] = $rootScope.cart.coupon.id;
        }
        if ($rootScope.cart.subscription) {
          obj["plan"] = $rootScope.cart.subscription.id;
        }

        if($('ul.cards:visible li .btn.selected').length && $localStorage.stripe_token) {
          // skip the token making phase
          obj["stripe_card_token"] = $('ul.cards li .btn.selected').attr('card_id');
          obj["stripe_customer_token"] = $localStorage.stripe_token;
          obj["save"] = "1";
          //console.log("gots stripe token", obj);
          // currently, i don't know how to prevent users from reusing coupons. applying them to the customer didnt seem to work...
          // but it didnt seem to harm it. maybe they still worked because it was cancelled instead?
          if ($rootScope.cart['subscription']) {
            ShoppingService.registerCouponToken(obj).then(function(data) {
              scope.stripeCharge(obj);
            }, function(e) {
              //console.log("error", e);
            });
          } else {
            scope.stripeCharge(obj);
          }
          return false;
        } else if ($('ul.cards:visible').length && !$('ul.cards:visible li .btn.selected').length) {
          $error.html($rootScope.text.selectACard).show();
          $rootScope.enableShield();
          $submit.removeClass('processing');
          form.removeClass("processing");
          return false;
        }

        // create the objects
        obj["number"] = $('input[name="number"]',form).val();
        obj["exp_month"] = $('select[name="month"]',form).val();
        obj["exp_year"] = $('select[name="year"]',form).val();
        obj["cvc"] = $('input[name="cvc"]',form).val();
        obj["name"] = $('input[name="name"]',form).val();
        obj["save"] = $('select[name="save"]',form).val();

        //console.log("submit payment", obj);

        // get the stripe token or check if it's already in storage
        // this explains the longer wait during card processing
        if (!obj.stripe_token) {
          Stripe.card.createToken(form, function(err, token) {
            //console.log("stripe.tokens.create", err, token);
            if (token.error) {
              $error.html(token.error.message).show();
              $rootScope.enableShield();
              $submit.removeClass('processing');
              form.removeClass("processing");
            } else {
              obj["stripe_token"] = token.id;
              if ($localStorage.stripe_token) {
                //console.log("$localStorage.stripe_token", $localStorage.stripe_token, obj);
                obj["stripe_customer_token"] = $localStorage.stripe_token;
                ShoppingService.addStripeCard(obj).then(function(data) {
                  //console.log("addStripeCard", obj, data);
                  obj["stripe_card_token"] = data.stripe_card_token;
                  scope.stripeCharge(obj);
                }, function(e) {
                  //console.log("error", e);
                });
              } else {
                //console.log("!$localStorage.stripe_token", obj);
                obj["stripe_card_token"] = token.card.id;
                scope.stripeCustomer(obj);
              }
            }
          });
        } else {
          scope.stripeCustomer(obj);
        }
      }

      scope.addCoupon = function() {
        // if it's NOT subscription, it should be applied to the total (pre-tax).
        // if it's a subscription, it does not take the total from here ANYWAYs.
        var $coupon_code = $('input[name="coupon_code"]', element).val();
        if (!$coupon_code) {
          return false;
        }

        $error.hide().html('');

        ShoppingService.checkStripeCoupon($coupon_code).then(function(response) {
          //console.log("addCoupon", response);
          if (response.error || response.stripe_response && !response.stripe_response.valid) {
            if (response.message == "invalid" || !response.stripe_response.valid) {
              $error.html($rootScope.text.invalidCoupon).show();
              $('input[name="coupon_code"]', element).val('');
            }
          } else {
            $rootScope.cart.coupon = response.stripe_response;
            scope.reTotal();
          }
        });
      }

      scope.deleteCoupon = function($event) {
        // only one coupon at a time.
        var coupon = $($event.currentTarget);
        $rootScope.cart.coupon = null;
        scope.reTotal();
      }

      scope.reTotal = function() {
        if ($rootScope.cart.coupon) {
          if ($rootScope.cart.coupon.amount_off) {
            scope.total = scope.original_total - ($rootScope.cart.coupon.amount_off/100);
          } else if ($rootScope.cart.coupon.percent_off) {
            scope.total = scope.original_total - (scope.original_total * ($rootScope.cart.coupon.percent_off/100));
          }
          if (scope.total < 0) {
            scope.total = 0;
          }
        } else {
          scope.total = scope.original_total
        }
        //console.log($rootScope.cart);
        $timeout(function() {
          $rootScope.$apply();
          scope.$apply();
        });
      }

      scope.stripeCustomer = function(obj) {
        //console.log("stripeCustomer", obj);
        if ($localStorage.stripe_token) {
          obj["stripe_customer_token"] = $localStorage.stripe_token;
          AnalyticsService.registerEvent("stripe", "customer", "found-"+$localStorage.stripe_token);
          if ($rootScope.cart['subscription']) {
            ShoppingService.registerCouponToken(obj).then(function(data) {
              scope.stripeCharge(obj);
            }, function(e) {
              //console.log("error", e);
            });
          } else {
            scope.stripeCharge(obj);
          }
        } else {
          ShoppingService.createStripeCustomer(obj).then(function(data) {
            //console.log(obj, data);
            // customer created, charge them!
            if (!data.error) {
              $localStorage.stripe_token = data.customer_token;
              obj["stripe_customer_token"] = $localStorage.stripe_token;
              AnalyticsService.registerEvent("stripe", "customer", "created-"+$localStorage.stripe_token);
              scope.stripeCharge(obj);
            } else {
              $error.html(data.message).show();
              $rootScope.enableShield();
              $submit.removeClass('processing');
              form.removeClass("processing");
              //console.log("error making the stripe customer...");
              AnalyticsService.registerEvent("stripe", "customer", "error: "+data.message);
            }
          }, function(e) {
            //console.log("error", e);
          });
        }
      }

      scope.stripeCharge = function(obj) {
        ShoppingService.chargeStripe(obj).then(function(data) {
          //console.log(obj, data);
          if (!data.error) {
            // charged!
            //console.log("DONE CHARGING!", obj);
            AnalyticsService.registerEvent("stripe", "charge", "success-"+$rootScope.cart['order_id']);
            // if the order is a passport, subscription, or only contains tickets, mark as complete.
            if ($rootScope.cart['passport'] || $rootScope.cart['subscription'] || $rootScope.cart['types'].join(",") === "ticket") {
              var status = "complete";
            } else {
              status = "sent";
            }
            // it will always be paid coming from this service.
            var paid = 1;
            // apply discount and update order to reflect new totals
            ShoppingService.updateOrder($rootScope.cart['order_id'], "status", status).then(function() {
              ShoppingService.updateOrder($rootScope.cart['order_id'], "paid", paid).then(function() {
            		UserService.getUserDetails("points");
                UserService.getHistory("points");
                ShoppingService.getOrderHistory("update completed");
                ShoppingService.setOrder($rootScope.cart['order_id']);
                $rootScope.enableShield();
                $submit.removeClass('processing');
                form.removeClass("processing");
                $('section#forms').addClass("paid");
                //UserService.closePopup();
              });
            });
          } else {
            $error.html(data.message).show();
            $rootScope.enableShield();
            $submit.removeClass('processing');
            form.removeClass("processing");
            //console.log("error charging the stripe customer :(");
            AnalyticsService.registerEvent("stripe", "charge", "error: "+data.message);
          }
        }, function(e) {
          //console.log("error", e);
        });
      }

      scope.close = function() {
        $rootScope.closePopup();
      }

      $timeout(function() {
        //console.log("paymentDetails timeout");
        scope.getCustomer();
      });
    }
  };
}]);

trueBlue.directive('shortcut', ['$rootScope', '$filter', '$compile', '$timeout', function($rootScope, $filter, $compile, $timeout) {
  return {
    restrict: 'E',
    scope: {
      cut: '=',
      loc: '='
    },
    link: function (scope, element) {
      var parent = $(element).parent();

      $rootScope.$watch(function() {
        return $rootScope.selectedLanguage;
      }, function() {
        createShortcut();
      }, true);

      function createShortcut() {
        var img = ($filter('getTranslation')(scope.cut.image, $rootScope.selectedLanguage));
        var text = ($filter('getTranslation')(scope.cut.text, $rootScope.selectedLanguage));

        //console.log("createShortcut", scope.cut, $rootScope.selectedLanguage, img, text, element);

        var html = '<a rel="'+scope.cut.name+'" ';
        if (img) {
          html += 'class="img" ';
        }
        if (scope.cut.placement == "menu") {
          html += 'class="icon" ';
        }

        var link = $rootScope.getShortcutLink(scope.cut, scope.loc);

        switch (scope.cut.name) {
          case "instagram":
            html += 'instagram-user="'+link+'" ng-click="openSystem($event)">';
            break;
          case "locations":
            if (scope.loc) {
              html += 'address="'+link+'" address-href>';
            } else {
              html += 'link="'+link+'" ng-click="openSystem($event)">';
            }
            break;
          default:
            html += 'link="'+link+'" ng-click="openSystem($event)">';
            break;
        }
        // if (scope.cut.placement !== "menu") {
          if (img && text) { // cha me cha uses an image with text...
            html += '<img ng-src="'+img+'" /><div><div class="icon" rel="spacer"></div><span>'+text+'</span></div>';
          } else if (img) {
            html += '<img ng-src="'+img+'" />';
          } else if (text) { // only if the thing has text, do we show this version.
            html += '<div><div class="icon" rel="'+scope.cut.name+'"></div><span>'+text+'</span></div>';
          } else if (scope.cut.placement != "menu") {
            html += '<div class="icon" rel="'+scope.cut.name+'"></div>';
          }
        // }
        html += "</a>";

        //console.log("HTML", html);

        //console.log("length?", $('a[rel="'+scope.cut.name+'"]', parent), $('a[rel="'+scope.cut.name+'"]', parent).length);
        var currentElement = $('a[rel="'+scope.cut.name+'"]', parent);
        var length = currentElement.length;
        if (length) {
          var e = $compile(html)(scope);
          currentElement.replaceWith(e);
        } else {
          e = $compile(html)(scope);
          if (link) {
            //console.log("link, replace");
            element.replaceWith(e);
          } else {
            //console.log("!link, remove!")
            element.remove();
          }
        }
      }

      scope.openSystem = function($event) {
        //console.log("scope.openSystem",$event);
        $rootScope.openSystem($event);
      }
    }
  }
}]);

trueBlue.directive('cartIntervals', ['$rootScope', function($rootScope) {
  return {
    restrict: 'EA',
    link: function(scope, element, attrs) {
      //console.log("cartIntervals", scope, element, attrs);
      var copy;
      if (attrs.count) {
        copy = $rootScope.text.every + " " + attrs.count + " " + $rootScope.text["plural"+attrs.interval];
      } else {
        if (attrs.type != "sub") {
          if (attrs.coupon) {
            copy = $rootScope.text["this"+attrs.interval];
          } else {
            copy = $rootScope.text["per"+attrs.interval];
          }
        } else {
          copy = $rootScope.text["sub"+attrs.interval];
        }
      }

      $(element).html(copy);
    }
  }
}]);


/* OTHER JAVASCRIPT */
var emailRegX = /^([A-Za-z0-9_\-\.\+])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
var phoneNumberRegX = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;
//

function validatePhone($ele) {
  if (phoneNumberRegX.test($ele.val())) {
    var formattedPhoneNumber = $ele.val().replace(phoneNumberRegX, "($1) $2-$3");
    $ele.val(formattedPhoneNumber);
    return true;
  } else {
    return "invalid";
  }
}

// validate the email address
function validateEmail($email) {
  if ($email == "") { // IF EMPTY
    return false;
  }
  // THIS MAKES SURE IT IS AN EMAIL BEFORE RETURNING AN INVALID MESSAGE
  var emailAt = $email.lastIndexOf("@");
  var emailDot = $email.lastIndexOf(".");
  var emailTLD = $email.substring(emailDot+1);
  if (emailAt < 0 || emailDot < 0 || emailAt > emailDot || emailTLD.length < 2) {
    return false;
  }
  if (emailRegX.test($email) == false) { // FAIL REGEX
    //console.log("E-mail NO!");
    return "invalid";
  }
  return true;
}

// showing the properties of a javascript object
function showProps(obj, objName) {
  var result = "";
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
        result += objName + "." + i + " = " + obj[i] + "\n";
    }
  }
  return result;
}

function getQueryVariable(string, variable) {
  var query = string;
  var vars = query.split('&');
  for (var i = 0; i < vars.length; i++) {
    var pair = vars[i].split('=');
    if (decodeURIComponent(pair[0]) == variable) {
      return decodeURIComponent(pair[1]);
    }
  }
}



/* ASYNC JS */
function async(u, c) {
  var d = document, t = 'script',
      o = d.createElement(t),
      s = d.getElementsByTagName(t)[0];
  o.src = u;
  if (c) { o.addEventListener('load', function (e) { c(null, e); }, false); }
  s.parentNode.insertBefore(o, s);
}



/* ONLINE / OFFLINE */
function onDeviceReady() {
  //console.log("onDeviceReady");
  angular.bootstrap(document, ["trueBlue"]);

  var injector = angular.element(document.body).injector();
  injector.invoke(function (AppService) {
    AppService.onDeviceReady();
  });

  document.addEventListener("online", function() {
    //console.log("ONLINE");
    injector.invoke(function (AppService) {
      AppService.isOnline();
    });
  }, false);

  document.addEventListener("offline", function() {
    //console.log("OFFLINE");
    injector.invoke(function (AppService) {
      AppService.isOffline();
    });
  }, false);

  document.addEventListener("backbutton", function(e) {
    //console.log("backbutton", $('body').is('.open.form'));
    if ($('body').is('.open.form')) {
      injector.invoke(function (UserService) {
        //console.log("userservice");
        $rootScope.closePopup();
      });
    } else {
      //console.log("backhistory");
      navigator.app.backHistory();
    }
  }, false);
}

var push;

function unregisterPush() {
  //console.log("unregister push!");

  if (typeof PushNotification === "undefined") {
    return false;
  }

  push = PushNotification.init({
    "android": { "senderID": GCMSenderID, "sound": "true", "forceShow": "true", "icon": "icon" },
    "ios": {"alert": "true", "badge": "true", "sound": "true"},
    "windows": {}
  });

  push.unregister(function() {
    //console.log('unregistered push success');
    setupPush();
  }, function() {
    //console.log('unregistered push error');
  });
}

function setupPush() {
  //console.log("setup push!");

  if (typeof PushNotification === "undefined") {
    return false;
  }

  /* PUSH NOTIFICATIONS */
  var injector = angular.element(document.body).injector();
  push = PushNotification.init({
    "android": { "senderID": GCMSenderID, "sound": "true", "forceShow": "true", "icon": "icon" },
    "ios": {"alert": "true", "badge": "true", "sound": "true"},
    "windows": {}
  });

  push.on('registration', function(data) {
    //console.log("on registration", data.registrationId);
    // if (data.registrationId) {
    //   alert("on registration and token is:" + data.registrationId);
    // }else {
    //   alert("no id, data is: " + data);
    // }
    var platform = "";
    try {
      var devicePlatform = device.platform;
      var devicePlatform_ = devicePlatform.toLowerCase();
      if (devicePlatform_.indexOf("android") > -1) {
        platform = "GCM"; // ANDROID!
      } else if (devicePlatform_.indexOf("ios") > -1) {
        platform = "APN"; // APPLE
      } else {
        platform = "N/A";
      }
    } catch (e) {}
    injector.invoke(function (PushService) {
      var isAllowed;
      PushNotification.hasPermission(function(permit) {
        if (permit.isEnabled) {
          isAllowed = 1;
        }else {
          isAllowed = 0;
        }
        PushService.registerPushID(data.registrationId, platform, isAllowed)
      });
    });
  });

  push.on('notification', function(data) {
    injector.invoke(function (PushService) {
      PushService.onNotification(data);
    });
  });

  push.on('error', function(e) {
    injector.invoke(function (PushService) {
      PushService.errorHandler(error);
    });
  });
}


// ROUTING ===============================================
// set our routing for this application
// each route will pull in a different controller

trueBlue.config(function($routeProvider) {
  $routeProvider
  	.when('/loader/', {
  		templateUrl: 'Partials/loader.html',
      controller: 'loaderController'
  	})
  	.when('/', {
  		templateUrl: 'Partials/news.html',
      controller: 'newsController'
  	})
  	.when('/products/', {
  		templateUrl: 'Partials/products.html',
      controller: 'productsController'
  	})
  	.when('/products/:categoryId/', {
  		templateUrl: 'Partials/products.html',
      controller: 'productsController'
  	})
  	.when('/products/:categoryId/:productId/', {
  		templateUrl: 'Partials/productDetails.html',
      controller: 'productDetailsController'
  	})
  	.when('/top10/:rank/:regionId?/:categoryId?/', {
  		templateUrl: 'Partials/top10.html',
      controller: 'top10Controller'
  	})
  	.when('/top10/', {
  		redirectTo: '/top10/1/'
  	})
  	.when('/locations/', {
  		templateUrl: 'Partials/locations.html',
      controller: 'locationsController'
  	})
  	.when('/locations/:locationId/', {
  		templateUrl: 'Partials/locationDetails.html',
      controller: 'locationDetailsController'
  	})
  	.when('/rewards/', {
  		templateUrl: 'Partials/rewards.html',
      controller: 'rewardsController'
  	})
  	.when('/leaderboard/:regionId?/', {
  		templateUrl: 'Partials/leaderboard.html',
      controller: 'leaderboardController'
  	})
  	.when('/history/', {
  		templateUrl: 'Partials/history.html',
      controller: 'historyController'
  	})
  	.when('/favourites/', {
  		templateUrl: 'Partials/favourites.html',
      controller: 'favouritesController'
  	})
  	.when('/reviews/', {
  		templateUrl: 'Partials/reviews.html',
      controller: 'reviewsController'
  	})
  	.when('/settings/', {
  		templateUrl: 'Partials/settings.html',
      controller: 'settingsController'
  	})
  	.when('/page/:pageId/', {
  		templateUrl: 'Partials/page.html',
      controller: 'pageController'
  	})
  	.when('/gallery/:galleryId/', {
  		templateUrl: 'Partials/gallery.html',
      controller: 'galleryController'
  	})
  	.when('/gallery/:galleryId/:itemId/', {
  		templateUrl: 'Partials/galleryItem.html',
      controller: 'galleryItemController'
  	})
  	.when('/galleryGroup/:groupId/', {
  		templateUrl: 'Partials/galleryGroup.html',
      controller: 'galleryGroupController'
  	})
  	.when('/galleryGroup/:groupId/:galleryId/', {
  		templateUrl: 'Partials/gallery.html',
      controller: 'galleryController'
  	})
  	.when('/galleryGroup/:groupId/:galleryId/:itemId/', {
  		templateUrl: 'Partials/galleryItem.html',
      controller: 'galleryItemController'
  	})
  	.when('/orders/', {
  		templateUrl: 'Partials/orders.html',
      controller: 'ordersController'
  	})
  	.when('/orders/:orderId/:backId?/', {
  		templateUrl: 'Partials/orderDetails.html',
      controller: 'orderDetailsController'
  	})
  	.when('/tickets/', {
  		templateUrl: 'Partials/tickets.html',
      controller: 'ticketsController'
  	})
  	.when('/plans/', {
  		templateUrl: 'Partials/membership_plans.html',
      controller: 'membershipPlansController'
  	})
  	.when('/custom/:name/', {
      controller: 'DynamicRoutes',
      templateUrl: function (params) {
        return 'Partials/'+((params.name).toLowerCase().replace(/ /g,''))+'.html'
      }
    })
    .otherwise({
      redirectTo: '/'
    });
});


trueBlue.service('AnalyticsService', ['$http', '$q', '$timeout', '$localStorage', '$rootScope', function($http, $q, $timeout, $localStorage, $rootScope) {
  var $this = this;

  this.loadingSession = false;
  this.session_id = null;

  // app version with the plugin
  this.getAppVersion = function() {
    var deferred = $q.defer();
    try {
      $rootScope.appVersion = AppVersion.version;
      deferred.resolve($rootScope.appVersion);
    } catch (e) {
      deferred.resolve(null);
    }
    return deferred.promise;
  };

  // get UDID with the plugin
  this.getUDID = function() {
    var deferred = $q.defer();
    if (typeof window.plugins !== "undefined") {
      window.plugins.uniqueDeviceID.get(function(udid) {
        $rootScope.udid = udid;
        deferred.resolve($rootScope.udid);
      }, function(error) {
        //console.log(error);
        $rootScope.udid = "ERROR: "+error;
        deferred.resolve($rootScope.udid);
      });
    } else {
      deferred.resolve(null);
    }
    return deferred.promise;
  }

  // sessions
  this.startSession = function() {
    var deferred = $q.defer();

    if ($this.session_id || $this.loadingSession) {
      //console.log("startSession, hit", $this.session_id, $this.loadingSession);
      $timeout(function() {
        deferred.resolve($this.session_id);
      }, 500);
    } else {
      $this.loadingSession = true;
      $timeout(function() {
        var dataString = [];
        dataString.push({ name: "client_id", value: $rootScope.clientId });

        if ($localStorage.deviceId !== null) {
          //console.log("$localStorage.deviceId !== null...");
          dataString.push({ name: "device_id", value: ((server == "live") ? "" : "dev-" ) + $localStorage.deviceId });
        }

        $this.getAppVersion().then(function() {
          $this.getUDID().then(function() {
            try {
              if (device) {
                dataString.push({ name: "device_model", value: device.model });
                dataString.push({ name: "device_platform", value: device.platform });
                dataString.push({ name: "device_version", value: device.version });
                dataString.push({ name: "app_version", value: $rootScope.appVersion });
                dataString.push({ name: "udid", value: $rootScope.udid });
              } else {
                //console.log("device not found");
              }
            } catch(e) {
              //console.log("device not found");
            }

            var url = $rootScope.APIpath + "/session/start";
            $http.post(
              url,
              $.param(dataString),
              {
                headers: {
                  "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
                  "Authorization" : $rootScope.apiKey,
                  "Tbapikey" : $rootScope.apiKey
                }
              }
            ).then(function(response, status) {
              //console.log("sessionStart", data, status);
              $this.session_id = response.data.session_id;
              $this.loadingSession = false;

              //console.log("$localStorage.deviceId", $localStorage.deviceId);
              //console.log("session started... setup push!");

              var count = window.localStorage.getItem('hasRun');

              if (count) {
                count++;
                window.localStorage.setItem('hasRun',count);
                //console.log("app launch count:",count);
                setupPush();
              } else {
                // set variable in localstore
                window.localStorage.setItem('hasRun',1);
                //console.log("first time app launch");
                unregisterPush();
              }

              $localStorage.deviceId = response.data.device_id;

              // idle timer plugin
              // hit when gone idle (might be last interaction)
              // hit when they are back - after 15 seconds
              $(document).idle({
                onIdle: function() {
                  $this.refreshSession()
                },
                onActive: function() {
                  $this.refreshSession()
                },
                idle: 15000
              });

              deferred.resolve(response.data);
            }, function(response, status) {
              //console.log("sessionStart ERROR", data, status);
              deferred.reject(response);
            });
          });
        });
      }, 500);
    }

    return deferred.promise;
  };

  this.refreshSession = function() {
    if (!$this.session_id) {
      //console.log("no session_id found");
      $this.startSession();
    } else {
      var dataString = [];
      dataString.push({ name: "client_id", value: $rootScope.clientId });
      dataString.push({ name: "session_id", value: $this.session_id });

      var url = $rootScope.APIpath + "/session/refresh";
      $http.put(
        url,
        $.param(dataString),
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
        //console.log("sessionRefresh", response, status);
      }, function(response, status) {
        //console.log("sessionRefresh ERROR", response, status);
      });
    }
  };

  this.updateSession = function(array) {
    if (!$this.session_id) {
      $this.startSession().then(function() {
        $this.updateSession(array);
      });
    } else {
      var deferred = $q.defer();

      var dataString = [];
      dataString.push({ name: "client_id", value: $rootScope.clientId });
      dataString.push({ name: "session_id", value: $this.session_id });

      for (var a in array) {
        if (array.hasOwnProperty(a)) {
          dataString.push({ name: a, value: array[a] });
        }
      }

      var url = $rootScope.APIpath + "/session/update";
      $http.put(
        url,
        $.param(dataString),
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
        //console.log("sessionUpdate", data, status);
        deferred.resolve(response.data);
      }, function(response, status) {
        //console.log("sessionUpdate ERROR", data, status);
        deferred.reject(response);
      });

      return deferred.promise;
    }
  };

  // events
  this.previous = null;
  this.registerEvent = function(type, key, value) {
    // scan, (success, failed, cancelled), (token, token, null)
    // claim, (success, failed, cancelled), (claim code, token, null)
    // link, (internal, external), url
    if (!$this.session_id) {
      $this.startSession().then(function() {
        $this.registerEvent(type, key, value);
      });
    } else {
      var deferred = $q.defer();

      if (key == "internal" && $this.previous == value) {
        // it's the same as the previous! end it :@
        deferred.resolve(true);
      } else {
        var dataString = [];
        dataString.push({ name: "client_id", value: $rootScope.clientId });
        dataString.push({ name: "session_id", value: $this.session_id });
        dataString.push({ name: "event_type", value: type });
        dataString.push({ name: "event_key", value: key });
        dataString.push({ name: "event_value", value: value });
        $this.previous = value;

        var url = $rootScope.APIpath + "/registerEvent";
        $http.post(
          url,
          $.param(dataString),
          {
            headers: {
              "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
              "Authorization" : $rootScope.apiKey,
              "Tbapikey" : $rootScope.apiKey
            }
          }
        ).then(function(response, status) {
          //console.log("registerEvent", data, status);
          deferred.resolve(response.data);
        }, function(response, status) {
          //console.log("registerEvent ERROR", data, status);
          deferred.reject(response);
        });
      }

      return deferred.promise;
    }
  }
}]);


trueBlue.service('PushService', ['$http', '$q', '$timeout', '$location', '$localStorage', '$rootScope', 'AnalyticsService', function($http, $q, $timeout, $location, $localStorage, $rootScope, AnalyticsService) {
  var $this = this;

  // handle GCM notifications
  this.onNotification = function(e) {
    // if this flag is set, this notification happened while we were in the foreground.
    // you might want to play a sound to get the user's attention, throw up a dialog, etc.
    if (e.additionalData.foreground) {
      AnalyticsService.registerEvent("notification", "running", e.message);
    } else {
      // otherwise we were launched because the user touched a notification in the notification tray.
      AnalyticsService.registerEvent("notification", "launch", e.message);
    }

    //try { window.plugins.toast.showLongCenter(e.message, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}

    // updates news page.
    $rootScope.notification = e;

    if ($rootScope.done) {
      //console.log("getUserDetails from onNotification");
      UserService.getUserDetails("notification");
      UserService.getHistory("notification");
      navigator.notification.alert(
        e.message,
        $this.alertDismissed,
        e.title,
        $rootScope.text.close
      );
    }
  }

  this.showNotification = function() {
    var e = $rootScope.notification;
    navigator.notification.alert(
      e.message,
      $this.alertDismissed,
      e.title,
      $rootScope.text.close
    );
  }

  this.alertDismissed = function() {
    // do something
    $rootScope.notification = null;
  }

  // save push_id to the DB
  this.registerPushID = function(token, service, permission) {
    //console.log("regsiter push id!");

    AnalyticsService.getUDID().then(function() {
      var dataString = [];
      dataString.push({ name: "client_id", value: $rootScope.clientId });
      dataString.push({ name: "token", value: token });
      dataString.push({ name: "service", value: service });
      if (device) {
        dataString.push({ name: "device", value: $rootScope.udid });
      }
      dataString.push({ name: "permission", value: permission });
      if (!$rootScope.userDetails) {
        //console.log("register_push");
        var url = $rootScope.APIpath + "/register_push";
      } else {
        //console.log("update_push");
        url = $rootScope.APIpath + "/update_push";
      }

      $http.post(
        url,
        $.param(dataString),
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
        //console.log("PUSH REGISTERED", response, status, token);
        if (response && response.data) {
          if (response.data.tokenDeleted) {
            //console.log("it failed in the past. get a new one. will automatically lead to setting up a new one ;)");
            unregisterPush();
          } else {
            $rootScope.tokenStatus = response.data.tokenStatus;
      			$rootScope.token = token;
            //window.localStorage.setItem('TBtoken', token);
            $localStorage.TBtoken = token;
          }
        } else {
          //console.log("...it didn't work?");
        }
      }, function (err) {
        //console.log("error", err);
      });
    });
  }

  this.changeStatus = function(token, status) {
    var deferred = $q.defer();

    var dataString = [];
    dataString.push({ name: "client_id", value: $rootScope.clientId });
    dataString.push({ name: "token", value: token });
    dataString.push({ name: "tokenStatus", value: status });

    var url = $rootScope.APIpath + "/update_push_status";

    $http.post(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			console.log("changeStatus", response);
			$rootScope.tokenStatus = response.data.tokenStatus;
      deferred.resolve(status);
    }, function(response, status) {
		  //console.log("error: ",data.error);
      deferred.reject(response);
    });

    return deferred.promise;
  };

  this.errorHandler = function(error) {
    //console.log("PUSH ERROR", error);
  }
}]);


trueBlue.service('AppService', ['$q', '$timeout', '$rootScope', 'AnalyticsService', function($q, $timeout, $rootScope, AnalyticsService) {
  var $this = this;

  // deviceready
  this.onDeviceReady = function() {
    //alert(showProps(device, "device"));
    $rootScope.deviceisready = true;

    // FOR GOOGLE MAPS, IOS
    if (typeof device !== "undefined") {
      if(device.platform === 'iOS') {
        $('html').addClass('ios');
      } else if(device.platform === 'Android') {
        $('html').addClass('android');
      }
    }

    AnalyticsService.startSession();
  }

  this.removeSplash = function() {
    if ($rootScope.deviceisready) {
      //console.log("device is ready! remove!");
      if (navigator.splashscreen) {
        navigator.splashscreen.hide();
      }
    } else {
      //console.log("device is not yet ready! watch!");
      $rootScope.$watch(function() {
        return $rootScope.deviceisready;
      }, function() {
        if ($rootScope.deviceisready) {
          //console.log("device is ready now! remove!");
          if (navigator.splashscreen) {
            navigator.splashscreen.hide();
          }
        }
      });
    }
  }

  // offline.
  this.isOffline = function() {
    //alert("YOU WENT OFFLINE! NOOOOO");
    $rootScope.offline = true;
    $this.removeSplash();
  }

  // online.
  this.isOnline = function() {
    //alert("you're online :)");
    $rootScope.offline = false;
    $rootScope.initData();
    $route.reload();
  }

  // deal with location permissions
  this.requestLocation = function() {
    //console.log("requestLocation function...");

    var deferred = $q.defer();

    if ($rootScope.clientInfo && $rootScope.clientInfo.gps_flag == 0) {
      //console.log("NO!");
      $rootScope.GPS = "not found";
      deferred.resolve($rootScope.GPS);
      return deferred.promise;
    }

    // ASK FOR PERMISSION!
    try {
      cordova.plugins.diagnostic.requestLocationAuthorization(function(status) {
        //console.log("Authorization status is now: "+status, "$rootScope.GPS", $rootScope.GPS);
        AnalyticsService.registerEvent("location", "gps auth?", status);
        if (status && status.toUpperCase() === "DENIED") {
          // ANDROID - they won't give access so...
          $rootScope.GPS = "not found";
          // and continue...
          deferred.resolve($rootScope.GPS);
        } else if (status && status.toUpperCase() == "GRANTED") {
          // granted, probably.
          deferred.resolve(status);
        } else {
          // IOS - check if they did!
          // if first run, do nothing. let the status change handler take care of it...
          cordova.plugins.diagnostic.getLocationAuthorizationStatus(function(status){
            AnalyticsService.registerEvent("location", "gps status", status);
            if (status != "not_determined") {
              deferred.resolve($rootScope.GPS);
            }
          }, function(error) {
            //console.log("getLocationAuthorizationStatus error:", error);
          });
        }
      }, function(error) {
        AnalyticsService.registerEvent("location", "gps error", error);
        // just an error, not denied... so try again in getLocation
        console.error(error);
        deferred.resolve(error);
      });

      cordova.plugins.diagnostic.registerLocationAuthorizationStatusChangeHandler(function(status){
        //console.log("Location authorization status changed from \"not_determined\" to: "+status);
        if (status != "not_determined") {
          cordova.plugins.diagnostic.isLocationAuthorized(function(enabled) {
            AnalyticsService.registerEvent("location", "gps auth?", enabled);
            //console.log("Location authorization is " + (enabled ? "enabled" : "disabled"));
            if (enabled) {
              // continue.
              deferred.resolve(enabled);
            } else {
              $rootScope.GPS = "not found";
              //and continue...
              deferred.resolve($rootScope.GPS);
            }
          }, function(error) {
            AnalyticsService.registerEvent("location", "gps error", error);
            // just an error, not denied... so try again in getLocation
            //console.log(error);
            deferred.resolve(error);
          });
        }
      });
    } catch (error) {
      deferred.resolve(true);
    }

    return deferred.promise;
  }

  // geolocation.
  this.getLocation = function() {
    var deferred = $q.defer();
    //alert("getLocation");
    //console.log("getLocation...");

    if ($rootScope.GPS == "not found" || $rootScope.clientInfo && $rootScope.clientInfo.gps_flag == 0) {
      //console.log("NO!", $rootScope.GPS);
      $rootScope.GPS = "not found";
      deferred.resolve($rootScope.GPS);
      return deferred.promise;
    }

    try {
      if (navigator && navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          function(position) {
            $timeout(function() {
              $rootScope.GPS = position.coords;
              AnalyticsService.updateSession({ "lat" : position.coords.latitude, "lng" : position.coords.longitude });
              deferred.resolve(position);
            });

            $q.defer(function(){$rootScope.$apply();});
          },
          function(error) {
            $rootScope.GPS = "not found";
            deferred.resolve(error);
          },
          { maximumAge: 60000, timeout: 5000, enableHighAccuracy: false }
        )
      } else {
        $rootScope.GPS = "not found";
        deferred.resolve(error);
      }
    } catch (error) {
      $rootScope.GPS = "not found";
      deferred.resolve(error);
    }
    return deferred.promise;
  }
}]);


trueBlue.service('DataService', ['$http', '$q', '$timeout', '$rootScope', '$filter', '$location', '$localStorage', '$localForage', '$sce', 'AnalyticsService', 'AppService', function($http, $q, $timeout, $rootScope, $filter, $location, $localStorage, $localForage, $sce, AnalyticsService, AppService) {
  var $this = this;

  this.list = { "pages" : false, "gallery" : false, "top10" : false };

  // figure out what data needs to be updated
  this.getUpdateList = function() {
    var client_url = $rootScope.APIpath + "/client/" + $rootScope.clientId;
    var update_url = $rootScope.APIpath + "/updates/" + $rootScope.clientId;
    AnalyticsService.registerEvent("load", "start", new Date()*1);
    $rootScope.loading_text = "Checking data";
    $http.get(
      update_url
    ).then(function(response, status) {
      if ($rootScope.offline) {
        $rootScope.offline = false;
      }
      //console.log("getUpdateList DATA", response.data);
			if (!response.data.error) {
  			//console.log("no errors, get item!");

  			if (response.data.updates && !response.data.updates.length) {
    			//console.log("clear item, always download all");
    			$localForage.removeItem(update_url);
  			}

  			$localForage.getItem(update_url).then(function(getData) {
    			//console.log("get?", getData);
    			// set the new update times
    			// the below loop will still grab the getData for comparison
    			$localForage.setItem(getData.key, response.data);

    			var checkThese = [];
    			var downloadThese = [];
          var clientUpdating = false;

    			checkThese.push("client");
    			checkThese = checkThese.concat($rootScope.preload);

    			if(getData.data) {
            for ($p in checkThese) {
              //console.log("getUpdateList", checkThese[$p], getData.data.updates[0][checkThese[$p]], data.updates[0][checkThese[$p]], (getData.data.updates[0][checkThese[$p]] == data.updates[0][checkThese[$p]]));
              if (checkThese[$p] == "pages") { $this.list.pages = true; }
              if (checkThese[$p] == "gallery") { $this.list.gallery = true; }
              if (checkThese[$p] == "top10") { $this.list.top10 = true; }

              //console.log("getData.data.updates", getData.data, getData.data.updates, getData.data.updates[0]);
              if ($rootScope.server === 'dev' || getData.data.updates == undefined || getData.data.updates[0] == undefined || getData.data.updates[0][checkThese[$p]] == false || getData.data.updates[0][checkThese[$p]] == undefined || response.data.updates[0][checkThese[$p]] == null || response.data.updates[0][checkThese[$p]] == false || response.data.updates[0][checkThese[$p]] == undefined || getData.data.updates[0][checkThese[$p]] != response.data.updates[0][checkThese[$p]]) {
                // DOWNLOAD THE UPDATE!
                if (checkThese[$p] == "client") {
                  //console.log("Update the client file!");
                  clientUpdating = true;
                } else if ($rootScope.server === 'dev') {
                  //console.log("DEV! Always download! ",checkThese[$p]);
                  downloadThese.push(checkThese[$p]);
                } else {
                  //console.log("Add to Download list: ",checkThese[$p]);
                  downloadThese.push(checkThese[$p]);
                }
              }
            }
    			} else {
            for ($p in checkThese) {
              //console.log("no getData", checkThese[$p]);
              if (checkThese[$p] == "pages") { $this.list.pages = true; }
              if (checkThese[$p] == "gallery") { $this.list.gallery = true; }
              if (checkThese[$p] == "top10") { $this.list.top10 = true; }
            }

            //console.log("We don't have any data, download everything!");
            clientUpdating = true;
            downloadThese = $rootScope.preload;
    			}

          //console.log("$this.list", $this.list);

    			$this.loadData(clientUpdating, downloadThese);
  			});
			} else {
  			$localForage.getItem(update_url).then(function(getData) {
    			if(getData.data) {
      			//console.log("We've previously downloaded the data. Let's load from cache.");
      			$this.loadCache();
    			} else {
            //console.log("there was an error with connecting, so.. let the user know that there was an issue? and retry this function.");
            AppService.isOffline();
            $timeout(function() {
              $this.getUpdateList();
            }, 500);
    			}
  			});
  			//$this.loadCached();
			}
    }, function(response, status) {
			$localForage.getItem(update_url).then(function(getData) {
  			if(getData.data) {
    			//console.log("We've previously downloaded the data. Let's load from cache.");
      		$this.loadCache();
  			} else {
          //console.log("there was an error with connecting, so.. let the user know that there was an issue? and retry this function.");
          AppService.isOffline();
          $timeout(function() {
            $this.getUpdateList();
          }, 500);
  			}
			});
  		//$this.loadCached();
    });
  }

  // load data from localStorage
  this.loadCache = function() {
    AnalyticsService.registerEvent("load", "cache", new Date()*1);
    //console.log("Let's load from the cache.");
    $this.loadData(false, []);
  }

  // start with the client info
  this.loadData = function(loadClient, downloadList) {
    //console.log("loadData: loadClient?", loadClient, ", downloadList:", downloadList)
    var client_url = $rootScope.APIpath + "/client/"+$rootScope.clientId;

    if (loadClient) {
      AnalyticsService.registerEvent("load", "download", new Date()*1);
      $rootScope.loading_text = "Loading client";
      // this.client, downloads the data.
      $this.client().then(function(response) {
        $this.resolveClient().then(function(response) {
          $this.continueLoading(downloadList);
        });
      });
    } else {
      $localForage.getItem(client_url).then(function(getData) {
        if(getData.data) {
          AnalyticsService.registerEvent("load", "foraged", new Date()*1);
          $this.clientData = getData.data;
          //console.log("loadData", $this.clientData, getData);
          $this.resolveClient().then(function(response) {
            $this.continueLoading(downloadList);
          });
        } else {
          //console.log("WTF, this should be here! Download ME!");
          $this.loadData(true, downloadList);
        }
      });
    }
  }

  // continue with the other data points
  this.continueLoading = function(downloadList) {
    // preload - APIs to load.
    var loadCount = downloadList.length;
    //console.log("Continue Loading...", loadCount);

    var pages = false;
    var gallery = false;
    var top10 = false;

    $rootScope.$watch(function() {
      return loadCount;
    }, function() {
      //console.log("data loaded: ", loadCount);
      if (loadCount == 0 && !$rootScope.done) {
        //console.log("DONE!");

        //console.log("pages?", $this.list.pages, "galleries?", $this.list.gallery, "top10?", $this.list.top10);
        if ($this.list.pages) { // if there are pages in this app, load them into the menu
          $this.pages().then(function() {
            $timeout(function() {
              $rootScope.$apply();
              //console.log("PAGES!?", $rootScope.pages, $this.pageData);
            });
          });
        }
        if ($this.list.gallery) { // if there are galleries in this app, load them into the menu
          $this.galleries();
        }
        if ($this.list.top10) { // if there is top10, the loading has actually been deferred and will happen now instead.
          $this.top10();
        }

        AnalyticsService.registerEvent("load", "finish", new Date()*1);

        //console.log("regions?", $rootScope.regions, $localStorage.TBregion, $this.checkRegions($localStorage.TBregion));
        if ($rootScope.regions && $rootScope.regions.length && (!$localStorage.TBregion || $localStorage.TBregion && !$this.checkRegions($localStorage.TBregion))) {
          $rootScope.loading_text = "Capturing GPS";
          //console.log("requestLocation 1");
          // clear selectedRegion, because it would only get here if the selectedRegion was not included in the selection
          $localStorage.TBregion = null;

          AppService.requestLocation().then(function() {
            AppService.getLocation().then(function() {
              AnalyticsService.registerEvent("gps", "finish", new Date()*1);
              $rootScope.done = true;
            });
          });
        } else {
          // skip GPS Capture at start!
          $rootScope.done = true;
        }
      }
    });

    for ($p in downloadList) {
      //console.log("downloadList[$p]", downloadList[$p]);
      if (downloadList[$p] == "top10") { // skip download of top10
        top10 = true;
        loadCount--;
      } else if ($this.clientData && $this.clientData.regions && $this.clientData.regions.length && (downloadList[$p] == "news" || downloadList[$p] == "locations")) {
        url = $rootScope.APIpath + '/' + downloadList[$p] + '/' + $rootScope.clientId;
        // get the non-region version first...
        $this.loadAndSet(url, downloadList[$p]).then(function(setData) {
          loadCount--;
        });
        for ($r in $this.clientData.regions) {
          loadCount++;
          url = $rootScope.APIpath + '/' + downloadList[$p] + '/' + $rootScope.clientId + '/' + $this.clientData.regions[$r].id;
          // we assume, that because it's in the downloadList, we need to download it.
          $this.loadAndSet(url, downloadList[$p]).then(function(setData) {
            loadCount--;
          });
        }
      } else if (downloadList[$p] == "inactive") {
        var url = $rootScope.APIpath + '/products/' + $rootScope.clientId + '/' + downloadList[$p];
        $this.loadAndSet(url, downloadList[$p]).then(function(setData) {
          loadCount--;
        });
      } else {
        var url = $rootScope.APIpath + '/' + downloadList[$p] + '/' + $rootScope.clientId;
        $this.loadAndSet(url, downloadList[$p]).then(function(setData) {
          loadCount--;
        });
      }
    }
  }

  // save them into the localStorage
  this.loadAndSet = function(url, section) {
    //console.log("loadAndSet", url);
    var deferrred = $q.defer();

    $http.get(
      url
    ).then(function(response, status) {
      if (section) {
        $rootScope.loading_text = "Loading "+section;
      }
      $localForage.setItem(url, response.data).then(function(setData) {
        //console.log("LoadAndSet:", url, response.data);
        deferrred.resolve({"key":url,"data":response.data});
      });
    }, function(response, status) {
      deferrred.reject(response);
    });

    return deferrred.promise;
  };

  // clientInfo variable
  this.clientData = null;
  this.clientInfo = null;
  this.currentRegion = null;

  // client information
  this.client = function($reason) {
    var deferrred = $q.defer();
    var url = $rootScope.APIpath + "/client/"+$rootScope.clientId;

    if ($this.clientData && !$reason) {
      //console.log("data exists", $this.clientData);
      deferrred.resolve($this.clientData);
    } else {
      $http.get(
        url
      ).then(function(response, status) {
  			//console.log("loaded client", response.data);
  			$this.clientData = response.data;
        $localForage.setItem(url, response.data).then(function(setData) {
    			deferrred.resolve($this.clientData);
        });
      }, function(response, status) {
  		  //console.log("error: ",data.error);
        deferrred.reject(response);
      });
    }

    return deferrred.promise;
  }

  // after getting the client info, do what it is needed
  this.resolveClient = function() {
    var deferrred = $q.defer();

		var data = $this.clientData;
    $this.clientInfo = data.client[0];
    $rootScope.clientInfo = $this.clientInfo;
    //console.log("resolving the client...", $rootScope.clientInfo);

    if (data.languages.length) {
      $rootScope.languages = data.languages;
    }
    if ($rootScope.selectedLanguage) {
      //console.log($('nav#menu select[name="language"] option[value="'+$rootScope.selectedLanguage+'"]'));
      $('nav#menu select[name="language"] option[value="'+$rootScope.selectedLanguage+'"]').prop('selected', true);
    }

    if (data.regions.length) {
      $rootScope.regions = data.regions;
    }
    if ($rootScope.selectedRegion) {
      //console.log($('nav#menu select[name="region"] option[value="'+$rootScope.selectedRegion+'"]'));
      $('nav#menu select[name="region"] option[value="'+$rootScope.selectedRegion+'"]').prop('selected', true);
    }

    if (data.shortcuts.length) {
      $rootScope.shortcuts = data.shortcuts;
//       //console.log("SHORTCUTS", $rootScope.shortcuts);
    }

    //console.log("$this.locationData", $this.locationData);
    if ($this.locationData) {
      $this.locations().then(function(data) {
        //console.log("shopping cart locations", data);
        //console.log("$rootScope.clientInfo.order_flag", $rootScope.clientInfo.order_flag, "locationData", $this.locationData, "cart_loc", $rootScope.clientInfo.cart_locations);
        if ($rootScope.clientInfo.order_flag == 1 && $this.locationData && !$rootScope.clientInfo.cart_locations) {
          var cart_locations = [];
          for (var $cl in $this.locationData) {
            if ($this.locationData[$cl].cart_email && $this.locationData[$cl].cart_email != "") {
              cart_locations.push($this.locationData[$cl]);
            }
          }
          //console.log("cart locations", cart_locations, cart_locations.length);
  /*
          if (!cart_locations.length) {
            $rootScope.clientInfo.order_flag = 0;
            $rootScope.clientInfo.cart_locations = null;
          } else {
  */
            $rootScope.clientInfo.order_flag = 1;
            $rootScope.clientInfo.cart_locations = cart_locations;
  //        }
          //console.log("$rootScope.clientInfo.order_flag", $rootScope.clientInfo.order_flag);
        } else {
          //console.log("locationData?", $this.locationData, $rootScope.clientInfo.cart_locations);
        }
        deferrred.resolve($this.clientInfo);
      }, function(e) {
        //console.log("error", e);
      });
    } else {
      deferrred.resolve($this.clientInfo);
    }

    return deferrred.promise;
  }

  function toRad(value) {
	  var RADIANT_CONSTANT = 0.0174532925199433;
	  return (value * RADIANT_CONSTANT);
	}

	function calculateDistance(starting, ending) {
	  var KM_RATIO = 6371;
	  try {
	    var dLat = toRad(ending.latitude - starting.latitude);
	    var dLon = toRad(ending.longitude - starting.longitude);
	    var lat1Rad = toRad(starting.latitude);
	    var lat2Rad = toRad(ending.latitude);

	    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
	            Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1Rad) * Math.cos(lat2Rad);
	    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
	    var d = KM_RATIO * c;
	    return d;
	  } catch(e) {
	    return -1;
	  }
	}

  this.getRegionDistances = function() {
    var deferrred = $q.defer();

    if (!$rootScope.regions) {
      //console.log("GPS already loaded", $rootScope.GPS);
      deferrred.resolve(null);
    } else if ($rootScope.GPS == "not found") {
      //console.log("GPS already loaded", $rootScope.GPS);
      deferrred.resolve($rootScope.GPS);
    } else {
      //console.log("GET GPS", $rootScope.GPS);
      var origin = $rootScope.GPS;
      //var origin = { 'latitude' : '45.5601257', 'longitude' : '-73.7120503' };// MONTREAL
      //var origin = new google.maps.LatLng($rootScope.GPS.latitude,$rootScope.GPS.longitude);
      if ($rootScope.regions && $rootScope.regions.length) {
        for ($region in $rootScope.regions) {
          if ($rootScope.regions[$region].epicenter_lat && $rootScope.regions[$region].epicenter_lng) {
            var destination = { 'latitude' : $rootScope.regions[$region].epicenter_lat, 'longitude' : $rootScope.regions[$region].epicenter_lng };
            //var destination = new google.maps.LatLng($rootScope.regions[$region].epicenter_lat, $rootScope.regions[$region].epicenter_lng);
            var distance = calculateDistance(origin, destination);
            //var distance = google.maps.geometry.spherical.computeDistanceBetween(origin, destination);
            //console.log(distance);
            $rootScope.regions[$region].distance = distance;
          } else {
            $rootScope.regions[$region].distance = 999999999;
          }
        }
      }

      deferrred.resolve($rootScope.regions);
    }

    return deferrred.promise;
  };

  this.getClosestRegion = function() {
    var deferrred = $q.defer();

    if (!$rootScope.regions) {
      // no regions
      $rootScope.selectedRegion = null;
      deferrred.resolve(null);
    } else {
      if ($localStorage.TBregion) {
        // //console.log("region was found");
        $rootScope.changeRegion($localStorage.TBregion);
      } else {
        if ($rootScope.GPS == "not found") {
          // no GPS, so just use the first one
          // //console.log("no gps, region set to 0");
          $rootScope.changeRegion($rootScope.regions[0].id);
        } else {
          var $thisRegion = null;
          for ($region in $rootScope.regions) {
            if (!$thisRegion || $rootScope.regions[$region].distance < $thisRegion.distance && $rootScope.regions[$region].distance <= 500) {
              // if the user is further than 1000km, default to the first region.
              $thisRegion = $rootScope.regions[$region];
            }
          }
          if (!$thisRegion) {
            // //console.log("no thisRegion, region set to 0");
            $thisRegion = $rootScope.regions[0];
          }
          //console.log("set region", $thisRegion.id, $rootScope.GPS);
          $localStorage.TBregion = $thisRegion.id;
          $rootScope.changeRegion($thisRegion.id);
        }
        if ($thisRegion && $thisRegion.language_code) {
          $rootScope.selectedLanguage = $thisRegion.language_code;
        } else {
          $rootScope.selectedLanguage = "ENG";
        }
      }
      deferrred.resolve($rootScope.selectedRegion);
    }

    return deferrred.promise;
  }

  this.getRegionDetails = function($region_id) {
    if ($rootScope.regions) {
      for ($r in $rootScope.regions) {
        if ($rootScope.regions[$r].id == $region_id) {
          return $rootScope.regions[$r];
          break;
        }
      }
    } else {
      return null;
    }
  }

  this.checkRegions = function($region_id) {
    for (var $r in $rootScope.regions) {
      if ($rootScope.regions[$r].id == $region_id) {
        return true;
      }
    }
    return false;
  }


  // instagram stuff
  this.instagramUserData = null;
  this.instagramTag = null
  this.instagramTagData = null;

  this.getInstagramFeed = function(user_id, client_id) {
    var deferrred = $q.defer();

    if ($this.instagramUserData) {
      deferrred.resolve($this.instagramUserData);
    } else {
      //console.log("getInstagramFeed", client_id);
      var endpoint = "https://api.instagram.com/v1/users/self/media/recent/";
      endpoint += "?access_token=" + client_id;
      // endpoint += "&callback=JSON_CALLBACK";
      // //console.log(endpoint);

      $.ajax({
          url: endpoint,
          type: "GET",
          crossDomain: true,
          dataType: "jsonp",
          success: function(response){
            var data = [];
            for($i in response.data) {
              var node = response.data[$i];
              var id = node.link;
              data.push({
                "id":"I"+id.match("p/(.*)/")[1],
                "body":(node.caption) ? node.caption.text : null,
                "show_date":parseInt(node.created_time),
                "visible_header":0,
                "visible_date":1,
                "sticky_flag":0,
                "type":"instagram",
                "link":node.link,
                "link_text":"Instagram",
                "image":node.images.standard_resolution.url,
                "video":(node.videos) ? node.videos.standard_resolution.url : null
              });
            }
            $this.instagramUserData = data;
            deferrred.resolve($this.instagramUserData);
          },
          error: function(response, exception) {
      		  //console.log("error: ",response, exception);
            deferrred.reject(response);
          }
      });
    }

    return deferrred.promise;
  }

  this.getInstagramTagFeed = function(tag, client_id) {
    var deferrred = $q.defer();

    if ($this.instagramTag == tag && $this.instagramTagData) {
      deferrred.resolve($this.instagramTagData);
    } else {
      var endpoint = "https://api.instagram.com/v1/tags/" + tag + "/media/recent/";
      endpoint += "?count=99";
      endpoint += "&access_token=" + client_id;
      //endpoint += "&callback=JSON_CALLBACK";

      $.ajax({
          url: endpoint,
          type: "GET",
          crossDomain: true,
          dataType: "jsonp",
          success: function(response){
            var data = [];
            for($i in response.data) {
              var node = response.data[$i];
              var id = node.link;
              data.push({
                "id":"I"+id.match("p/(.*)/")[1],
                "body":(node.caption) ? node.caption.text : null,
                "show_date":parseInt(node.created_time),
                "visible_header":0,
                "visible_date":1,
                "sticky_flag":0,
                "type":"instagram",
                "link":node.link,
                "link_text":"Instagram",
                "image":node.images.standard_resolution.url,
                "video":(node.videos) ? node.videos.standard_resolution.url : null
              });
            }
            $this.instagramUserData = data;
            deferrred.resolve($this.instagramUserData);
          },
          error: function(response, exception) {
      		  //console.log("error: ",response, exception);
            deferrred.reject(response);
          }
      });
    }

    return deferrred.promise;
  }


  // newsData variable
  this.newsData = null;

  // get all news, promos, alerts...
  this.news = function() {
    var deferrred = $q.defer();

    if ($this.newsData && ($rootScope.selectedRegion && $this.currentRegion && $rootScope.selectedRegion == $this.currentRegion || !$this.currentRegion && !$rootScope.selectedRegion)) {
      //console.log("$this.newsData already loaded", $this.newsData, $rootScope.selectedRegion, $this.currentRegion);
      deferrred.resolve($this.newsData);
    } else {
      if ($rootScope.selectedRegion) {
        $this.currentRegion = $rootScope.selectedRegion;
      } else {
        $this.currentRegion = null;
      }

      $this.newsData = null;
      var url = $rootScope.APIpath + '/news/'+$rootScope.clientId+(($this.currentRegion) ? '/' + $this.currentRegion : '');
      $localForage.getItem(url).then(function(forData) {
        if (forData.data) {
    			//console.log("foraged news", url, forData.data);
          $this.newsData = forData.data;
          deferrred.resolve($this.newsData);
        } else {
          $this.loadAndSet(url).then(function(response) {
      			//console.log("loaded news", url, response.data);
            $this.newsData = response.data;
            deferrred.resolve($this.newsData);
          });
        }
      });
    }

    return deferrred.promise;
  }

  // add the notifications that have been sent to the public and user to the news feed
  this.getNotifications = function() {
    var deferrred = $q.defer();

    var dataString = [];
    dataString.push({ name: "token", value: $rootScope.token });

    var url = $rootScope.APIpath + '/notifications/'+$rootScope.clientId;
    $http.post(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8"
        }
      }
    ).then(function(response, status) {
			//console.log("notifications", data);
      deferrred.resolve(response.data.notifications);
    }, function(response, status) {
		  //console.log("error: ",data.error);
      deferrred.reject(response);
    });

    return deferrred.promise;
  }


  // productData variable.
  this.productData = null;
  this.inactiveProductData = null;

  // get all products
  this.products = function() {
    var deferrred = $q.defer();

    if ($this.productData) {
      //console.log("productData already loaded", $this.productData);
      deferrred.resolve($this.productData);
    } else {
      var url = $rootScope.APIpath + '/products/'+$rootScope.clientId;
      $localForage.getItem(url).then(function(forData) {
        if (forData.data) {
          //console.log("foraged products", forData.data);
          $this.productData = forData.data.products;
          $this.resolveProducts();
          deferrred.resolve($this.productData);
        } else {
          $this.loadAndSet(url).then(function(response) {
      			//console.log("loaded products", response.data);
            $this.productData = response.data.products;
            $this.resolveProducts();
            deferrred.resolve($this.productData);
          });
        }
      });
    }

    return deferrred.promise;
  }

  // get all inactive products
  this.inactiveProducts = function() {
    var deferrred = $q.defer();

    if ($this.inactiveProductData) {
      //console.log("inactive productData already loaded", $this.inactiveProductData);
      deferrred.resolve($this.inactiveProductData);
    } else {
      var url = $rootScope.APIpath + '/products/'+$rootScope.clientId+'/inactive';
      $localForage.getItem(url).then(function(forData) {
        if (forData.data) {
          //console.log("foraged products", forData.data);
          $this.inactiveProductData = forData.data.products;
          deferrred.resolve($this.inactiveProductData);
        } else {
          $this.loadAndSet(url).then(function(response) {
      			//console.log("loaded products", data);
            $this.inactiveProductData = response.data.products;
            $this.resolveProducts();
            deferrred.resolve($this.inactiveProductData);
          });
        }
      });
    }

    return deferrred.promise;
  }

  // after loading the product info, do stuff with it
  this.resolveProducts = function() { };

  // when a category is selected, filter the productData for them
  this.filterProducts = function($catId) {
    var $categoryArray = [];
    var $productArray = [];

    $categoryArray.push(parseInt($catId));

    var $checkForChild = [$catId];
    $catChild = $this.getChildCategoryId($checkForChild);
    while($catChild.length) {
      //console.log("found children!", $catChild);
      for($ca in $catChild) {
        $categoryArray.push(parseInt($catChild[$ca]));
      }
      $checkForChild = $catChild;
      $catChild = $this.getChildCategoryId($checkForChild);
    }

    //console.log("done", $categoryArray);

    for ($i in $this.productData) {
      //console.log($categoryArray, $this.productData[$i].category_id, $categoryArray.indexOf($this.productData[$i].category_id));
      if (!$categoryArray.length || $categoryArray.indexOf($this.productData[$i].category_id) >= 0) {
        if ($this.productData[$i].region_ids) {
          if ($filter('checkRegion')($this.productData[$i])) {
            var $region = true;
          } else {
            $region = false;
          }
        } else {
          $region = true;
        }
        if ($region) {
          $productArray.push($this.productData[$i]);
        }
      }
    }
    //console.log("filtered products", $productArray);
    return $productArray;
  }

  // deal with nested categories
  this.getParentCategoryId = function($catId) {
    //console.log("checking for parent...", $catId);
    var $thisCategory;
    for ($c in $this.categoryData) {
      if ($this.categoryData[$c].id == $catId) {
        if ($this.categoryData[$c].parent_id) {
          $thisCategory = $this.categoryData[$c].parent_id;
          return $thisCategory;
          break;
        } else {
          return null;
          break;
        }
      }
    }
  };

  this.getChildCategoryId = function($catArray) {
    //console.log("checking for children...", $catArray);
    var $thisCategoryArray = [];
    for ($cat in $catArray) {
      for ($c in $this.categoryData) {
        if ($this.categoryData[$c].parent_id == $catArray[$cat]) {
          $thisCategoryArray.push($this.categoryData[$c].id);
        }
      }
    }
    return $thisCategoryArray;
  };

  // when a product is selected, find it within the productData
  this.getProductFirst = function($productId) {
    var deferrred = $q.defer();
    var productData = null

    for ($i in $this.productData) {
      if ($this.productData[$i].id == $productId) {
        //console.log("productData", $this.productData[$i].id, $this.productData[$i]);
        productData = $this.productData[$i];
        deferrred.resolve(productData);
        break;
      }
    }
    if (!productData) {
      deferrred.reject(productData);
    }

    return deferrred.promise;
  }

  this.returnProductFirst = function($productId) {
    var productData = null;

    //console.log("returnProductFirst", $productId);

    for ($i in $this.productData) {
      //console.log("looking...", $this.productData[$i].id);
      if ($this.productData[$i].id == $productId) {
        //console.log("productData", $this.productData[$i].id, $this.productData[$i]);
        productData = $this.productData[$i];
        break;
      }
    }

    if (!productData) {
      for ($j in $this.inactiveProductData) {
        //console.log("looking...", $this.inactiveProductData[$j].id);
        if ($this.inactiveProductData[$j].id == $productId) {
          //console.log("productData", $this.inactiveProductData[$j].id, $this.inactiveProductData[$j]);
          productData = $this.inactiveProductData[$j];
          break;
        }
      }
    }

    if (productData) {
      return productData;
    } else {
      //console.log("productData not found!");
      $this.getProductDetails($productId).then(function(data) {
        return data;
      }, function(e) {
        console.log("returnProductFirst error", e);
      });
    }
  }

  // get product variations for shopping
  this.getProductVariations = function($productId) {
    var deferrred = $q.defer();
    var productData = {};

    var url = $rootScope.APIpath + '/products/'+$rootScope.clientId+'/'+$productId;
    $http.get(
      url
    ).then(function(response, status) {
			//console.log("getProductVariations", response);
			if (!response || !response.data || response.data.error) {
  			//console.log("ERROR!");
			} else {
        productData.variables = response.data.variables;
        productData.variations = response.data.variations;
      }
      deferrred.resolve(productData);
    }, function(response, status) {
		  //console.log("error: ",data.error);
      deferrred.reject(response);
    });

    return deferrred.promise;
  }

  // if product data doesnt have it, grab it from the server
  this.getProductDetails = function($productId) {
    var deferrred = $q.defer();
    var productData = null

    for ($i in $this.productData) {
      if ($this.productData[$i].id == $productId) {
        //console.log("productData", $this.productData[$i].id, $this.productData[$i]);
        productData = $this.productData[$i];
        if (!productData.variables || !productData.variations) {
          var url = $rootScope.APIpath + '/products/'+$rootScope.clientId+'/'+$productId;
          $http.get(
            url
          ).then(function(response, status) {
      			//console.log("getProductDetails", response.data);
            productData.variables = response.data.variables;
            productData.variations = response.data.variations;
            deferrred.resolve(productData);
          }, function(response, status) {
      		  //console.log("error: ",data.error);
            deferrred.reject(response);
          });
        } else {
          deferrred.resolve(productData);
          return deferrred.promise;
          break;
        }
      }
    }
    if (!productData) {
      console.log("product not found");
      deferrred.reject(productData);
    }

    return deferrred.promise;
  }

  // when a product is selected, find it within the productData
  this.getProductDetailsCart = function($array) {
    var deferrred = $q.defer();

    getPD(0);
    function getPD($count) {
      //console.log("getProductDetailsCart", $array[$count]);
      if ($array[$count].type && $array[$count].type == "reward") {
        $this.getRewardDetails($array[$count].reward_id).then(function(data) {
          //console.log("getRewardDetails getData", data);
          $array[$count].data = data || null;
          $count++;
          //console.log($count, $array.length);
          if ($count == $array.length) {
            deferrred.resolve($array);
          } else {
            getPD($count);
          }
        }, function(e) {
          console.log("getRewardDetails error", e);
          $array[$count].data = data || null;
          $count++;
          //console.log($count, $array.length);
          if ($count == $array.length) {
            deferrred.resolve($array);
          } else {
            getPD($count);
          }
        });
      } else {
        $this.getProductDetails($array[$count].id).then(function(data) {
          //console.log("getProductDetails getData", data);
          $array[$count].data = data || null;
          $count++;
          //console.log($count, $array.length);
          if ($count == $array.length) {
            deferrred.resolve($array);
          } else {
            getPD($count);
          }
        }, function(e) {
          console.log("getProductDetailsCart error", e);
          $array[$count].data = null;
          $count++;
          //console.log($count, $array.length);
          if ($count == $array.length) {
            deferrred.resolve($array);
          } else {
            getPD($count);
          }
        });
      }
    }

    return deferrred.promise;
  }

  // display product's ranking
  this.getProductRank = function($productId) {
    var deferrred = $q.defer();

    var url = $rootScope.APIpath + '/productRank/' + $productId;
    if ($rootScope.userDetails) {
      url += "/"+$rootScope.userDetails.id;
    }
    $http.get(
      url
    ).then(function(response, status) {
			if (!response.data.error) {
  			deferrred.resolve(response.data.rank[0]);
			}
    }, function(response, status) {
      //console.log("LOADANDSET ERROR!", url, data, status);
      deferrred.reject(response);
    });

    return deferrred.promise;
  }

  // categoryData variable
  this.categoryData = null;

  // get all categories
  this.categories = function() {
    var deferrred = $q.defer();
    if ($this.categoryData) {
      //console.log("categoryData already loaded", $this.categoryData);
      deferrred.resolve($this.categoryData);
    } else {
      var url = $rootScope.APIpath + '/categories/'+$rootScope.clientId;
      $localForage.getItem(url).then(function(forData) {
        if (forData.data) {
          //console.log("foraged categories", forData.data);
          $this.categoryData = forData.data.categories;
          deferrred.resolve($this.categoryData);
        } else {
          $this.loadAndSet(url).then(function(response) {
      			//console.log("loaded categories", data);
            $this.categoryData = response.data.categories;
            deferrred.resolve($this.categoryData);
          });
        }
      });
    }

    return deferrred.promise;
  }

  // get the category's name based on it's ID
  this.getCategoryName = function($catId) {
    for ($i in $this.categoryData) {
      if ($this.categoryData[$i].id == $catId) {
        return $this.categoryData[$i].category_name;
        break;
      }
    }
  }


  // productData variable.
  this.top10Data = null;
  this.top10DataRegion = null;
  this.top10DataCategory = null;

  // get all products
  this.top10 = function($regionId, $categoryId) {
    var deferrred = $q.defer();

    if ($this.top10Data && $regionId == $this.top10DataRegion && $categoryId == $this.top10DataCategory) {
      //console.log("productData already loaded", $this.productData);
      deferrred.resolve($this.top10Data);
    } else {
      if ($regionId) {
        $this.top10DataRegion = $regionId;
      } else if ($rootScope.selectedRegion) {
        $this.top10DataRegion = $rootScope.top10DataRegion;
      } else {
        $this.top10DataRegion = null;
      }
      if ($categoryId) {
        $this.top10DataCategory = $categoryId;
      } else {
        $this.top10DataCategory = null;
      }
      $this.top10Data = null;
      var url = $rootScope.APIpath + '/top10/'+$rootScope.clientId+(($this.top10DataRegion) ? '/' + $this.top10DataRegion : '');
      if ($this.top10DataCategory) {
        url += "/"+$this.top10DataCategory;
      }
      $http.get(
        url
      ).then(function(response, status) {
  			//console.log("top10", response.data);
        $this.top10Data = response.data.products;
        deferrred.resolve($this.top10Data);
      }, function(response, status) {
  		  //console.log("error: ",data.error);
        deferrred.reject(response);
      });
    }

    return deferrred.promise;
  }

  // when a product is selected, find it within the productData
  this.getTop10Details = function($rankId) {
    var deferrred = $q.defer();
    var top10Data = null
    for ($i in $this.top10Data) {
      if ($this.top10Data[$i].rank == $rankId) {
        top10Data = $this.top10Data[$i];
        deferrred.resolve(top10Data);
        return deferrred.promise;
        break;
      }
    }
    if (!top10Data) {
      deferrred.reject(top10Data);
    }

    return deferrred.promise;
  }


  // locationData variable
  this.locationData = null;
  this.locationRegion = null;

  // get locations
  this.locations = function($locationId) {
    var deferrred = $q.defer();

    if ($locationId && $this.getLocationDetailsReturn($locationId)) {
      //console.log("requesting specific, loaded", $locationId, $this.getLocationDetailsReturn($locationId));
      deferrred.resolve($this.locationData);
    //} else if (!$locationId && $this.locationData && $rootScope.selectedRegion == $this.locationRegion) {
      //console.log("locationData already loaded", $this.locationData);
      //deferrred.resolve($this.locationData);
    } else {
      if ($rootScope.selectedRegion) {
        $this.locationRegion = $rootScope.selectedRegion;
      } else {
        $this.locationRegion = null;
      }
      if ($locationId) {
        //console.log("requesting load of specific", $locationId);
        var url = $rootScope.APIpath + '/locations/'+$rootScope.clientId+ '/_/' + $locationId;
        // forcing this to null requires the locationData to reload upon next request, as the locationData may only contain 1 location now
        $this.locationRegion = null;
      } else {
        $this.locationData = null;
        url = $rootScope.APIpath + '/locations/'+$rootScope.clientId+(($this.locationRegion) ? '/' + $this.locationRegion : '');
      }
      $localForage.getItem(url).then(function(forData) {
        if (forData.data && !$locationId) {
          //console.log("foraged locations", url, forData.data);
          if (!$locationId || !$this.locationData) {
            $this.locationData = forData.data.locations;
            $this.resolveProducts();
            $this.resolveLocations();
          }
          deferrred.resolve($this.locationData);
        } else {
          $this.loadAndSet(url).then(function(response) {
      			//console.log("loaded locations", response);
            if (!$locationId || !$this.locationData) {
              $this.locationData = response.data.locations;
              $this.resolveProducts();
              $this.resolveLocations();
            }
            deferrred.resolve($this.locationData);
          });
        }
      });
    }

    return deferrred.promise;
  }

  this.resolveLocations = function() {
    if ($this.clientInfo.order_flag) {
      var data = $this.locationData;
      //console.log("shopping cart locations", data);
      var cart_locations = [];
      for (var $cl in $this.locationData) {
        if ($this.locationData[$cl].cart_email && $this.locationData[$cl].cart_email != "") {
          cart_locations.push($this.locationData[$cl]);
        }
      }
      //console.log("$rootScope.clientInfo.order_flag", $rootScope.clientInfo.order_flag);
      //console.log("cart locations", cart_locations, cart_locations.length);
      if (cart_locations.length) {
      //   $rootScope.clientInfo.order_flag = 0;
      // } else {
        $rootScope.clientInfo.cart_locations = cart_locations;
      }
    }
  }

  // get location data from the server if need be
  this.getLocation = function($locationId) {
    var deferrred = $q.defer();

    var url = $rootScope.APIpath + '/locations/'+$rootScope.clientId+ '/_/' + $locationId;
    $localForage.getItem(url).then(function(response) {
      if (response.data) {
        //console.log("foraged location", response.data);
        deferrred.resolve(response.data.locations[0]);
      } else {
        $this.loadAndSet(url).then(function(response) {
    			//console.log("loaded location", response);
          deferrred.resolve(response.data.locations[0]);
        });
      }
    });

    return deferrred.promise;
  }

  // get location details
  this.getLocationDetails = function($locationId) {
    var deferrred = $q.defer();
    var locationData = null
    //console.log("$this.locationData", $this.locationData);
    for ($i in $this.locationData) {
      //console.log("getLocationDetails", parseInt($this.locationData[$i].id), parseInt($locationId), parseInt($this.locationData[$i].id) == parseInt($locationId));
      if (parseInt($this.locationData[$i].id) == parseInt($locationId)) {
        locationData = $this.locationData[$i];
        deferrred.resolve(locationData);
        return deferrred.promise;
        break;
      }
    }
    if (!locationData) {
      //console.log("nope.");
      deferrred.reject(null);
    }

    return deferrred.promise;
  }

  // return outside of the defer function
  this.getLocationDetailsReturn = function($locationId) {
    var locationData = null;
    for ($i in $this.locationData) {
      if ($this.locationData[$i].id == $locationId) {
        locationData = $this.locationData[$i];
        return locationData;
        break;
      }
    }
    if (!locationData) {
      return false;
    }
  }

  // calculate distances using math
  this.calculateDirectDistances = function() {
    var deferrred = $q.defer();
    //console.log("start distances", new Date()*1);
    if (!$this.locationData || !$this.locationData.length) {
      //console.log("GPS already loaded", $rootScope.GPS);
      deferrred.resolve(null);
    } else if ($rootScope.GPS == "not found") {
      //console.log("GPS already loaded", $rootScope.GPS);
      deferrred.resolve($this.locationData);
    } else {
      var origin = $rootScope.GPS;
      for ($loc in $this.locationData) {
        if ($this.locationData[$loc].lat && $this.locationData[$loc].lng) {
          var destination = { 'latitude' : $this.locationData[$loc].lat, 'longitude' : $this.locationData[$loc].lng }
          var distance = Math.round(calculateDistance(origin, destination)*100)/100;
          $this.locationData[$loc].distance = Number(String(distance).substr(0,4));
        } else {
          $this.locationData[$loc].distance = null;
        }
      }

    //console.log("done distances", new Date()*1);
      deferrred.resolve($this.locationData);
    }

    return deferrred.promise;
  }

  // start getting distances with google...
  this.getDistances = function() {
    var deferrred = $q.defer();
    var $locations = $this.locationData;

    if (!$locations) {
      deferrred.reject($this.locationData);
      return deferrred.promise;
    }

    if ($rootScope.GPS == "not found") {
      //console.log("GPS already loaded", $rootScope.GPS);
      deferrred.resolve($rootScope.GPS);
    } else {
      var locationArrays = [], size = 25;
      var fnLocationData = $this.locationData;
      var locLength = fnLocationData.length;
      var newLocationData = [];

      while (fnLocationData.length > 0) {
        locationArrays.push(fnLocationData.splice(0, size));
      }

      function getBatchDistances($locArray) {
        $this.getDistancesBatch($locArray).then(function(data) {
          //console.log(batchCount, batchLength, $locArray, data);
          batchCount++;
          if (batchCount <= batchLength) {
            getBatchDistances(locationArrays[batchCount]);
          } else {
            //console.log("CONCAT!", locationArrays);
            for ($lA in locationArrays) {
              //console.log("grab this..", locationArrays[$lA]);
              newLocationData = newLocationData.concat(locationArrays[$lA]);
            }
            //console.log("new loc data", newLocationData, newLocationData.length);
            $this.locationData = newLocationData;
            deferrred.resolve(newLocationData);
          }
        }, function(e) {
          //console.log("error", e);
        });
      }

      var batchCount = 0;
      var batchLength = locationArrays.length - 1;
      getBatchDistances(locationArrays[batchCount]);

      if (batchLength < 0) {
        deferrred.reject($this.locationData);
      }
    }

    return deferrred.promise;
  };

  // GET GOOGLE DISTANCE 25 at a time
  this.getDistancesBatch = function($fnLocationArray) {
    var deferrred = $q.defer();
    var origin = new google.maps.LatLng($rootScope.GPS.latitude,$rootScope.GPS.longitude);
    var destinationArray = [];

    for ($location in $fnLocationArray) {
      if ($fnLocationArray[$location].lat && $fnLocationArray[$location].lng) {
        destinationArray.push($fnLocationArray[$location].lat+", "+$fnLocationArray[$location].lng);
      } else if ($fnLocationArray[$location].location_address != "") {
        destinationArray.push($fnLocationArray[$location].location_address+", "+$fnLocationArray[$location].location_city+", "+$fnLocationArray[$location].location_province);
      } else {
        destinationArray.push("");
      }
    }

    function callbacker(response, status) {
      //console.log("DISTANCES", response, status);
      if (status == "UNKNOWN_ERROR") {
        for ($loc in $fnLocationArray) {
          var un_origin = $rootScope.GPS;
          var un_destination = { 'latitude' : $fnLocationArray[$loc].lat, 'longitude' : $fnLocationArray[$loc].lng };
          $fnLocationArray[$loc].distance = Math.round(calculateDistance(un_origin, un_destination)*100)/100;
        }

        deferrred.resolve($fnLocationArray);
      } else if (status == "OK") {
        for ($loc in $fnLocationArray) {
          if (response.rows[0].elements[$loc].status == "OK") {
            //console.log(response.rows[0].elements[$loc].distance, $loc);
            $fnLocationArray[$loc].distance_value = response.rows[0].elements[$loc].distance.value;
            $fnLocationArray[$loc].distance = Math.round(response.rows[0].elements[$loc].distance.value/100)/10;
          } else if (response.rows[0].elements[$loc].status == "ZERO_RESULTS") {
            var un_origin = $rootScope.GPS;
            var un_destination = { 'latitude' : $fnLocationArray[$loc].lat, 'longitude' : $fnLocationArray[$loc].lng };
            $fnLocationArray[$loc].distance = Math.round(calculateDistance(un_origin, un_destination)*100)/100;
          }
        }

        deferrred.resolve($fnLocationArray);
      } else {
        deferrred.reject(response);
      }
    }

    var service = new google.maps.DistanceMatrixService();
    service.getDistanceMatrix({
      origins: [origin],
      destinations: destinationArray,
      travelMode: google.maps.TravelMode.DRIVING
    }, callbacker);

    return deferrred.promise;
  }

  this.isItOpeningLaterToday = function($location) {
    //console.log($location);
    if (!$location.hours) {
      $location.status_text = $rootScope.text.notApplicable;
      $location.status = "na";
      $location.status_until = null;
      $location.status_ = $rootScope.text.notApplicable;
      return $location.status;
    }

    var $currentDate = new Date();
    var $currentDayOfWeek = $currentDate.getDay();
    var $currentHour = $currentDate.getHours();
    var $hours = String($location.hours[$currentDayOfWeek]).split(",");
    var $openTime = Number($hours[0]);

    return $currentHour < $openTime;
  }

  // check current time vs location time
  this.isItOpen = function($location, $minutes) {
    //console.log($location);
    if (!$location.hours) {
      $location.status_text = $rootScope.text.notApplicable;
      $location.status = "na";
      $location.status_until = null;
      $location.status_ = $rootScope.text.notApplicable;
      return $location.status;
    }

    var $currentDate = new Date();
    var $currentDayOfWeek = $currentDate.getDay();
    var $currentHour = $currentDate.getHours();
    var $currentMin = $currentDate.getMinutes();
    var $currentTime = $currentHour + Math.round(($currentMin/60)*100)/100;
    $currentTime = ($currentTime == 0) ? 24 : $currentTime;

    var $hours = String($location.hours[$currentDayOfWeek]).split(",");
    var $openTime = Number($hours[0]);
    var $closeTime = (Number($hours[1]) < $openTime) ? Number($hours[1]) + 24 : Number($hours[1]);

    // if the store closes in the AM of the next day...
    var $yHours = String($location.hours[$currentDayOfWeek-1]).split(",");
    var $yOpenTime = Number($yHours[0]);
    var $yCloseTime = Number($yHours[1]);

    if (Number($yHours[1]) < Number($hours[0]) && $currentTime < Number($yHours[1])) {
      // yesterday it was open until AM today
      $openTime = Number($yHours[0]) - 24; // so its open
      $closeTime = Number($yHours[1]);
    }

    var $closeHour = Math.floor($closeTime);
    var $closeMinutes = Math.round(($closeTime-$closeHour)*60);

/*
    $closeTimeText =
      (($closeHour > 12) ? (($closeHour > 24) ? $closeHour - 24 : $closeHour - 12) : $closeHour) +
      (($closeMinutes) ? ":" + (($closeMinutes < 10) ? "0"+$closeMinutes : $closeMinutes) : "") +
      (($closeHour <= 12) ? "AM" : (($closeHour >= 24) ? "AM" : "PM"));
*/

    $closeMinutesText = ($closeMinutes) ? ":" + (($closeMinutes < 10) ? "0"+$closeMinutes : $closeMinutes) : "";
    if ($closeHour == 0 || $closeHour == 24) {
      $closeTimeText = "12"+$closeMinutesText+"AM";
    } else if ($closeHour < 12) {
      $closeTimeText = $closeHour+$closeMinutesText+"AM";
    } else if ($closeHour > 24) {
      $closeTimeText = ($closeHour-24)+$closeMinutesText+"AM";
    } else if ($closeHour >= 12) {
      $closeTimeText = (($closeHour != 12) ? $closeHour-12 : $closeHour)+$closeMinutesText+"PM";
    }


    if ($openTime <= $currentTime && $closeTime > $currentTime) {
      $location.status_until = $rootScope.text.locationUntil + " " + $closeTimeText;
      $location.status_ = $rootScope.text.locationOpen;
      $location.status = "open";
    } else {
      $location.status_until = null;
      $location.status_ = $rootScope.text.locationClosed;
      $location.status = "closed";
    }

    //console.log("is it closing?", $closeTime, $currentTime, $minutes, $closeTime-$currentTime, $minutes/60);
    if ($minutes && $location.status == "open") {
      if ($closeTime-$currentTime <= $minutes/60) {
        return "closing";
      }
    }

    return $location.status;
  }


  // rewardData variable
  this.rewardData = null;

  // get client's rewards
  this.rewards = function(){
    var deferrred = $q.defer();

    if ($this.rewardData) {
      //console.log("productData already loaded", $this.productData);
      deferrred.resolve($this.rewardData);
    } else {
      var url = $rootScope.APIpath + '/rewards/'+$rootScope.clientId;
      $localForage.getItem(url).then(function(forData) {
        if (forData.data) {
          //console.log("foraged reward", forData.data);
          $this.rewardData = forData.data.rewards;
          deferrred.resolve($this.rewardData);
        } else {
          $this.loadAndSet(url).then(function(response) {
      			//console.log("loaded reward", data);
            $this.rewardData = response.data.rewards;
            deferrred.resolve($this.rewardData);
          });
        }
      });
    }

    return deferrred.promise;
  }

  // get location details
  this.getRewardDetails = function($rewardId) {
    var deferrred = $q.defer();
    var rewardData = null
    for ($i in $this.rewardData) {
      if ($this.rewardData[$i].id == $rewardId) {
        rewardData = $this.rewardData[$i];
        deferrred.resolve(rewardData);
        return deferrred.promise;
        break;
      }
    }
    if (!rewardData) {
      deferrred.reject(rewardData);
    }

    return deferrred.promise;
  }


  // get leaderboard
  this.getLeaderboard = function($regionId) {
    var deferrred = $q.defer();
    var url = $rootScope.APIpath + '/leaders/'+$rootScope.clientId+'/10/month' + (($regionId) ? '/' + $regionId : '');
    $http.get(
      url
    ).then(function(response, status) {
			//console.log("getTop", data);
      deferrred.resolve(response.data.ranks);
    }, function(response, status) {
		  //console.log("error: ",data.autherror);
      deferrred.reject(response);
    });

    return deferrred.promise;
  }



  // productData variable.
  this.galleryData = null;

  // get all products
  this.galleries = function() {
    var deferrred = $q.defer();

    if ($this.galleryData) {
      //console.log("productData already loaded", $this.productData);
      deferrred.resolve($this.galleryData);
    } else {
      $this.galleryData = null;
      var url = $rootScope.APIpath + '/gallery/'+$rootScope.clientId;
      $localForage.getItem(url).then(function(forData) {
        if (forData.data) {
          //console.log("foraged galleries", forData.data);
          $this.galleryData = forData.data.galleries;
          deferrred.resolve($this.galleryData);
        } else {
          $this.loadAndSet(url).then(function(response) {
      			//console.log("loaded galleries", data);
            $this.galleryData = response.data.galleries;
            deferrred.resolve($this.galleryData);
          });
        }
      });
    }

    return deferrred.promise;
  }

  // when a gallery is selected, find it within the galleryData
  this.getGalleryDetails = function($galleryId) {
    var deferrred = $q.defer();
    var galleryData = null
    for ($i in $this.galleryData) {
      if ($this.galleryData[$i].id == $galleryId) {
        galleryData = $this.galleryData[$i];
        deferrred.resolve(galleryData);
        return deferrred.promise;
        break;
      }
    }
    if (!galleryData) {
      deferrred.reject(galleryData);
    }

    return deferrred.promise;
  }

  // when a gallery item is selected, find it within the galleryData
  this.getGalleryItemDetails = function($galleryId, $itemId) {
    var deferrred = $q.defer();
    var galleryData = null
    var itemData = null
    //console.log($galleryId, $itemId);
    for ($i in $this.galleryData) {
      //console.log($this.galleryData[$i]);
      if ($this.galleryData[$i].id == $galleryId) {
        galleryData = $this.galleryData[$i];
        for ($j in galleryData.items) {
          if (galleryData.items[$j].id == $itemId) {
            itemData = galleryData.items[$j];
            deferrred.resolve(itemData);
            return deferrred.promise;
            break;
          }
        }
      }
    }
    if (!itemData) {
      deferrred.reject(itemData);
    }

    return deferrred.promise;
  }

  // when a group is selected, filter the galleryData for them
  this.filterGalleries = function($groupId) {
    var deferrred = $q.defer();
    var $galleryArray = [];
    for ($i in $this.galleryData) {
      if ($this.galleryData[$i].group_id == $groupId) {
        $galleryArray.push($this.galleryData[$i]);
      }
    }
    if ($galleryArray.length > 0) {
      deferrred.resolve($galleryArray);
    } else {
      deferrred.reject($galleryArray);
    }

    return deferrred.promise;
  }



  // STRIPE
  this.subscriptionPlanData = null;

  this.getSubscriptionPlans = function() {
    var deferred = $q.defer();
    if ($this.subscriptionPlanData) {
      //console.log("loaded already");
      deferred.resolve($this.subscriptionPlanData);
    } else {
      var url = $rootScope.APIpath + '/stripe/subscription_plans/'+$rootScope.clientId;
      //console.log("getSubscriptionPlans", url);
      $http.get(
        url,
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
  			//console.log("getSubscriptionPlans", response.data);
  			$this.subscriptionPlanData = response.data.stripe_response.data;
        deferred.resolve($this.subscriptionPlanData);
      }, function(response, status) {
  		  //console.log("error: ",data.authError);
    		if (response.data.authError == true) {
          UserService.logout();
          try {
        	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
        	} catch(e) {}
    		}
        deferred.reject(response);
      });
    }

    return deferred.promise;
  }

  this.getUserSubscriptions = function() {
    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/stripe/subscription';
    $http.get(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("getUserSubscriptions", response.data);
      deferred.resolve(response.data);
    }, function(response, status) {
		  //console.log("error: ",response);
  		if (response.data && response.data.authError == true) {
        UserService.logout();
        try {
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      deferred.reject(response);
    });

    return deferred.promise;
  }




  // pageData variable
  this.pageData = null;

  // get pages
  this.pages = function() {
    var deferrred = $q.defer();

    if ($this.pageData) {
      //console.log("pageData already loaded");
      deferrred.resolve($this.pageData);
    } else {
      var url = $rootScope.APIpath + '/pages/'+$rootScope.clientId;
      $localForage.getItem(url).then(function(forData) {
        if (forData.data) {
          //console.log("foraged pages", forData.data);
          $this.pageData = forData.data.pages;
          $rootScope.pages = $this.pageData;
          deferrred.resolve($this.pageData);
        } else {
          $this.loadAndSet(url).then(function(response) {
      			//console.log("loaded pages", data);
            $this.pageData = response.data.pages;
            $rootScope.pages = $this.pageData;
            deferrred.resolve($this.pageData);
          });
        }
      });
    }

    return deferrred.promise;
  }

  // get page details
  this.getPageDetails = function($pageId) {
    var deferrred = $q.defer();
    var pageData = null
    for ($i in $this.pageData) {
      if ($this.pageData[$i].id == $pageId) {
        pageData = $this.pageData[$i];
        deferrred.resolve(pageData);
        return deferrred.promise;
        break;
      }
    }
    if (!pageData) {
      deferrred.reject(pageData);
    }

    return deferrred.promise;
  }
}]);


trueBlue.service('UserService', ['$http', '$q', '$timeout', '$location', '$localStorage', '$filter', '$rootScope', 'PushService', 'AnalyticsService', 'DataService', 'ShoppingService', function($http, $q, $timeout, $location, $localStorage, $filter, $rootScope, PushService, AnalyticsService, DataService, ShoppingService) {
  var $this = this;
  var inited = false;

  // init register/login form
  this.init = function($console) {
    //console.log("user form init", $localStorage);
    // init this only once. auto login stuff
    if (!$this.inited) {
      $this.inited = true;
      if ($localStorage.TBapikey && $localStorage.TBapikey != "") {
        // if we have api key, try to login!
        //console.log("api login", $localStorage.TBapikey);
        $this.apiLogin();
      } else if ($localStorage.facebookId) {
        // if we have a facebook id, we will login through facebook
        // api key has priority
        //console.log("facebook login", $localStorage.facebookId);
        $this.facebookLogin($localStorage.facebookId);
      } else if ($rootScope.clientInfo.account_flag == 0) {
        // some apps do not require registration, but we still want to track them.
        //console.log("ANON REGISTER!");
        $this.anonRegister();
      }
    }

    // init the form.
    // translate into angular functions..?
    // throw into a directive?
    if (!$rootScope.userDetails) {
      $('a[href="#login"]', $console).click(function(e) {
        // can this be controlled via a single variable instead..?
        $console.removeClass('login register forgot facebook');
        AnalyticsService.registerEvent("click", "login", "show");
        $('form[name="login"] input[name="username"]', $console).focus();
        e.preventDefault();
      });
      $('a[href="#register"]', $console).click(function(e) {
        $console.removeClass('login forgot facebook').addClass('register');
        AnalyticsService.registerEvent("click", "register", "show");
        $('form[name="register"] input[name="name"]', $console).focus();
        e.preventDefault();
      });
      $('a[href="#forgot"]', $console).click(function(e) {
        $console.removeClass('login register facebook').addClass('forgot');
        AnalyticsService.registerEvent("click", "forgot", "show");
        $('form[name="reset"] input[name="username"]', $console).focus();
        e.preventDefault();
      });
      $('a[href="#close"]',$console).click(function(e) {
        //console.log("HELLO", $(this).closest('li'), $(this).closest('li').is("#login"));
        if ($(this).closest('li').is("#login")) {
          if ($('body').is('.open.form')) {
            $rootScope.closePopup();
          }
          $rootScope.showLoginInNav = false;
          $timeout(function() {
            $rootScope.$apply();
          });
        }
        $console.removeClass('login register forgot facebook');
        e.preventDefault();
      });
      $('a[href="#facebook"]', $console).click(function(e) {
        $console.removeClass('login forgot register').addClass('facebook');
        AnalyticsService.registerEvent("click", "facebook connect", "start");
        $this.facebookConnect();
        e.preventDefault();
      });
      $('form[name="register"]', $console).submit(function(e) {
        AnalyticsService.registerEvent("form", "register", "submit");
        $this.register(this);
        e.preventDefault();
      });
      $('form[name="login"]', $console).submit(function(e) {
        //console.log("FORM PROFILE LOGIN");
        AnalyticsService.registerEvent("form", "login", "submit");
        $this.profileLogin(this);
        e.preventDefault();
      });
      $('form[name="reset"]', $console).submit(function(e) {
        AnalyticsService.registerEvent("form", "forgot", "submit");
        $this.resetPassword(this);
        e.preventDefault();
      });
    } else {
      if ($rootScope.token) {
        var platform;
        var devicePlatform_ = device.platform.toLowerCase();
        if (devicePlatform_.indexOf("android") > -1) {
          platform = "GCM"; // ANDROID!
        } else if (devicePlatform_.indexOf("ios") > -1) {
          platform = "APN"; // APPLE
        } else {
          platform = "N/A";
        }
        //console.log("init forms push token:", $rootScope.token);
        PushService.registerPushID($rootScope.token, platform, $rootScope.tokenStatus)
      }
      if (!$this.inited) {
        $this.inited = true;
        //console.log("getUserDetails from UserService.init", $rootScope.apiKey);
        $this.getUserDetails();
      }
    }
  }

  // anonymous registration
  this.anonRegister = function() {
    var dataString = [];
    dataString.push({ name: "client_id", value: $rootScope.clientId });
    //console.log("anon register", dataString);

    var url = $rootScope.APIpath + "/anon_register";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: { "Content-type" : "application/x-www-form-urlencoded; charset=utf-8" }
      }
    ).then(function(response, status) {
      //console.log("anon register", response.data);
      if (!response.data.error) {
        $rootScope.apiKey = response.data.apiKey;
        $localStorage.TBapikey = response.data.apiKey;
        AnalyticsService.registerEvent("form", "anon_register", response.data.apiKey);
        //console.log("getUserDetails from anonRegister");
        $this.getUserDetails();
      } else {
  			var $errorMessage = response.data.response;
  			if (response.data.response == "formMsgInvalidUsername") { $errorMessage = $rootScope.text.formMsgInvalidUsername; }
  			else if (response.data.response == "formMsgError2") { $errorMessage = $rootScope.text.formMsgError2; }
  			else if (response.data.response == "formMsgExists") { $errorMessage = $rootScope.text.formMsgExists; }
        AnalyticsService.registerEvent("form", "register", "error: "+response.data.message);
      }
    }, function(response, status) {
			var $errorMessage = response.data.response;
			if (response.data.response == "formMsgInvalidUsername") { $errorMessage = $rootScope.text.formMsgInvalidUsername; }
			else if (response.data.response == "formMsgError2") { $errorMessage = $rootScope.text.formMsgError2; }
			else if (response.data.response == "formMsgExists") { $errorMessage = $rootScope.text.formMsgExists; }
		  //console.log("registration error: ",response.data.message);
    });
  }

  // registration
  this.register = function(form) {
    var $error = $('.error', form);
    var $submit = $('.submit_btn', form);

    $error.hide().html('');
    $submit.addClass('processing');
    $(form).addClass("processing");
    $rootScope.disableShield();

    //console.log("register!");

    // grab variables
    var $name = $('input[name="name"]', form).val();
    var $username = $('input[name="username"]', form).val();
    var $password = $('input[name="password"]', form).val();

    // VALIDATE EMAIL!
    var emailValidate = validateEmail($username);
    if (!emailValidate || emailValidate == "invalid") {
      $error.html($rootScope.text.formMsgEmailInvalid).show();
      $rootScope.enableShield();
      $submit.removeClass('processing');
      $(form).removeClass("processing");
      return false;
    }
    if ($username.toLowerCase() != $('input[name="username2"]', form).val().toLowerCase()) {
      $error.html($rootScope.text.formMsgEmailNoMatch).show();
      $rootScope.enableShield();
      $submit.removeClass('processing');
      $(form).removeClass("processing");
      return false;
    }
    if ($password != $('input[name="password2"]', form).val()) {
      $error.html($rootScope.text.formMsgPasswordNoMatch).show();
      $rootScope.enableShield();
      $submit.removeClass('processing');
      $(form).removeClass("processing");
      return false;
    }

    // CONTINUE WITH REGISTRATION
    var dataString = $(form).serializeArray();
    dataString.push({ name: "client_id", value: $rootScope.clientId });
    //console.log("register", dataString);

    var url = $rootScope.APIpath + "/register";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: { "Content-type" : "application/x-www-form-urlencoded; charset=utf-8" }
      }
    ).then(function(response, status) {
      $rootScope.enableShield();
      $submit.removeClass('processing');
      $(form).removeClass("processing");

      //console.log("register profile", data, data.error, data.message);
			if (response.data.error === true) {
  			var $errorMessage = response.data.response;
  			if (response.data.response == "formMsgInvalidUsername") { $errorMessage = $rootScope.text.formMsgInvalidUsername; }
  			else if (response.data.response == "formMsgError2") { $errorMessage = $rootScope.text.formMsgError2; }
  			else if (response.data.response == "formMsgExists") { $errorMessage = $rootScope.text.formMsgExists; }

			  $error.html($errorMessage).show();
        AnalyticsService.registerEvent("form", "register", "error: "+response.data.message);

			  //console.log("error?",data);
			  try {
				  bootbox.alert($errorMessage, function() {});
				} catch(e) {}
			}

		  // let's try logging them in. why not?
		  // if there is an error during registration, check credentials for the existing account. but the error message would still show up..?
		  // if the registration is a success, login to get the API key.
		  var $console = $(form).closest('#console');
      $('form[name="login"] input[name="username"]',$console).val($username);
      $('form[name="login"] input[name="password"]',$console).val($password);
      //console.log("REGISTER PROFILE LOGIN");
      $this.profileLogin($('form[name="login"]', $console));
    }, function(response, status) {
		  //console.log("registration error: ",data.message);
			var $errorMessage = response.data.message;
			if (response.data.message == "scanOnce") { $errorMessage = $rootScope.text.formMsgScanOnce; }
			else if (response.data.message == "incorrect") { $errorMessage = $rootScope.text.formMsgIncorrectQR; }
			else if (response.data.message == "noMatch") { $errorMessage = $rootScope.text.formMsgNoLocation; }
			else if (response.data.message == "tooSoon") { $errorMessage = $rootScope.text.formMsgTooSoon; }

		  $error.html($errorMessage).show();
      $rootScope.enableShield();
      $submit.removeClass('processing');
      $(form).removeClass("processing");
    });
  }

  // login with the stored API
  this.apiLogin = function(form) {
    if ($('body').data('loggingin')) {
      //console.log("logging in...");
      return false;
    }

    $('body').data('loggingin', true);

    var dataString = $(form).serializeArray();
    dataString.push({ name: "client_id", value: $rootScope.clientId });
    dataString.push({ name: "api_key", value: $localStorage.TBapikey });

    var url = $rootScope.APIpath + "/api_login";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: { "Content-type" : "application/x-www-form-urlencoded; charset=utf-8" }
      }
    ).then(function(response, status) {
			console.log("apiLogin", response.data);
      $('body').removeData('loggingin');

			if (response.data.error === false) {
			  //console.log("API LOGGED IN!", response.data);
        $rootScope.apiKey = response.data.apiKey;
        $localStorage.TBapikey = response.data.apiKey;

        AnalyticsService.registerEvent("form", "api logged in", response.data.id);

        //console.log("getUserDetails from api login");
        $this.getUserDetails().then(function() {
          ShoppingService.checkCompletedOrders();
          ShoppingService.checkActiveOrders();
        });
			} else {
		    //console.log("api login error: ",response.data.message);
		    delete $localStorage.TBapikey;
		    delete $localStorage.facebookId;
		    // the api key was invalid, so lets start again - only if you are not able to make accounts on your own.
		    // facebook was also persisting.
		    if ($rootScope.clientInfo.account_flag == 0) {
          $this.anonRegister();
        }
			}
    }, function(response, status) {
      $('body').removeData('loggingin');
		  //console.log("api login error: ",response.data.message);
    });
  }

  // login - updated - tested.
  this.profileLogin = function(form) {
    if ($('body').data('loggingin')) {
      //console.log("logging in...");
      return false;
    }

    $('body').data('loggingin', true);

    var $forms = $('section#forms');
    var $error = $('.error', form);
    var $submit = $('.submit_btn', form);

    $error.hide().html('');
    $submit.addClass('processing');
    $forms.addClass("processing");
    $rootScope.disableShield();

    var $username = $('input[name="username"]', form).val();
    var $password = $('input[name="password"]', form).val();

    var dataString = $(form).serializeArray();
    dataString.push({ name: "client_id", value: $rootScope.clientId });

    var url = $rootScope.APIpath + "/login";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: { "Content-type" : "application/x-www-form-urlencoded; charset=utf-8" }
      }
    ).then(function(response, status) {
			console.log("profileLogin", response.data);
      $('body').removeData('loggingin');
      $rootScope.enableShield();
      $submit.removeClass('processing');
      $forms.removeClass("processing");

			if (response.data.error === false) {
        $rootScope.apiKey = response.data.apiKey;
        $localStorage.TBapikey = response.data.apiKey;

        AnalyticsService.registerEvent("form", "logged in", response.data.id);

        $timeout(function() {
          // if the user logs in through favoriting, close the window.
          if ($forms.hasClass('favourite')) {
            $forms.hide().removeClass('favourite');
          }
          if ($rootScope.popUpType == "user") {
            $rootScope.closePopup();
          }

          $rootScope.$apply();
          //console.log("getUserDetails from profileLogin");
          $this.getUserDetails().then(function() {
            ShoppingService.checkCompletedOrders();
            ShoppingService.checkActiveOrders();
          });
        });

        if (response.data.reset) {
          $rootScope.setFormImage($rootScope.userDetails.image);
          $forms.addClass('password').show();
        }
			} else {
  			var $errorMessage = response.data.response;
  			if (response.data.response == "formMsgError") { $errorMessage = $rootScope.text.formMsgError; }
  			else if (response.data.response == "formMsgIncorrectCred") { $errorMessage = $rootScope.text.formMsgIncorrectCred; }

  		  $error.html($errorMessage).show();
/*
			  try {
  				bootbox.alert($rootScope.text.formMsgWrong, function() {});
				} catch(e) {}
*/
			}
    }, function(response, status) {
      $('body').removeData('loggingin');
		  //console.log("login error: ",data.message);
			var $errorMessage = response.data.response;
			if (response.data.response == "formMsgError") { $errorMessage = $rootScope.text.formMsgError; }
			else if (response.data.response == "formMsgIncorrectCred") { $errorMessage = $rootScope.text.formMsgIncorrectCred; }

		  $error.html($errorMessage).show();
      //$error.html(data.message).show();
      $rootScope.enableShield();
      $submit.removeClass('processing');
      form.removeClass("processing");
    });
  }

  // registration - updated - tested.
  this.resetPassword = function(form) {
    var $forms = $('section#forms');
    var $error = $('.error', form);
    var $submit = $('.submit_btn', form);

    $error.hide().html('');
    $submit.addClass('processing');
    $forms.addClass("processing");
    $rootScope.disableShield();

    // VALIDATE EMAIL!
    var emailValidate = validateEmail($('input[name="username"]', form).val());
    if (!emailValidate || emailValidate == "invalid") {
      $error.html($rootScope.text.formMsgEmailInvalid).show();
      $rootScope.enableShield();
      $submit.removeClass('processing');
      form.removeClass("processing");
      return false;
    }

    // CONTINUE WITH REGISTRATION
    var dataString = $(form).serializeArray();
    dataString.push({ name: "client_id", value: $rootScope.clientId });

    var url = $rootScope.APIpath + "/reset";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: { "Content-type" : "application/x-www-form-urlencoded; charset=utf-8" }
      }
    ).then(function(response, status) {
      $rootScope.enableShield();
      $submit.removeClass('processing');
      form.removeClass("processing");

      //console.log("resetPassword", data, status);
      if (response.data.error) {
  			var $errorMessage = response.data.response;
  			if (response.data.response == "formMsgResetError") { $errorMessage = $rootScope.text.formMsgResetError; }

  		  $error.html($errorMessage).show();
    	} else {
        AnalyticsService.registerEvent("form", "forgot", "email sent: "+$('input[name="username"]',form).val());
        //window.location.href = "#/";
        try {
      	  window.plugins.toast.showLongCenter($rootScope.text.formMsgEmailSent, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {
        	$error.html($rootScope.text.formMsgEmailSent).show();
        	$timeout(function() {
          	$('li#forgot a[href="#close"]',form).trigger('click');
        	}, 2000);
      	}
    	}
    }, function(response, status) {
		  //console.log("resetPassword error", data, status);
      $error.html(response.data.message).show();
      $rootScope.enableShield();
      $submit.removeClass('processing');
      form.removeClass("processing");
      try {
    	  window.plugins.toast.showLongCenter($rootScope.text.error+" "+response.data.message, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
    	} catch(e) {
      	//console.log("Error! "+data.message);
    	}
    });
  }


  // FACEBOOK
  // this variable was added for an edge case
  // the user was able to register, but it did not follow through with a login.
  // this COULD happen if the facebook email and user id do not match
  // this variable will account for any cases that fail at register -> login and prompt openFB to take over on next login trial
  this.facebookNative = true;

  // registration for facebook...
  this.facebookConnect = function() {
    //console.log("FACEBOOK CONNECT!");

    if (typeof facebookConnectPlugin === "undefined" || !$this.facebookNative) {
      //console.log("openfb");
      AnalyticsService.registerEvent("click", "facebook connect", "openfb");
      openFB.login(
        function(response) {
          if(response.status === 'connected') {
            $this.getFBInfo();
          } else {
            try { window.plugins.toast.showLongCenter($rootScope.text.toastFacebookFail, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
          }
        }, {
          scope: 'public_profile, email'
        }
      )
    } else {
      facebookConnectPlugin.login(
        ["public_profile","email"],
        function(data) {
          //console.log("success!",data);
          $this.getFBInfo(data.authResponse.userID);
        },
        function(error) {
          //console.log("error :(",error);
        }
      )
    }
  }

  // get the profile to register/login
  this.getFBInfo = function($user_id) {
    //console.log("getFBInfo");
    if (typeof facebookConnectPlugin === "undefined" || !$this.facebookNative) {
      openFB.api({
        path: '/me',
        success: function(data) {
          //console.log("openFB", data);
          //alert(showProps(data, "data"));
            //data.id = 10102016535104770
            //data.birthday = 10/14/1986
            //data.email = me@andrewu.net
            //data.first_name = Andrew
            //data.gender = male
            //data.last_name = U
            //data.link = https://www.facebook.com/app_scoped_user_id/10102016535104770/
            //data.locale = en_US
            //data.name = Andrew U
            //data.timezone = -4
            //data.updated_time = 2014-06-16T04:25:45+0000
            //data.verified = true
          $this.facebookRegister(data);
        },
        error: function(data) {
          try { window.plugins.toast.showLongCenter($rootScope.text.toastFacebookFail+" "+data, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
        }
      })
    } else {
      facebookConnectPlugin.api($user_id+"/?fields=id,email,gender,birthday,name", null,
        function(response) {
          //console.log($user_id+"/?fields=id,email,gender,birthday,name", response);

          //birthday: "10/14/1986"
          //email: "me@andrewu.net"
          //gender: "male"
          //id: "10102016535104770"
          //name: "Andrew U"

          $this.facebookRegister(response);
        },
        function(error) {
          //console.log("error!", error);
          try { window.plugins.toast.showLongCenter($rootScope.text.toastFacebookFail+" "+data, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
        }
      );
    }
  }

  // facebook register
  this.facebookRegister = function(fb_data) {
    // CONTINUE WITH REGISTRATION
    var dataString = [];
    dataString.push({ name: "client_id", value: $rootScope.clientId });
    dataString.push({ name: "fb_username", value: fb_data.email });
    dataString.push({ name: "fb_id", value: fb_data.id });
    dataString.push({ name: "gender", value: fb_data.gender });
    dataString.push({ name: "name", value: fb_data.name });
    dataString.push({ name: "birthday", value: fb_data.birthday });

    if ($rootScope.userDetails) {
      dataString.push({ name: "user_id", value: $rootScope.userDetails.id });
    }

    //console.log("facebookRegister", dataString);

    var url = $rootScope.APIpath + "/register";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: { "Content-type" : "application/x-www-form-urlencoded; charset=utf-8" }
      }
    ).then(function(response, status) {
			if (response.data.error === false || response.data.exists) {
        $localStorage.facebookId = fb_data.id;
        AnalyticsService.registerEvent("click", "facebook connect", "register - "+fb_data.id);
        $this.facebookNative = false;
        $this.facebookLogin(fb_data.id);
		  } else {
        AnalyticsService.registerEvent("click", "facebook connect", "error - "+response.data.message);
			  try {
				  bootbox.alert($rootScope.text.formMsgWrong, function() {});
				} catch(e) {}
			}
    }, function(response, status) {
      if (response.data.exists) {
        $localStorage.facebookId = fb_data.id;
        $this.facebookLogin(fb_data.id);
      }
      AnalyticsService.registerEvent("click", "facebook connect", "error - "+response.data.message);
		  //console.log("registration error: ",data.message);
    });
  }

  // facebook login
  this.facebookLogin = function(fb_id) {
    var dataString = [];
    dataString.push({ name: "client_id", value: $rootScope.clientId });
    dataString.push({ name: "fb_id", value: fb_id });

    var url = $rootScope.APIpath + "/login";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: { "Content-type" : "application/x-www-form-urlencoded; charset=utf-8" }
      }
    ).then(function(response, status) {
			if (response.data.error === false) {
        //console.log("facebookLogin");
        $rootScope.apiKey = response.data.apiKey;
        //window.localStorage.setItem('TBapikey', data.apiKey);
        $localStorage.TBapikey = response.data.apiKey;
        AnalyticsService.registerEvent("click", "facebook connect", "login");

        var $forms = $('section#forms');
        // if the user logs in through favoriting, close the window.
        if ($forms.hasClass('favourite')) {
          $forms.hide().removeClass('favourite');
        }
        if ($rootScope.popUpType == "user") {
          $rootScope.closePopup();
        }

        //console.log("getUserDetails from facebookLogin");
        $this.getUserDetails().then(function() {
          ShoppingService.checkCompletedOrders();
          ShoppingService.checkActiveOrders();
        });

        $timeout(function() {
          $rootScope.$apply();
        });
			} else {
			  //console.log("error?",data);
        AnalyticsService.registerEvent("click", "facebook connect", "error - "+response.data.message);
			  try {
  				bootbox.alert($rootScope.text.formMsgWrong, function() {});
				} catch(e) {}
			}
    }, function(response, status) {
		  //console.log("login error: ",data.message);
    });
  }


  // LOGOUT!!
  this.logout = function() {
    AnalyticsService.registerEvent("click", "logout", null);

    if ($rootScope.facebookId) {
      //console.log("logged into facebook");
      if (typeof facebookConnectPlugin === "undefined" || !$this.facebookNative) {
        openFB.logout(function() {
          finishLogout();
        });
      } else {
        facebookConnectPlugin.logout(
          function() {
            //console.log("logged out!");
            finishLogout();
          }, function() {
            //console.log("failed to logout...");
            finishLogout();
          }
        );
      }
    } else {
      finishLogout();
    }

    function finishLogout() {
      // user variables
      $rootScope.name = null;
      $rootScope.username = null;
      $rootScope.password = null;
      $rootScope.facebookId = null;
      $rootScope.apiKey = null;
      $rootScope.userDetails = null;

      $this.userFavourites = null;
      $this.userFavouritesList = null;
      $this.userHistory = null;
      $this.userRatings = null;
      $this.facebookNative = true;

      $('body').removeData('loggingin');

      for ( var i = 0, len = localStorage.length; i < len; ++i ) {
        //console.log(localStorage.key( i ), localStorage.getItem( localStorage.key( i ) ) );
        if (localStorage.key( i ).indexOf('ngStorage') != 0) {
          delete localStorage.key( i );
        }
      }

      delete $localStorage.TBapikey;
      delete $localStorage.facebookId;
      delete $localStorage.stripe_token;

      $timeout(function() {
        $rootScope.$apply();
        $this.checkUser();
      });
    }
  }


  // USER STUFF
  // check that the user is logged in!
  this.checkUser = function() {
    if (!$rootScope.userDetails) {
      $location.url('/');
    }
  }

  // get user's account information for account settings
  this.getUserDetails = function($reason) {
    var deferred = $q.defer();
    //console.log("getUserDetails", $rootScope.userDetails, $reason, $rootScope.apiKey);
    if ($rootScope.userDetails && !$reason) {
      //console.log("userDetails already loaded");
      // MAKE SURE I GET THE USER ID!
      AnalyticsService.updateSession({ "user_id" : $rootScope.userDetails.id });
      deferred.resolve($rootScope.userDetails);
    } else {
/*
      // to prevent hitting this function twice...? but it doesnt stop the get... useless?
      if (!$rootScope.userDetails) {
        $rootScope.userDetails = "loading";
      }
*/
      var url = $rootScope.APIpath + '/users/me';
      $http.get(
        url,
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
//   			console.log("getUserDetails", data, data.userDetails[0].name, $rootScope.clientInfo.account_flag);
  			if (!response.data.userDetails || !response.data.userDetails[0] || response.data.userDetails && response.data.userDetails[0].name == "" && $rootScope.clientInfo.account_flag == 1) {
    			console.log("You need a real account, but this user has no name. It's a bot! LOGOUT! AHHHHHHH :)");
          $this.logout();
          return false;
  			}
        $rootScope.userDetails = response.data.userDetails[0];

        // if the user has a stripe token, store it in local storage
        if ($rootScope.userDetails.stripe_customer_token) {
          $localStorage.stripe_token = $rootScope.userDetails.stripe_customer_token;
        } else if ($localStorage.stripe_token) {
          ShoppingService.registerStripeToken($localStorage.stripe_token);
        }

        if (!$rootScope.userDetails) {
          //console.log("something's wrong... logout");
          $this.logout();
          return false;
        }

        $rootScope.showLoginInNav = false;
        $rootScope.showLoginInForm = false;
        if ($('section#forms').is('.login')) {
          $rootScope.closePopup();
        }

        try {
        PushNotification.hasPermission(function(data) {
          if (data.isEnabled) {
            $rootScope.tokenStatus = 1;
          } else {
            $rootScope.tokenStatus = 0;
          }

          if ($rootScope.token) {
            var platform;
            var devicePlatform_ = device.platform.toLowerCase();
            if (devicePlatform_.indexOf("android") > -1) {
              platform = "GCM"; // ANDROID!
            } else if (devicePlatform_.indexOf("ios") > -1) {
              platform = "APN"; // APPLE
            } else {
              platform = "N/A";
            }
            PushService.registerPushID($rootScope.token, platform, $rootScope.tokenStatus)
            //console.log("facebook login push token:", $rootScope.token);
          }
          // //console.log("PushNotification.hasPermission?", $rootScope.tokenStatus);
        });
        } catch(e) {}

        if ($rootScope.userDetails.fb_id && !$rootScope.userDetails.image) {
          $rootScope.userDetails.image = "https://graph.facebook.com/"+$rootScope.userDetails.fb_id+"/picture?height=200";
        }

        // MAKE SURE I GET THE USER ID!
        AnalyticsService.updateSession({ "user_id" : $rootScope.userDetails.id });
        if (!$reason) {
          var $scanBtn = $('header a#scan');
          if (!$scanBtn.data('enabled')) {
            $scanBtn.data('enabled', true);
            $scanBtn.click(function(e) {
              e.preventDefault();
              $this.scan();
            });
          }
        }

        $timeout(function() {
          $rootScope.$apply();
        });

        deferred.resolve($rootScope.userDetails);
      }, function(response, status) {
  		  //console.log("error: ",data.authError);
    		if (response.data.authError == true) {
      		// just undeclare rootscope username so the forms will reappear
      		$this.logout();
          try {
            //console.log("getUserDetails", $rootScope.text.toastAuthError);
        	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
        	} catch(e) {}
    		}
        deferred.reject(response.data);
      });
    }

    return deferred.promise;
  }


  // userHistory variable
  this.userHistory = null;

  // get user's history
  this.getHistory = function($reason) {
    var deferred = $q.defer();

    if (!$rootScope.userDetails) {
      //console.log("not logged in... do not try to load it.");
      deferred.reject({'error':true});
    } else if ($this.userHistory && !$reason) {
      //console.log("userHistory already loaded");
      deferred.resolve($this.userHistory);
    } else {
      var url = $rootScope.APIpath + "/history";
      $http.get(
        url,
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
  			console.log("history", response.data, $reason);
  			$this.userHistory = response.data.history;
        deferred.resolve($this.userHistory);
      }, function(response, status) {
    		if (response.data.authError == true) {
          $this.logout();
          try {
            //console.log("getHistory", $rootScope.text.toastAuthError);
        	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
        	} catch(e) {}
    		}
        deferred.reject(response.data);
      });
    }

    return deferred.promise;
  }


  // initiate user forms
  this.initUserForms = function($element) {
    $('form', $element).submit(function() {
      var form = $(this);
      var $what = form.attr('name');
      var $error = $('.error', form);
      var $submit = $('.submit_btn', form);

      $error.hide().html('');
      $submit.addClass('processing');
      form.addClass("processing");
      $rootScope.disableShield();

      var data, data2 = null;

      if ($what == "name") {
        data = $('input[name="name"]',form).val();
      } else if ($what == "username") {
        var emailValidate = validateEmail($('input[name="username"]', form).val());
        if (!emailValidate || emailValidate == "invalid") {
          $error.html($rootScope.text.formMsgEmailInvalid).show();
          $rootScope.enableShield();
          $submit.removeClass('processing');
          form.removeClass("processing");
          return false;
        }
        if ($('input[name="username"]', form).val() != $('input[name="username2"]', form).val()) {
          $error.html($rootScope.text.formMsgEmailNoMatch).show();
          $rootScope.enableShield();
          $submit.removeClass('processing');
          form.removeClass("processing");
          return false;
        }

        data = $('input[name="username"]', form).val();
      } else if ($what == "password") {
        if ($('input[name="password"]', form).val() != $('input[name="password2"]', form).val()) {
          $error.html($rootScope.text.formMsgPasswordNoMatch).show();
          $rootScope.enableShield();
          $submit.removeClass('processing');
          form.removeClass("processing");
          return false;
        }

        data = $('input[name="password"]',form).val();
        data2 = $('input[name="currentPassword"]',form).val();
      }

      //console.log("USER SETTINGS FORMS", $what, data, data2);
      $this.updateUserDetails($what, data, data2);
    });
  }

  // NOT YET INCLUDED IN APP
  // update user account information
  this.updateUserDetails = function(name, data, data2) {
    var dataString = [];
    dataString.push({ name: name, value: data });
    if (name == "password" && data2 != "") {
      dataString.push({ name: "currentPassword", value: data2 });
      var $password = data;
    } else if (name == "username" && data != "") {
      var $username = data;
    } else if (name == "name" && data != "") {
      var $name = data;
    }

    var form = $('form[name="'+name+'"]');
    var $error = $('.error', form);
    var $submit = $('.submit_btn', form);

    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/users/me';
    $http.put(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      $rootScope.enableShield();
      $submit.removeClass('processing');
      form.removeClass("processing");

			//console.log("updateUserDetails", name, data);
			if (response.data.error) {
        $error.html(response.data.message).show();
      } else {
        $rootScope.closePopup();
      }
      $timeout(function() {
        $rootScope.$apply();
        //console.log("getUserDetails from updateUserDetails");
        $this.getUserDetails("updated");
      });
      deferred.resolve(response.data);
    }, function(response, status) {
		  //console.log("error: ",data.error);
  		if (response.data.authError == true) {
        $this.logout();
        try {
          //console.log("updateUserDetails", $rootScope.text.toastAuthError);
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      $error.html(response.data.message).show();
      $rootScope.enableShield();
      $submit.removeClass('processing');
      form.removeClass("processing");
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  // NOT YET INCLUDED IN APP
  // delete myself :(
  this.deleteUser = function() {
    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/users/me';
    $http.delete(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("deleteUser", data);
  		$this.logout();
      deferred.resolve(response.data);
    }, function(response, status) {
		  //console.log("deleteUser error: ",data);
  		$this.logout();
      deferred.reject(response.data);
    });

    return deferred.promise;
  }






  // userFavourites variable
  this.userFavourites = null;

  // userFavouritesList variable
  this.userFavouritesList = null;

  // get user's favourites
  this.getUserFavourites = function($reason) {
    var deferred = $q.defer();

    if (!$rootScope.userDetails) {
      //console.log("not logged in... do not try to load it.");
      deferred.reject({'error':true});
    } else if ($this.userFavourites && !$reason) {
      //console.log("userFavourites already loaded");
      deferred.resolve($this.userFavourites);
    } else {
      var url = $rootScope.APIpath + "/favourites";
      $http.get(
        url,
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
  			//console.log("favourites", data);
  			$this.userFavourites = response.data.favourites;
  			$this.userFavouritesList = [];
  			for ($fav in $this.userFavourites) {
    			$this.userFavouritesList.push($this.userFavourites[$fav].product_id);
  			}
  			deferred.resolve($this.userFavourites);
      }, function(response, status) {
    		if (response.data.authError == true) {
          $this.logout();
          try {
            //console.log("getUserFavourites", $rootScope.text.toastAuthError);
        	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
        	} catch(e) {}
    		}
        deferred.reject(response.data);
      });
    }

    return deferred.promise;
  }

  // check if favourited
  this.checkFavourite = function($pid) {
    //console.log("checkFavourite", $pid, $this.userFavouritesList, $this.userFavouritesList.indexOf($pid));
    return $this.userFavouritesList.indexOf($pid);
  }

  // add favourite
  this.addFavourite = function($pid) {
    var deferred = $q.defer();

    var dataString = [];
    dataString.push({ name: "product_id", value: $pid });

    var url = $rootScope.APIpath + "/favourites";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      //console.log("add FAV", data, status);
      $this.getUserFavourites("added");
      deferred.resolve(response.data);
    }, function(response, status) {
      //console.log("add FAV ERROR", data, status);
  		if (response.data.authError == true) {
        $this.logout();
        try {
            //console.log("addFavourite", $rootScope.text.toastAuthError);
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  // remove favourite
  this.removeFavourite = function($pid) {
    var deferred = $q.defer();

    var url = $rootScope.APIpath + '/favourites/'+$pid;
    $http.delete(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("remove FAV", data, status);
      $this.getUserFavourites("removed");
      deferred.resolve(response.data);
    }, function(response, status) {
		  //console.log("remove FAV ERROR", data, status);
  		if (response.data.authError == true) {
        $this.logout();
        try {
            //console.log("removeFavourite", $rootScope.text.toastAuthError);
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      deferred.reject(response.data);
    });

    return deferred.promise;
  }


  // setup rating form
  this.initRating = function(form) {
    var $section = $(form).closest('section');
    $this.getUserRatings().then(function() {
      $this.checkRating($section.attr('pid')).then(function(data) {
        $('.spinner[rel="ratings"]', form).hide();
        $('form[name="rating"] .rating > .icon', form).removeClass('rated');
        if (data.id) {
          $('.already', form).show();
          $('form[name="rating"]', form).hide();
        } else {
          $('.already', form).hide();
          $('form[name="rating"]', form).show();
        }
      }, function(e) {
        //console.log("error", e);
      });
    });

    $timeout(function() {
      $('form[name="rating"] .rating > .icon', form).each(function() {
        $(this).click(function() {
          $(this).siblings().removeClass('rated');
          $(this).prevAll().andSelf().addClass('rated');
          $('form[name="rating"] input[name="rating_value"]', form).val($(this).index()+1);
        });
      });
      $('form[name="rating"]', form).submit(function(e) {
        $this.addRating(this).then(function() {
          //console.log("close..?");
          $rootScope.closePopup();
        });
        e.preventDefault();
      });
    });
  }

  // get ratings
  this.getProductRatings = function($pid) {
    var deferred = $q.defer();

    var url = $rootScope.APIpath + "/ratings/"+$pid;
    $http.get(
      url
    ).then(function(response, status) {
			//console.log("getProductRatings", data);
			deferred.resolve(response.data.ratings);
    }, function(response, status) {
		  //console.log("getProductRatings error: ",data.authError);
  		$this.logout();
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  // userRatings variable
  this.userRatings = null;

  // get user's favourites
  this.getUserRatings = function($reason) {
    var deferred = $q.defer();

    if (!$rootScope.userDetails) {
      //console.log("not logged in... do not try to load it.");
      deferred.reject({'error':true, 'message':'not logged in'});
    } else if ($this.userRatings && !$reason) {
      //console.log("userRatings already loaded");
      deferred.resolve($this.userRatings);
    } else {
      var url = $rootScope.APIpath + "/ratings/me";
      $http.get(
        url,
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
  			//console.log("my ratings", data);
  			$this.userRatings = response.data.ratings;
    		deferred.resolve($this.userRatings);
      }, function(response, status) {
    		if (response.data.authError == true) {
          $this.logout();
          try {
            //console.log("getUserRatings", $rootScope.text.toastAuthError);
        	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
        	} catch(e) {}
    		}
        deferred.reject(response.data);
      });
    }

    return deferred.promise;
  }

  // check if rated
  this.checkRating = function($pid) {
    var deferred = $q.defer();
    var userRating = null
    for ($i in $this.userRatings) {
      if ($this.userRatings[$i].product_id == $pid) {
        userRating = $this.userRatings[$i];
        deferred.resolve(userRating);
        return deferred.promise;
        break;
      }
    }
    if (!userRating) {
      deferred.resolve({});
      //deferred.reject(userRating);
    }

    return deferred.promise;
  }

  // add Rating
  this.addRating = function(form) {
    var deferred = $q.defer();
    var $pid = $($(form).closest('section')).attr('pid');

    var $submit = $('.submit_btn', form);

    $submit.addClass('processing');
    $(form).addClass("processing");
    $rootScope.disableShield();

    var dataString = $(form).serializeArray();
    dataString.push({ name: "product_id", value: $pid });

    // LOYALTY - should always be 1, EVENTS - if we want a star rating, it's a 1.
    if ($rootScope.clientInfo.rating_flag != 1) {
      //console.log("DEFER", dataString);
      deferred.reject(false);
    }

    var url = $rootScope.APIpath + "/ratings";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      //console.log("addRating", data, status);
      $this.getUserRatings("added");
      $rootScope.enableShield();
      $submit.removeClass('processing');
      $(form).removeClass("processing");
      deferred.resolve(response.data);
    }, function(response, status) {
      $rootScope.enableShield();
      $submit.removeClass('processing');
      $(form).removeClass("processing");
      //console.log("addRating ERROR", data, status);
  		if (response.data.authError == true) {
        $this.logout();
        try {
            //console.log("addRating", $rootScope.text.toastAuthError);
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  // remove Rating
  this.removeRating = function($pid) {
    var deferred = $q.defer();

    var url = $rootScope.APIpath + '/ratings/'+$pid;
    $http.delete(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("removeRating", data, status);
      $this.getUserRatings("removed");
      deferred.resolve(response.data);
    }, function(response, status) {
		  //console.log("removeRating ERROR", data, status);
  		if (response.data.authError == true) {
        $this.logout();
        try {
            //console.log("removeRating", $rootScope.text.toastAuthError);
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      deferred.reject(response.data);
    });

    return deferred.promise;
  }



  // get my rank
  this.getMyRank = function() {
    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/leaders/me/month';
    $http.get(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("getMyRank", data);
      deferred.resolve(response.data);
    }, function(response, status) {
		  //console.log("error: ",data.authError);
  		if (response.data.authError == true) {
        $this.logout();
        try {
            //console.log("getMyRank", $rootScope.text.toastAuthError);
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      deferred.reject(response.data);
    });

    return deferred.promise;
  }


  // LOYALTY STUFF
  this.gotoSettings = function(buttonIndex) {
    if (buttonIndex == 2) {
      AnalyticsService.registerEvent("camera", "settings", null);
      cordova.plugins.diagnostic.switchToSettings(function(){
        //console.log("Successfully switched to Settings app");
      }, function(error){
        console.error("The following error occurred: "+error);
      });
    }
  }

  this.getCameraStatus = function() {
    //console.log("GET CAMERA STATUS");
    // cordova.plugins.diagnostic.isCameraEnabled(function(enabled){
    cordova.plugins.diagnostic.isCameraAvailable(function(enabled){
        // console.log("isCameraAvailable", enabled);
    }, onError);

    cordova.plugins.diagnostic.isCameraPresent(function(enabled){
        // console.log("isCameraPresent", enabled);
    }, onError);

    cordova.plugins.diagnostic.isCameraAuthorized(function(enabled){
        // console.log("isCameraAuthorized", enabled);
    }, onError);

    cordova.plugins.diagnostic.getCameraAuthorizationStatus(function(status){
        // console.log("getCameraAuthorizationStatus", status);
    }, onError);

    function onError(error){
        console.error("An error occurred: "+error);
    }
  }

  // scan functionality
  this.scan = function() {
    $this.getCameraStatus();
    cordova.plugins.diagnostic.requestCameraAuthorization(function(granted) {
      $this.getCameraStatus();
      AnalyticsService.registerEvent("camera", "scan auth?", granted);
      //alert("camera authorization... "+(granted ? "GRANTED" : "DENIED"));
      // console.log("Successfully requested camera authorization: authorization was " + (granted ? "GRANTED" : "DENIED"), granted);
      if (granted === true || granted == "GRANTED" || granted === "authorized" || granted == cordova.plugins.diagnostic.permissionStatus.GRANTED) {
        $this.continueScan();
      } else if (granted === false || granted == "DENIED" || granted == cordova.plugins.diagnostic.permissionStatus.DENIED) {
        // can't do anything else! send them to the settings page
        navigator.notification.confirm(
          $rootScope.text.requireCamAuth, // message
          $this.gotoSettings,            // callback to invoke with index of button pressed
          $rootScope.text.requireCamAuthTitle,           // title
          [$rootScope.text.nevermind,$rootScope.text.requireCamAuthGo]     // buttonLabels
        );
      } else {
        AnalyticsService.registerEvent("camera", "error", "granted?");
			  try { window.plugins.toast.showLongCenter($rootScope.text.requireCamAuth, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
      }
    }, function(error){
      navigator.notification.confirm(
        $rootScope.text.requireCamAuth, // message
        $this.gotoSettings,            // callback to invoke with index of button pressed
        $rootScope.text.requireCamAuthTitle,           // title
        [$rootScope.text.nevermind,$rootScope.text.requireCamAuthGo]     // buttonLabels
      );
      AnalyticsService.registerEvent("camera", "error", error);
      console.error(error);
    });
  }

  this.continueScan = function() {
    $('.submit_btn').addClass('processing');
    $rootScope.disableShield();

    AnalyticsService.registerEvent("scan", "start", new Date()*1);
    cordova.plugins.barcodeScanner.scan(function (result) {
      //console.log(result);
      if (!result.cancelled){
        //alert(showProps(result, "result"));
        AnalyticsService.registerEvent("scan", "scanned!", result.text);
        $this.registerScan(result.text);
      } else {
        $rootScope.enableShield();
        $('.submit_btn.processing').removeClass('processing');
        AnalyticsService.registerEvent("scan", "cancelled", new Date()*1);
      }
    }, function (error) {
      $rootScope.enableShield();
      $('.submit_btn.processing').removeClass('processing');
      AnalyticsService.registerEvent("scan", "failed", error);
      try { window.plugins.toast.showLongCenter($rootScope.text.toastScanFail + " " + error, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
    });
  }

  // register a scan into the system
  this.registerScan = function(token) {
    var deferred = $q.defer();
    var dataString = [];
    dataString.push({ name: "token", value: token });
    if ($rootScope.GPS && $rootScope.GPS != "not found") {
      dataString.push({ name: "lat", value: $rootScope.GPS.latitude });
      dataString.push({ name: "lng", value: $rootScope.GPS.longitude });
    }

    var $section = $('section#forms');
    $('.submit_btn').addClass('processing');
    try { window.plugins.toast.showShortCenter($rootScope.text.toastProcessing, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}

    var url = $rootScope.APIpath + "/scan_points";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			console.log("registerScan", response.data);
			if (!response.data.error) {
        try { window.plugins.toast.showLongCenter($rootScope.text.toastEarned+" "+response.data.quantity+" "+((response.data.quantity > 1) ? $rootScope.text.points: $rootScope.text.point)+"!", function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
        //console.log("getUserDetails from registerScan");
    		$this.getUserDetails("points");
        $this.getHistory("points");
        AnalyticsService.registerEvent("scan", "success", token);
        deferred.resolve(response.data);
			} else {
  			var $errorMessage = response.data.message;
  			if (response.data.message == "scanOnce") { $errorMessage = $rootScope.text.formMsgScanOnce; }
  			else if (response.data.message == "incorrect") { $errorMessage = $rootScope.text.formMsgIncorrectQR; }
  			else if (response.data.message == "noMatch") { $errorMessage = $rootScope.text.formMsgNoLocation; }
  			else if (response.data.message == "tooSoon") { $errorMessage = $rootScope.text.formMsgTooSoon; }

			  try { window.plugins.toast.showLongCenter($errorMessage, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
        AnalyticsService.registerEvent("scan", "error", response.data.message);
        deferred.reject(response.data);
			}
      $rootScope.enableShield();
      $('.submit_btn.processing').removeClass('processing');
    }, function(response, status) {
		  //console.log("error: ",data.authError);
      $rootScope.enableShield();
      $('.submit_btn.processing').removeClass('processing');
      AnalyticsService.registerEvent("scan", "error", null);
  		if (response.data.authError == true) {
        $this.logout();
        try {
            //console.log("registerScan", $rootScope.text.toastAuthError);
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  // scan functionality
  this.scanClaim = function(reward_id) {
    cordova.plugins.diagnostic.requestCameraAuthorization(function(granted) {
      AnalyticsService.registerEvent("camera", "claim auth?", granted);
      //alert("camera authorization... "+(granted ? "GRANTED" : "DENIED"));
      //console.log("Successfully requested camera authorization: authorization was " + (granted ? "GRANTED" : "DENIED"));
      if (granted === true || granted == "GRANTED" || granted === "authorized" || granted == cordova.plugins.diagnostic.permissionStatus.GRANTED) {
        $this.continueScanClaim(reward_id);
      } else if (granted === false || granted == "DENIED" || granted == cordova.plugins.diagnostic.permissionStatus.DENIED) {
        // can't do anything else! send them to the settings page
        navigator.notification.confirm(
          $rootScope.text.requireCamAuth, // message
          $this.gotoSettings,            // callback to invoke with index of button pressed
          $rootScope.text.requireCamAuthTitle,           // title
          [$rootScope.text.nevermind,$rootScope.text.requireCamAuthGo]     // buttonLabels
        );
      } else {
        AnalyticsService.registerEvent("camera", "error", "granted?");
			  try { window.plugins.toast.showLongCenter($rootScope.text.requireCamAuth, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
      }
    }, function(error){
      navigator.notification.confirm(
        $rootScope.text.requireCamAuth, // message
        $this.gotoSettings,            // callback to invoke with index of button pressed
        $rootScope.text.requireCamAuthTitle,           // title
        [$rootScope.text.nevermind,$rootScope.text.requireCamAuthGo]     // buttonLabels
      );
      AnalyticsService.registerEvent("camera", "error", error);
      console.error(error);
    });
  }

  this.continueScanClaim = function(reward_id) {
    $('.submit_btn').addClass('processing');
    $rootScope.disableShield();

    AnalyticsService.registerEvent("claim", "start", null);
    cordova.plugins.barcodeScanner.scan( function (result) {
      //console.log(result);
      if (!result.cancelled){
        //reward_id = ['r'];
      	//redeem_code = ['c'];
      	//location_id = ['l'];
        $this.claim(result.text, reward_id);
      } else {
        $rootScope.enableShield();
        $('.submit_btn.processing').removeClass('processing');
        AnalyticsService.registerEvent("claim", "cancelled", null);
      }
    }, function (error) {
      $rootScope.enableShield();
      $('.submit_btn.processing').removeClass('processing');
      AnalyticsService.registerEvent("scan", "failed", error);
      try { window.plugins.toast.showLongCenter($rootScope.text.toastScanFail + error, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
    });
  }

  // redeem a reward
  this.claim = function(token, reward_id) {
    var deferred = $q.defer();
    //console.log("this.claim", token, reward_id);
    var dataString = [];
    dataString.push({ name: "token", value: token });
    dataString.push({ name: "reward_id", value: reward_id });
    if ($rootScope.GPS && $rootScope.GPS != "not found") {
      dataString.push({ name: "lat", value: $rootScope.GPS.latitude });
      dataString.push({ name: "lng", value: $rootScope.GPS.longitude });
    }

    var $form = $('section#forms');

    var url = $rootScope.APIpath + "/claim_scan";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			console.log(response.data);
			if (!response.data.error){
        if ($form.attr('rid') == reward_id) {
          $form.addClass('claimed');
        }
        //console.log("getUserDetails from claim");
        $this.getUserDetails("points");
        $this.getHistory("points");
        var $rewardName = $('section#forms.reward .title').html();
        // for the reward form
        $rootScope.redeem_token = response.data.redeem_token;
        //$('.claimed.token .code', $form).html(data.redeem_token);
        try { window.plugins.toast.showLongCenter($rootScope.text.toastClaimed+" '"+$rewardName+"'!", function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)}); } catch (e) {}
        $rootScope.disableShield();
        AnalyticsService.registerEvent("claim", "success", response.data.redeem_token);
        deferred.resolve(response.data);
			} else {
  			var $errorMessage = response.data.message;
  			if (response.data.message == "insufficient") { $errorMessage = $rootScope.text.formMsgInsufficient; }
  			else if (response.data.message == "incorrect") { $errorMessage = $rootScope.text.formMsgIncorrectQR; }

        try {
      	  window.plugins.toast.showLongCenter($errorMessage, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)})
      	} catch (e) {
          //console.log(e);
        }

        $rootScope.enableShield();
        AnalyticsService.registerEvent("scan", "error", response.data.message);
        deferred.reject(response.data);
			}
      $('.submit_btn.processing').removeClass('processing');
    }, function(response, status) {
		  //console.log("error: ",data.authError);
      $rootScope.enableShield();
      $('.submit_btn.processing').removeClass('processing');
      AnalyticsService.registerEvent("scan", "error", null);
  		if (response.data.authError == true) {
        $this.logout();
        try {
            //console.log("claim", $rootScope.text.toastAuthError);
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      deferred.reject(response.data);
    });
    return deferred.promise;
  }
}]);


trueBlue.service('ShoppingService', ['$http', '$q', '$timeout', '$localStorage', '$filter', '$rootScope', 'AnalyticsService', 'DataService', function($http, $q, $timeout, $localStorage, $filter, $rootScope, AnalyticsService, DataService) {
  var $this = this;

  // SHOPPING!
  // add the order to the database
  this.addOrder = function($cart) {
    var deferred = $q.defer();
    //console.log("Cart:", $cart, JSON.stringify($cart), $cart.toString(), JSON.stringify($cart.variables));

    var form = $('form[name="confirmcart"]');
    var $error = $('.error', form);
    var $submit = $('.submit_btn', form);

    // reset and freeze the form
    $error.hide().html('');
    $submit.addClass('processing');
    form.addClass("processing");
    $rootScope.disableShield();

    // validate phone number
    if ($('input[name="phone"]', form).val()) {
      var phoneValidate = validatePhone($('input[name="phone"]', form));
      if (!phoneValidate || phoneValidate == "invalid") {
        $error.html($rootScope.text.formMsgPhoneInvalid).show();
        $rootScope.enableShield();
        $submit.removeClass('processing');
        form.removeClass("processing");
        deferred.reject("error");
        return deferred.promise;
      } else {
        $cart['phone'] = $('input[name="phone"]', form).val();
      }
    }

    // validate email address format
    if ($('input[name="email"]', form).val()) {
      var emailValidate = validateEmail($('input[name="email"]', form).val());
      if (!emailValidate || emailValidate == "invalid") {
        $error.html($rootScope.text.formMsgEmailInvalid).show();
        $rootScope.enableShield();
        $submit.removeClass('processing');
        form.removeClass("processing");
        return false;
      }
    }

    // clear the cart of extraneous data before sending to server
    for (var $c in $cart.products) {
      delete $cart.products[$c].data;
    }

    var dataString = [];
    dataString.push({ name: "order", value: JSON.stringify($cart) });
    dataString.push({ name: "stripe", value: $rootScope.clientInfo.stripe_flag });

    var url = $rootScope.APIpath + "/orders/"+$rootScope.clientId+"/submit";
    $http.post(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      // //console.log("addOrder", response.data, status);
      $rootScope.enableShield();
      $submit.removeClass('processing');
			form.removeClass("processing");
		  if (response.data.error) {
        var $errorMsg;
        switch (response.data.message) {
          case "soldout": // this case is also returned if the quantity in the cart exceeds the quantity left to purchase.
            $errorMsg = $rootScope.text.soldOutCart;
            break;
          default:
            $errorMsg = response.data.message;
            break;
        }
        $error.html($errorMsg).show();
      } else {
        // set the status of the order, if it requires payment
        if ($rootScope.clientInfo.stripe_flag == 1) {
          AnalyticsService.registerEvent("cart", "sent-reqPayment", response.data.order_id);
        } else {
          $this.setOrder(response.data.order_id);
          AnalyticsService.registerEvent("cart", "sent", response.data.order_id);
        }
      }
      //console.log("order added", $rootScope.cart);
      deferred.resolve(response.data);
    }, function(response, status) {
      //console.log("addRating ERROR", data, status);
      $error.html(response.data.message).show();
      $rootScope.enableShield();
      $submit.removeClass('processing');
      form.removeClass("processing");
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  // add the order id to the localstorage, so that we can track it.
  this.setOrder = function(order_id) {
    //console.log("SETORDER:", order_id);
    $rootScope.cart = null;
    delete $localStorage.cart;
    var $orders = {};
    if ($localStorage.orders) {
      $orders = JSON.parse($localStorage.orders);
    }
    if (!$orders.active) {
      $orders.active = [];
    }
    $orders.active.push(order_id);
    $localStorage.orders = JSON.stringify($orders);
    $this.updateActiveOrder(order_id);
  }

  this.checkCompletedOrders = function() {
    //console.log("checkCompletedOrders");
    // since there's now an api key, a user, grab the "completed" orders and associate them with the user and remove them from the localstorage json string
    if ($localStorage.orders) {
      var $orders = JSON.parse($localStorage.orders);
      if ($orders.completed) {
        $rootScope.completedOrders = $orders.completed;
        //console.log("checkCompletedOrders", $rootScope.completedOrders);
        if ($rootScope.userDetails) {
          for (var $co in $orders.completed) {
            var $order_id = $orders.completed[$co];
            $this.getOrderHistory("update completed");
            $this.getOrderStatus($order_id).then(function(data) {
              // if the order doesn't have user_id but they are now logged in, set it and re-set the status (to trigger notification if needed)
              if (!data.user_id && $rootScope.userDetails) {
                $this.updateOrder($order_id, "user_id", $rootScope.userDetails.id).then(function() {
                  $this.updateOrder($order_id, "status", data.status).then(function() {
                    //console.log("update user_id and status", data);
                  });
                });
              }
              // update the local order storage.
              if ($orders.completed) {
                var $order_index = $orders.completed.indexOf(data.order_id);
                $orders.completed.splice($order_index, 1);
              }
              if (!$orders.completed.length) {
                delete $orders.completed;
              }
              $localStorage.orders = JSON.stringify($orders);
              if ($.isEmptyObject($localStorage.orders)) {
                $localStorage.orders = null;
                delete $localStorage.orders;
              }
            }, function(e) {
              //console.log("error", e);
            });
          }
        }
      }
    }
  }

  this.checkForTickets = function() {
    //console.log("checkForTickets");
    $rootScope.tickets = [];
    if ($localStorage.orders) {
      //console.log("localStorage.orders, trackTickets", $localStorage.orders);
      var $orders = JSON.parse($localStorage.orders);
      var $allLocalOrders = ($orders.complete && $orders.complete.length) ? $orders.active.concat($orders.complete) : $orders.active;
      //console.log($allLocalOrders);
      var $orderDetails = [];
      for (var $b in $allLocalOrders) {
        //console.log($allLocalOrders[$b], "look through this order, localStorage");
        $this.checkActiveOrderProducts($allLocalOrders[$b]);
      }
    }
    if ($rootScope.userDetails) {
      // just get completed orders.
      $this.getOrderHistory().then(function(data) {
        //console.log("getOrderHistory, trackTickets");
        $orders = data;
        for (var $a in $orders) {
          //console.log($orders[$a].id, "look through this order", $orders[$a]);
          $order = JSON.parse($orders[$a].json_obj);
          if ($order.types.indexOf("ticket") > -1) {
            //console.log($orders[$a].id, "order has tickets", $order);
            //console.log($orders[$a].id, "look through the products", $order.products);
            $this.checkOrderProducts($orders[$a].id, $order);
          } else {
            //console.log($orders[$a].id, "this order does not have tickets");
          }
        }
      });
    }
  }

  this.checkActiveOrderProducts = function($order_id) {
    $this.getOrderReceipt($order_id).then(function(data) {
      var $order = JSON.parse(data.json_obj);
      //console.log($order_id, "look through the products, localStorage", $order.products);
      $this.checkOrderProducts($order_id, $order);
    });
  }

  this.checkOrderProducts = function($order_id, $order) {
    DataService.products().then(function() {
      //console.log($order_id, "checkOrderProducts");
      for (var $pro in $order.products) {
        //console.log($order_id, "this is a product", $order.products[$pro]);
        $this.checkProductType($order_id, $order.products[$pro]);
      }
    });
  }

  this.checkProductType = function($order_id, $product) {
    DataService.getProductFirst($product.id).then(function(data) {
      //console.log($order_id, "got the product", data);
      if (data.product_type === "ticket") {
        var $variation;
        for (var a = 0; a < data.variations.length; a++) {
          if (data.variations[a].id == $product.variation) {
            $variation = data.variations[a];
          }
        }
        var $ticket = {
          "order_id": $order_id,
          "product": $product,
          "data": data,
          "variation": $variation
        }
        $rootScope.tickets.push($ticket);
        //console.log($order_id, "tickets", $rootScope.tickets);
      } else {
        //console.log($order_id, "this is not a ticket");
      }
    });
  }

  this.checkActiveOrders = function() {
    //console.log("checkActiveOrders");
    // if there's an active order in the localstorage json string, check it's status and display in a separate page
    //console.log("$localStorage.orders", $localStorage.orders);
    if ($localStorage.orders) {
      var $orders = JSON.parse($localStorage.orders);
      //console.log("$orders", $orders);
      if ($orders.active) {
        //console.log("$orders.active", $orders.active);
        for (var $co in $orders.active) {
          //console.log("ACTIVE!",$orders.active[$co]);
          $this.updateActiveOrder($orders.active[$co]);
        }
      }
      if ($orders.completed) {
        $this.checkCompletedOrders();
      }
    }
  }

  // if the active order has an updated status, reflect it and update any localstorage
  this.updateActiveOrder = function($order_id) {
    //console.log("GET UPDATE:", $order_id);
    $this.getOrderStatus($order_id).then(function(data) {
      if (!$rootScope.activeOrders) {
        $rootScope.activeOrders = {};
      }
      $rootScope.activeOrders["o_"+$order_id] = data;
      var now = new Date().valueOf();
      var estimate = new Date(data.estimate).valueOf();
      // if past the scheduled pick up date, and it wasn't ALREADY complete or cancelled, mark it as complete
      if (now >= estimate && data.status != "complete" && data.status != "cancelled") {
        data.status = "complete";
      }
      if (!data.user_id && $rootScope.userDetails) {
        //console.log("updateActiveOrder", $rootScope.userDetails.id);
        $this.updateOrder($order_id, "user_id", $rootScope.userDetails.id);
      }
      if (data.status != "complete" && data.status != "cancelled") {
        setTimeout(function() {
          $this.updateActiveOrder($order_id);
        }, 1000 * 60 * 0.5); // every 30.
      } else {
        //console.log("COMPLETE", $order_id, data);
        // remove completed order from active list, move to completed list.
        var $orders = JSON.parse($localStorage.orders);
        if ($orders.active) {
          var $order_index = $orders.active.indexOf($order_id);
          $orders.active.splice($order_index, 1);
        }
        if (!$orders.active.length) {
          delete $orders.active;
        }

        // if it's cancelled, it's still kind of "complete" add it so that it can be handled later.
        if (!$orders.completed) {
          $orders.completed = [];
        }
        $orders.completed.push($order_id);
        $localStorage.orders = JSON.stringify($orders);

        // remove immediately and show at the bottom
        delete $rootScope.activeOrders["o_"+$order_id];

        $this.checkCompletedOrders();
      }
      if ($.isEmptyObject($rootScope.activeOrders)) {
        delete $rootScope.activeOrders;
      }
    }, function(e) {
      //console.log("error", e);
    });
    //console.log("ACTIVE ORDERS:", $rootScope.activeOrders);
  };

  this.getOrderStatus = function($order_id) {
    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/orders/status/' + $order_id;
    $http.get(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("getMyRank", data);
      deferred.resolve(response.data.orders[0]);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.getOrderReceipt = function($order_id) {
    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/orders/receipt/' + $order_id;
    $http.get(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("getMyRank", data);
      deferred.resolve(response.data.orders[0]);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.getOrderProducts = function($order_id) {
    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/orders/products/' + $order_id;
    $http.get(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("getMyRank", data);
      deferred.resolve(response.data.products);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.updateOrder = function($order_id, name, data) {
    var dataString = [];
    dataString.push({ name: name, value: data });

    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/orders/'+$order_id;

    //console.log("UpdateOrder", url, dataString);
    $http.put(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("getMyRank", data);
      deferred.resolve(response.data);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.cancelOrder = function ($order_id) {
    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/orders/'+ $order_id + "/cancel";
    $http.post(
      url,
      {
      headers: {
        "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
        "Authorization" : $rootScope.apiKey,
        "Tbapikey" : $rootScope.apiKey
       }
     }
   ).then(function (response, status) {
     deferred.resolve(response.data);
   }, function (response) {
     deferred.reject(response.data);
   });
   return deferred.promise;
  }

  this.orderHistoryData = null;

  this.getOrderHistory = function($reason) {
    var deferred = $q.defer();

    if (!$rootScope.userDetails) {
      //console.log("not logged in... do not try to load it.");
      deferred.reject({'error':true});
    } else if ($this.orderHistoryData && !$reason) {
      //console.log("orderHistoryData already loaded");
      deferred.resolve($this.orderHistoryData);
    } else {
      var url = $rootScope.APIpath + '/orders/history';
      $http.get(
        url,
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
  			console.log("orderHistoryData", response.data, $reason);
  			$this.orderHistoryData = response.data.orders;
        deferred.resolve($this.orderHistoryData);
      }, function(response, status) {
    		if (response.data.authError == true) {
          $this.logout();
          try {
            //console.log("orderHistoryData", $rootScope.text.toastAuthError);
        	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
        	} catch(e) {}
    		}
        deferred.reject(response.data);
      });
    }

    return deferred.promise;
  }

  this.addRewardToCart = function($reward) {
    var $cart = [];
    //console.log("addRewardToCart", $reward);

    if ($localStorage.cart) {
      $cart['products'] = JSON.parse($localStorage.cart);
    } else {
      $cart['products'] = [];
    }

    //AnalyticsService.registerEvent("cart", "add reward", $reward.id);

    var $product = {};
    $product['type'] = "reward";
    $product['reward_id'] = $reward.id;
    $product['token'] = $reward.redeem_code;
    $product['value_points'] = $reward.reward_points;
    $product['quantity'] = 1;
    if ($reward) {
      $product['subtotal'] = parseFloat($reward.reward_value) * -1;
    } else {
      $product['subtotal'] = 0;
    }
    $cart["products"].push($product);

    $('nav#header #cart').addClass('added');
    setTimeout(function() {
      $('nav#header #cart').removeClass('added');
    }, 2000);

    $localStorage.cart = JSON.stringify($cart['products']);
  }

  this.removeProductFromCart = function($index, $product) {
    var $cart = [];
    //console.log("removeProductFromCart", $index, $product);

    if ($localStorage.cart) {
      $cart['products'] = JSON.parse($localStorage.cart);
    } else {
      $cart['products'] = [];
    }

    // although it says product, it's almost always a reward.
    //AnalyticsService.registerEvent("cart", "remove reward", $product.id);
    var obj = $cart['products'];
    obj.length = Object.keys(obj).length;
    obj.splice = [].splice;
    obj.splice($index,1);
    delete obj.length;
    delete obj.splice;

    $('nav#header #cart').addClass('added');
    setTimeout(function() {
      $('nav#header #cart').removeClass('added');
    }, 2000);

    console.log("$cart['products']", $cart['products']);
    $localStorage.cart = JSON.stringify($cart['products']);
  }

  this.checkAvailablePoints = function() {
    var deferred = $q.defer();
    if ($rootScope.cartRewardTotalPoints) {
      var url = $rootScope.APIpath + "/claim_check/"+$rootScope.cartRewardTotalPoints;
      $http.get(
        url,
        {
          headers: {
            "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
            "Authorization" : $rootScope.apiKey,
            "Tbapikey" : $rootScope.apiKey
          }
        }
      ).then(function(response, status) {
        //console.log("claim_check", response.data);
        deferred.resolve(response.data);
      }, function(response, status) {
        deferred.reject(response.data);
      });
    } else {
      deferred.resolve({ error: false });
    }

    return deferred.promise;
  };

  // STRIPE STUFF!

  this.createStripeCustomer = function(obj) {
    var deferred = $q.defer();

    var url = $rootScope.APIpath + "/stripe/customer";
    $http.post(
      url,
      $.param(obj),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      //console.log("stripe customer", response.data);
      deferred.resolve(response.data);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.getStripeCards = function() {
    var deferred = $q.defer();

    var url = $rootScope.APIpath + "/stripe/card/"+$rootScope.clientId+"/"+$localStorage.stripe_token;
    $http.get(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      //console.log("stripe get cards", response.data);
      deferred.resolve(response.data);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.addStripeCard = function(obj) {
    var deferred = $q.defer();

    var url = $rootScope.APIpath + "/stripe/card";
    $http.post(
      url,
      $.param(obj),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      //console.log("stripe card", response.data);
      deferred.resolve(response.data);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.deleteStripeCard = function(token, card) {
    var deferred = $q.defer();

    var url = $rootScope.APIpath + "/stripe/card/"+$rootScope.clientId+"/"+token+"/"+card;
    $http.delete(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      //console.log("stripe card", response.data);
      deferred.resolve(response.data);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.chargeStripe = function(obj) {
    var deferred = $q.defer();

    if ('plan' in obj) {
      var url = $rootScope.APIpath + "/stripe/subscription";
    } else {
      url = $rootScope.APIpath + "/stripe/charge";
    }

    $http.post(
      url,
      $.param(obj),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      //console.log("stripe charge", response.data);
      deferred.resolve(response.data);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.cancelSubscription = function(token) {
    var deferred = $q.defer();

    var url = $rootScope.APIpath + "/stripe/subscription/"+token;
    $http.delete(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
      //console.log("stripe cancel", response.data);
      deferred.resolve(response.data);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  // rewrite for stripe one-time charges
  this.checkStripeCoupon = function(code) {
    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/stripe/subscription_coupons/'+(code.toUpperCase());
    $http.get(
      url,
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			console.log("checkCoupon", response.data);//.data.stripe_response.data);
      deferred.resolve(response.data);
    }, function(response, status) {
		  //console.log("error: ",data.authError);
  		if (response.data.authError == true) {
        $this.logout();
        try {
      	  window.plugins.toast.showLongCenter($rootScope.text.toastAuthError, function(a){console.log('toast success: ' + a)}, function(b){alert('toast error: ' + b)});
      	} catch(e) {}
  		}
      deferred.reject(response);
    });

    return deferred.promise;
  }

  this.registerCouponToken = function(obj) {
    var dataString = [];
    dataString.push({ name: "client_id", value: $rootScope.clientId });

    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/stripe/customer/coupon';
    $http.put(
      url,
      $.param(obj),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			console.log("registerCouponToken", response);
      deferred.resolve(response.data);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }

  this.registerStripeToken = function(token) {
    var dataString = [];
    dataString.push({ name: "user_id", value: $rootScope.userDetails.id });
    dataString.push({ name: "token", value: token });

    var deferred = $q.defer();
    var url = $rootScope.APIpath + '/stripe/customer';
    $http.put(
      url,
      $.param(dataString),
      {
        headers: {
          "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
          "Authorization" : $rootScope.apiKey,
          "Tbapikey" : $rootScope.apiKey
        }
      }
    ).then(function(response, status) {
			//console.log("getMyRank", data);
      deferred.resolve(response.data);
    }, function(response, status) {
      deferred.reject(response.data);
    });

    return deferred.promise;
  }
}]);


trueBlue.service('LanguageService', ['$rootScope', '$timeout', '$localStorage', 'AnalyticsService', function($rootScope, $timeout, $localStorage, AnalyticsService) {
  var $this = this;

  this.text = new Array();

  this.text["ENG"] = {
    // HEADER
    headerLogin: "Login",
    headerScan: "Scan",
    headerCart: "Cart",
    headerQR: "",
    // MENU
    menu: "Menu",
    menuLoginRegister: "Login / Register",
    menuNews: "News",
    menuProducts: backTitle,
    menuTop10: "Top 10",
    menuLocations: "Locations",
    menuLocation: "Our Location",
    menuShortcutLocation: "Find Us",
    menuRewards: "Rewards",
    menuLeaderboard: "Leaderboard",
    menuShareApp: "Share App",
    menuFavourites: "Favourites",
    menuReviews: "Reviews",
    menuHistory: "History",
    menuOrders: "Orders",
    menuTickets: "My Tickets",
    // FORM FIELDS
    formAdd: "Add",
    formChange: "Change",
    formUpdate: "Update",
    formFacebookConnect: "Facebook Connect",
    formLogin: "E-mail Login",
    formEmail: "E-mail Address",
    formPassword: "Password",
    formLoginTo: "Login to my Account",
    formForgot: "Forgot your Password?",
    formDontHave: "Don't have an account?",
    formRegister: "Register",
    formName: "Name",
    formConfirmEmail: "Confirm E-mail",
    formConfirmPassword: "Confirm Password",
    formCreateAccount: "Create an Account",
    formReset: "Reset Password",
    formCurrentPass: "Current Password",
    formNewPass: "New Password",
    formConfirmNewPass: "Confirm New Password",
    formNewEmail: "New E-mail",
    formConfirmNewEmail: "Confirm New E-mail",
    // FORM MESSAGES
    formMsgIncorrectCred: "Login failed. Incorrect credentials.",
    formMsgError: "An error occurred. Please try again.",
    formMsgInvalidUsername: "Username must be a valid email address.",
    formMsgSuccessRegister: "You are successfully registered",
    formMsgError2: "Oops! An error occurred while registering.",
    formMsgExists: "Sorry, this user already exists.",
    formMsgResetError: "Reset failed. User not found.",
    formMsgNoLocation: "No matching location. Please try again.",
    formMsgIncorrectQR: "Incorrect QR Code.",
    formMsgScanOnce: "This code can only be scanned once. Please try a different code.",
    formMsgTooSoon: "You have scanned too recently. Please try again later.",
    formMsgInsufficient: "Insufficient Amount of Points. Sorry!",
    formRemoveReward: "Please remove a reward to continue.",
    formMsgEmailSent: "You have been sent an email.",
    formMsgEmailInvalid: "This email is invalid.",
    formMsgEmailNoMatch: "These emails do not match.",
    formMsgPhoneInvalid: "This phone number is invalid.",
    formMsgPasswordNoMatch: "These passwords do not match.",
    formMsgWrong: "Something went wrong...",
    // PAGES
    newsExpires: "Expires",
    leaderboardAll: "All",
    leaderboardRank: "Ranked ",
    leaderboardPointMonth: "this month",
    leaderboardTopMonth: "Top users this month",
    leaderboardTH: "th",
    leaderboardST: "st",
    leaderboardND: "nd",
    leaderboardRD: "rd",
    leaderboardNone: "No one is on the Leaderboard yet.<br>Be the first one!",
    leaderboardNotYet: "Not yet ranked...",
    locationRefresh: "Refresh your Location",
    locationNoneFound: "There are no locations found.",
    locationOpen: "Open",
    locationOpenUntil: "Open until",
    locationUntil: "until",
    locationClosed: "Closed",
    locationSearch: "Search Locations...",
    locationInvalid: "Invalid location, please go back and try again.",
    productSearchPre: "Search",
    productSearch: backSearch,
    productTitle: backTitle,
    productReview: "Login/Register to",
    productWriteReview: "write a review",
    productReviewNone: "No one has written a review yet!",
    productsNone: "There's nothing here.",
    searchNo: "Please try another keyword.",
    result: "result",
    results: "results",
    //
    addToCart: "Add to Cart",
    addedToCart: "Added to Cart",
    yourCart: "My Cart",
    updateCart: "Update Cart",
    removeCart: "Remove from cart",
    clearCart: "Clear Cart",
    orderDetails: "Order Details",
    submitCart: "Place Order!",
    cartOptions: "Options",
    cartOptional: "Optional",
    cartNoMax: "NO MAX",
    cartMax: "MAX", // MAX 3
    cartQuantity: "Quantity",
    cartTotal: "Total",
    cartSubtotal: "Subtotal",
    cartAddOption: "Add Option",
    cartCoupon: "Coupon",
    add: "Add",
    invalidCoupon: "This coupon is no longer valid.",
    emptyCart: "Your cart is empty!",
    cancel: "Cancel",
    continue: "Continue",
    paymentDetails: "Payment Details",
    enterPaymentDetails: "Enter Payment Details",
    finalizeOrder: "Finalize Order",
    formPhoneNumber: "Phone Number",
    pickupLocation: "Pick up Location",
    formNotes: "Special Instructions",
    orderClosed: "Sorry, this location is closed.",
    orderOpen: "Once you place your order, you will be notified when it is ready for pick-up.",
    orderClosing: "Sorry, this location is closing and is no longer accepting any orders.",
    item: "item",
    items: "items",
    ordersNone: "There are no active orders.",
    orderKind: "Order",
    orderViewReceipt: "View Receipt",
    orderPickedUpOn: "Your order was picked up on:",
    orderCancelledOn: "Your order was cancelled on:",
    addCard: "Add New Card",
    useCard: "View Saved Cards",
    stripePowered: "Payments powered by Stripe",
    selectACard: "Please select or add a new card.",
    minimumOrder: "The minimum for ordering is ",
    minimumDifference: "To continue, you need to add ",
    maximumOrder: "The maxmimum order is ",
    maximumDifference: "To continue, you need to remove ",
    addRewards: "Add Rewards",
    noLessThan0: "Your total cannot be less than 0",
    historyRefund: "Refund",
    purchaseTicket: "Register for Event",
    soldOut: "Sold Out!",
    soldOutCart: "Sorry, we do not have enough stock for this purchase. Please review your cart.",
    //
    pay_expire: "Expires: ",
    pay_name: "Name on card",
    pay_cardnum: "Card Number",
    pay_cvc: "CVC",
    pay_expiry: "Expiry",
    pay_save: "Save?",
    yes: "Yes",
    no: "No",
    //
    order_sent: "Your order has been sent.",
    order_sent_reqPayment: "This order requires payment before proceeding.",
    order_processing: "Your order is being prepared",
    order_minutes_start: "Your order will be ready in ",
    order_minutes_end: " minutes.",
    order_ready: "Your order is ready for pick-up!",
    order_complete: "Your order has been completed. Thank you!",
    order_minutes_start_over: "Sorry, your order is ",
    order_minutes_end_over: " minutes late.",
    order_picked_up: "Got it! Thanks!",
    order_cancelled: "This order has been cancelled.",
    order_status_sent: "Order sent",
    order_status_delay: "Order delayed",
    order_status_processing: "Order processing",
    order_status_ready: "Order ready",
    order_status_complete: "Order complete",
    order_status_cancelled: "Order cancelled",
    order_pickuptime: "Pick Up Time",
    potentialPoints: "Potential Points",
    order_picked_up_claim: "Got it! Claim points!",
    order_claim: "Claim points!",
    // subscriptions
    becomeAMember: "Become a Member",
    every: "Every",
    perday: "Daily",
    thisday: "Today",
    subday: "Subsequent days",
    pluralday: "days",
    perweek: "Weekly",
    thisweek: "This week",
    subweek: "Subsequent weeks",
    pluralweek: "weeks",
    permonth: "Monthly",
    thismonth: "This month",
    submonth: "Subsequent Months",
    pluralmonth: "months",
    peryear: "Annually",
    thisyear: "This year",
    subyear: "Subsequent years",
    pluralyear: "years",
    membership: "Membership",
    membershipCancel: "Cancel my Membership",
    membershipCancelConfirm: "Are you sure you want to cancel your membership?",
    yesCancel: "Yes, Cancel",
    //
    favouritesNone: "You have not favourited anything yet.",
    historyNone: "No history to display.<br><br>Start collecting points!",
    reviewNone: "You have not reviewed anything yet.",
    reviewPrompt: "What are your thoughts?",
    reviewAlready: "You have already reviewed this product.",
    reviewSubmit: "Submit Review",
    reviewPending: "Your review is pending approval",
    reviewDelete: "Delete this review",
    reviewDeleteConfirm: "Are you sure you want to delete this review?",
    top10Details: "Details",
    rewardsClaim: "Claim",
    claimText: "Tell your cashier you’d like to redeem a reward.",
    rewardsCollect: "collect points!",
    historyRegBonus: "Registration Bonus",
    settingsDelete: "Delete my account",
    settingsDeleteConfirm: "Are you sure you want to delete your account?",
    settingsFacebook: "You are connected with Facebook",
    settingsConnect: "Connect with Facebook",
    connectingToFB: "Connecting to Facebook...",
    close: "Close",
    notApplicable: "N/A",
    error: "Error",
    logout: "Logout",
    offlineMessage: "Your device seems to be offline or you have an unstable connection.<br><br>Please re-connect to the internet then try again.<br><br>Thank you!",
    myQR: "My QR Code",
    myQRnotes: "Show your code to the cashier to earn points and redeem your rewards.",
    myTicketsNone: "You have not purchased any tickets yet.",
    plansNone: "There are no available plans",
    plansIntro: "Here are the available Membership Plans!",
    // TOAST MESSAGE
    toastProcessing: "Processing...",
    toastAuthError: "Authentication Error. Please login again.",
    toastScanFail: "Scanning failed!",
    toastFacebookFail: "Facebook Login failed!",
    toastEarned: "You've earned",
    toastClaimed: "You've claimed a",
    requireCamAuthTitle: "Permissions Error",
    requireCamAuth: "To complete this action, please allow access to the camera and storage in your settings.",
    requireCamAuthGo: "Go to Settings",
    requireLocAuth: "To complete this action, please allow access to the location services in your settings.",
    requireNotificationAuth: "Please check your settings to make sure that notifications are allowed.",
    // SHARE
    shareMessage: "Hey! Check out this app!",
    shareSubject: "Points & Rewards!",
    // MISC
    welcome: "Welcome",
    welcomeNew1: "Join the",
    welcomeNew2: "Loyalty Program!",
    youHave: "You have",
    point: "point",
    points: "points",
    pointBalance: "Your Point Balance",
    scanForPoints: "Scan for Points",
    pointsToRedeem: "points to redeem",
    or: "OR",
    scanToClaim: "Scan to Claim",
    thankYou: "Thank you!",
    claimNumber: "claim number",
    showToCash: "please show this code to the cashier",
    notifications: "Notifications",
    notificationsOff: "Notifications are off",
    notificationsOn: "Notifications are on",
    km: "KM",
    showMore: "Show more...",
    nevermind: "Nevermind",
    yesDelete: "Yes, Delete",
    noon: "NOON",
    midnight: "MIDNIGHT",
    updateApp: "Get Update",
    // CUSTOM
    custom: customMessageArray
  };

  if (typeof backTitleFR != "undefined") {
  this.text["FRE"] = {
    // HEADER
    headerLogin: "Connexion",
    headerScan: "Scanner",
    headerCart: "Panier",
    headerQR: "",
    // MENU
    menuLoginRegister: "Se connecter / S’inscrire",
    menuNews: "Nouvelles",
    menuProducts: backTitleFR,
    menuTop10: "Top 10",
    menuLocations: "Emplacement",
    menuLocation: "Notre emplacement",
    menuShortcutLocation: "Trouve nous",
    menuRewards: "Récompenses",
    menuLeaderboard: "Classement",
    menuShareApp: "Partagez l'app",
    menuFavourites: "Favoris",
    menuReviews: "Commentaires",
    menuHistory: "Historie",
    menuOrders: "",
    menuTickets: "",
    // FORM FIELDS
    formAdd: "Ajouter",
    formChange: "",
    formUpdate: "",
    formFacebookConnect: "Connexion Facebook",
    formLogin: "Se connecter",
    formEmail: "Adresse courriel",
    formPassword: "Mot de passe",
    formLoginTo: "Se connecter à mon compte",
    formForgot: "Oublié votre mot de passé?",
    formDontHave: "Vous n’avez pas de compte?",
    formRegister: "S’inscrire",
    formName: "Nom",
    formConfirmEmail: "Confirmer votre courriel",
    formConfirmPassword: "Confirmer mot de passe",
    formCreateAccount: "Créer un compte",
    formReset: "Réinitialiser le mot de passe",
    formCurrentPass: "",
    formNewPass: "",
    formConfirmNewPass: "",
    formNewEmail: "",
    formConfirmNewEmail: "",
    // FORM MESSAGES
    formMsgIncorrectCred: "Connexion impossible. Authentification incorrecte.",
    formMsgError: "Une erreur s’est produite, veuillez réessayer.",
    formMsgInvalidUsername: "Nom d’utilisateur doit être une adresse courriel valide.",
    formMsgSuccessRegister: "Votre inscription est complète.",
    formMsgError2: "Oops! Une erreur s’est produite lors de l’inscription.",
    formMsgExists: "Désolé, cet utilisateur existe déja.",
    formMsgResetError: "Réinitialisation non complétée. Utilisateur inexistant.",
    formMsgNoLocation: "Aucun lieu correspondant, veuillez réessayer.",
    formMsgIncorrectQR: "Code QR Incorrect.",
    formMsgScanOnce: "Ce code ne peut qu’être utilisé qu’une seule fois, Veuillez utiliser un autre code.",
    formMsgTooSoon: "",
    formMsgInsufficient: "",
    formRemoveReward: "Please remove a reward to continue.",
    formMsgEmailSent: "Vous recevrez un courriel.",
    formMsgEmailInvalid: "Ce courriel est invalide.",
    formMsgEmailNoMatch: "Ces courriels ne correspondent pas.",
    formMsgPhoneInvalid: "",
    formMsgPasswordNoMatch: "Ces mots de passe ne correspondent pas.",
    formMsgWrong: "Échec...",
    // PAGES
    newsExpires: "Expire le",
    leaderboardAll: "Tous",
    leaderboardRank: "Classé ", // 1st = 1er
    leaderboardPointMonth: "ce mois-ci",
    leaderboardTopMonth: "Top des utilisateurs ce mois-ci",
    leaderboardTH: "er",
    leaderboardST: "er",
    leaderboardND: "er",
    leaderboardRD: "er",
    leaderboardNone: "Personne n’est qualifié au tableau.<br>Soyez le premier!",
    leaderboardNotYet: "Pas encore classé",
    locationRefresh: "Resaisissez votre localisation",
    locationNoneFound: "Il n’y a pas d’emplacement trouvé.",
    locationOpen: "Ouvert",
    locationOpenUntil: "Ouvert jusqu’à",
    locationUntil: "jusqu’à",
    locationClosed: "Fermé",
    locationSearch: "Emplacements de recherche...",
    locationInvalid: "Emplacement non valide, s'il vous plaît revenir en arrière et essayer à nouveau.",
    productSearchPre: "Rechercher",
    productSearch: backSearchFR,
    productTitle: backTitleFR,
    productReview: "S’inscrire/se connecter pour",
    productWriteReview: "commenter",
    productReviewNone: "Personne n’a écrit de commentaires encore!",
    productsNone: "Il n'y a rien ici.",
    searchNo: "Please try another keyword.",
    result: "result",
    results: "results",
    //
    addToCart: "",
    addedToCart: "Added to Cart",
    yourCart: "",
    updateCart: "",
    removeCart: "",
    clearCart: "",
    orderDetails: "",
    submitCart: "",
    cartOptions: "",
    cartOptional: "",
    cartNoMax: "",
    cartMax: "", // MAX 3
    cartQuantity: "",
    cartTotal: "",
    cartSubtotal: "",
    cartAddOption: "",
    cartCoupon: "",
    add: "",
    invalidCoupon: "",
    emptyCart: "",
    cancel: "",
    continue: "",
    paymentDetails: "",
    enterPaymentDetails: "",
    finalizeOrder: "",
    formPhoneNumber: "",
    pickupLocation: "",
    formNotes: "",
    orderClosed: "",
    orderOpen: "",
    orderClosing: "",
    item: "article",
    items: "articles",
    ordersNone: "There are no active orders.",
    orderKind: "Order",
    orderViewReceipt: "View Receipt",
    orderPickedUpOn: "Your order was picked up on: ",
    orderCancelledOn: "Your order was cancelled on:",
    addCard: "Add New Card",
    useCard: "View Saved Cards",
    stripePowered: "Payments powered by Stripe",
    selectACard: "Please select or add a new card.",
    minimumOrder: "The minimum for ordering is ",
    minimumDifference: "To continue, you need to add ",
    maximumOrder: "The maxmimum order is ",
    maximumDifference: "To continue, you need to remove ",
    addRewards: "Add Rewards",
    noLessThan0: "Your total cannot be less than 0",
    historyRefund: "Refund",
    //
    order_sent: "FR Order has been sent.",
    order_sent_reqPayment: "This order requires payment before proceeding.",
    order_processing: "Your order is being prepared",
    order_minutes_start: "FR Your order will be ready in ",
    order_minutes_end: " minutes.",
    order_ready: "FR Your order is ready for pick-up!",
    order_complete: "FR Your order has been completed. Thank you!",
    order_minutes_start_over: "FR Sorry, your order is ",
    order_minutes_end_over: " minutes overdue.",
    order_picked_up: "FR Got it! Thanks!",
    order_cancelled: "",
    order_status_sent: "",
    order_status_delay: "",
    order_status_processing: "",
    order_status_ready: "",
    order_status_complete: "",
    order_status_cancelled: "",
    order_pickuptime: "",
    potentialPoints: "Potential Points",
    order_picked_up_claim: "Got it! Claim my points!",
    // subscriptions
    becomeAMember: "Become a Member",
    every: "Every",
    perday: "Daily",
    thisday: "Today",
    subday: "Subsequent days",
    pluralday: "days",
    perweek: "Weekly",
    thisweek: "This week",
    subweek: "Subsequent weeks",
    pluralweek: "weeks",
    permonth: "Monthly",
    thismonth: "This month",
    submonth: "Subsequent Months",
    pluralmonth: "months",
    peryear: "Annually",
    thisyear: "This year",
    subyear: "Subsequent years",
    pluralyear: "years",
    membership: "Membership",
    membershipCancel: "Cancel my Membership",
    membershipCancelConfirm: "Are you sure you want to cancel your membership?",
    yesCancel: "Yes, Cancel",
    //
    favouritesNone: "Vous n’avez ajouté aucun favori.",
    historyNone: "Aucun historique.<br><br>Commencez à cumuler les points!",
    reviewNone: "Vous ne l'avez pas encore commenté sur rien.",
    reviewPrompt: "",
    reviewAlready: "",
    reviewSubmit: "",
    reviewPending: "",
    reviewDelete: "Delete this review",
    reviewDeleteConfirm: "Are you sure you want to delete this review?",
    top10Details: "Détails",
    rewardsClaim: "Réclamation",
    claimText: "",
    rewardsCollect: "accumuler des points!",
    historyRegBonus: "Bonus d'inscription",
    settingsDelete: "Supprimer mon compte",
    settingsDeleteConfirm: "Êtes-vous sûr de vouloir supprimer votre compte?",
    settingsFacebook: "Vous êtes connecté à Facebook",
    settingsConnect: "Connecter avec Facebook",
    connectingToFB: "Connexion à Facebook...",
    close: "Fermer",
    notApplicable: "S/O",
    error: "Erreur",
    logout: "Se Déconnecter",
    offlineMessage: "Votre appareil n'a pas de connexion ou celle-ci est intermittente.<br><br>Veuillez rétablir la connexion internet et réessayer.<br><br>Merci!",
    myQR: "",
    myQRnotes: "",
    myTicketsNone: "",
    plansNone: "",
    plansIntro: "",
    // TOAST MESSAGE
    toastProcessing: "En traitement...",
    toastAuthError: "Erreur d’authentification, Veuillez vous connecter à nouveau.",
    toastScanFail: "Numérisation échoué!",
    toastFacebookFail: "Échec de votre connexion Facebook!",
    toastEarned: "",
    toastClaimed: "",
    requireCamAuthTitle: "Permissions Error",
    requireCamAuth: "To complete this action, please allow access to the camera and storage in your settings.",
    requireCamAuthGo: "Go to Settings",
    requireLocAuth: "To complete this action, please allow access to the location services in your settings.",
    requireNotificationAuth: "Please check your settings to make sure that notifications are allowed.",
    // SHARE
    shareMessage: "Hé! Découvrez cette l'app!",
    shareSubject: "Points et récompenses!",
    // MISC
    welcome: "Welcome",
    welcomeNew1: "Join the",
    welcomeNew2: "Loyalty Program!",
    youHave: "Vous avez",
    point: "point",
    points: "points",
    pointBalance: "",
    scanForPoints: "",
    pointsToRedeem: "",
    or: "",
    scanToClaim: "",
    thankYou: "",
    claimNumber: "",
    showToCash: "",
    notifications: "",
    notificationsOff: "",
    notificationsOn: "",
    km: "KM",
    showMore: "",
    nevermind: "Nevermind",
    yesDelete: "Yes, Delete",
    noon: "NOON",
    midnight: "MIDNIGHT",
    updateApp: "Get Update",
    // CUSTOM
    custom: customMessageArrayFR
  };
  }

  if (typeof backTitleCH != "undefined") {
  this.text["CHI"] = {
    // HEADER
    headerLogin: "登錄",
    headerScan: "掃一掃",
    headerCart: "購物車",
    // MENU
    menu: "菜單",
    menuLoginRegister: "登錄/註冊",
    menuNews: "主題活動",
    menuTop10: "排行榜",
    menuLocations: "門市查詢",
    menuLocation: "我們店的位置",
    menuShortcutLocation: "找到我們",
    menuRewards: "積點獎勵",
    menuLeaderboard: "排行榜",
    menuShareApp: "分享應用程式",
    menuFavourites: "最愛",
    menuReviews: "檢閲",
    menuHistory: "記錄",
    menuOrders: "訂單",
    menuTickets: "",
    // FORM FIELDS
    formAdd: "加入",
    formChange: "更換",
    formUpdate: "更新",
    formFacebookConnect: "連接臉書",
    formLogin: "郵箱登錄",
    formEmail: "電子郵箱地址",
    formPassword: "密碼",
    formLoginTo: "登錄到我的帳戶",
    formForgot: "忘記密碼?",
    formDontHave: "未曾註冊帳戶?",
    formRegister: "註冊",
    formName: "姓名",
    formConfirmEmail: "再次確認郵箱",
    formConfirmPassword: "確認密碼",
    formCreateAccount: "建立帳戶",
    formReset: "重設密碼",
    formCurrentPass: "當前密碼",
    formNewPass: "新的密碼",
    formConfirmNewPass: "確認新的密碼",
    formNewEmail: "新的電子郵箱",
    formConfirmNewEmail: "確認新的電子郵箱",
    // FORM MESSAGES
    formMsgIncorrectCred: "登錄失敗。不正確的憑據。",
    formMsgError: "出現錯誤。請再試一次。",
    formMsgInvalidUsername: "用戶名必須用是有效電子郵箱地址。",
    formMsgSuccessRegister: "您已成功註冊",
    formMsgError2: "噢！註冊過程中出現錯誤。",
    formMsgExists: "抱歉，這個用戶名已被登記。",
    formMsgResetError: "重設失敗。用戶未被找到。",
    formMsgNoLocation: "沒有相對應的地點，請再試一次",
    formMsgIncorrectQR: "不正確的QR碼。",
    formMsgScanOnce: "這個碼只能被掃描一次，請換一個試試。",
    formMsgTooSoon: "您剛才已多次掃描，請稍候再試。",
    formMsgInsufficient: "抱歉！點數不足。",
    formRemoveReward: "Please remove a reward to continue.",
    formMsgEmailSent: "郵件已經發送給你。",
    formMsgEmailInvalid: "這是封無效的電子郵件。",
    formMsgEmailNoMatch: "這電子郵件不相符。",
    formMsgPhoneInvalid: "這個電話號碼無效。",
    formMsgPasswordNoMatch: "這密碼不相符。",
    formMsgWrong: "有東西出錯了…",
    // PAGES
    newsExpires: "過期",
    leaderboardAll: "全部",
    leaderboardRank: "排名",
    leaderboardPointMonth: "這個月",
    leaderboardTopMonth: "這個月的用戶排名",
    leaderboardTH: "第四",
    leaderboardST: "第一",
    leaderboardND: "第二",
    leaderboardRD: "第三",
    leaderboardNone: "未有用戶在排行榜上。<br>趕緊來搶當個第一名吧！",
    leaderboardNotYet: "未有排名…",
    locationRefresh: "請刷新一下你的地點",
    locationNoneFound: "地點未被找到",
    locationOpen: "營業中",
    locationOpenUntil: "營業至",
    locationUntil: "至",
    locationClosed: "休息中",
    locationSearch: "搜索地點",
    locationInvalid: "無效的地址，請回上一步再試一次",
    productSearchPre: "搜索",
    productReview: "登錄/註冊",
    productWriteReview: "寫封評論",
    productReviewNone: "未有人寫評論！",
    productsNone: "此處空白。",
    searchNo: "请尝试其他的关键字",
    result: "項結果",
    results: "項結果",
    //
    addToCart: "加到購物車",
    addedToCart: "已加入購物車",
    yourCart: "我的購物車",
    updateCart: "更新購物車",
    removeCart: "從購物車中移除",
    clearCart: "清除購物車",
    orderDetails: "訂單詳情",
    submitCart: "下訂單",
    cartOptions: "選擇",
    cartOptional: "可選擇的",
    cartNoMax: "无上限",
    cartMax: "最多個",
    cartQuantity: "數量",
    cartTotal: "總共",
    cartSubtotal: "小記",
    cartAddOption: "加入選項",
    cartCoupon: "",
    add: "",
    invalidCoupon: "",
    emptyCart: "您的購物車已空",
    cancel: "取消",
    continue: "繼續",
    paymentDetails: "付款細節",
    enterPaymentDetails: "輸入付款細節",
    finalizeOrder: "最終訂單",
    formPhoneNumber: "電話號碼",
    pickupLocation: "提取地點",
    formNotes: "特別指示",
    orderClosed: "抱歉，這個用戶名已被登記。",
    orderOpen: "妳下了訂單以後，你將會收到提取訂單的通知",
    orderClosing: "抱歉，這個店已關並且不再接受任何訂單",
    item: "物品",
    items: "物品",
    ordersNone: "沒有有效的訂單",
    orderKind: "訂單",
    orderViewReceipt: "查看收據",
    orderPickedUpOn: "您的訂單已被提取：",
    orderCancelledOn: "您的訂單已被取消：",
    addCard: "加入新卡",
    useCard: "查看已保存的卡",
    stripePowered: "Payments powered by Stripe",
    selectACard: "請選擇或加入新卡",
    minimumOrder: "最低消費",
    minimumDifference: "為了繼續，您需要加",
    maximumOrder: "最高消費",
    maximumDifference: "為了繼續，您需要減",
    addRewards: "",
    noLessThan0: "Your total cannot be less than 0",
    historyRefund: "Refund",
    //
    pay_expire: "有效期：",
    pay_name: "持卡人姓名",
    pay_cardnum: "卡號",
    pay_cvc: "認證編號",
    pay_expiry: "過期",
    pay_save: "保存",
    yes: "是",
    no: "否",
    //
    order_sent: "您的訂單已被提交",
    order_sent_reqPayment: "這個訂單在繼續進行前需要付款",
    order_processing: "您的訂單已準備好",
    order_minutes_start: "您的訂單將在",
    order_minutes_end: "分鐘內準備好",
    order_ready: "您的訂單已可以提取",
    order_complete: "您的訂單已完成。謝謝您！",
    order_minutes_start_over: "抱歉，您的訂單將會延遲",
    order_minutes_end_over: "分鐘",
    order_picked_up: "收到！謝謝！",
    order_cancelled: "這個訂單已被取消",
    order_status_sent: "訂單已提交",
    order_status_delay: "訂單延遲",
    order_status_processing: "訂單在進行中",
    order_status_ready: "訂單已準備好",
    order_status_complete: "訂單完成",
    order_status_cancelled: "訂單取消",
    order_pickuptime: "提取時間",
    potentialPoints: "Potential Points",
    order_picked_up_claim: "Got it! Claim my points!",
    // subscriptions
    becomeAMember: "Become a Member",
    every: "Every",
    perday: "Daily",
    thisday: "Today",
    subday: "Subsequent days",
    pluralday: "days",
    perweek: "Weekly",
    thisweek: "This week",
    subweek: "Subsequent weeks",
    pluralweek: "weeks",
    permonth: "Monthly",
    thismonth: "This month",
    submonth: "Subsequent Months",
    pluralmonth: "months",
    peryear: "Annually",
    thisyear: "This year",
    subyear: "Subsequent years",
    pluralyear: "years",
    membership: "Membership",
    membershipCancel: "Cancel my Membership",
    membershipCancelConfirm: "Are you sure you want to cancel your membership?",
    yesCancel: "Yes, Cancel",
    //
    favouritesNone: "您還未標註任何喜好",
    historyNone: "沒有記錄顯示。<br><br>趕緊來開始累積點數吧！",
    reviewNone: "您未曾檢閲任何東西。",
    reviewPrompt: "您有什麽想法？",
    reviewAlready: "您已瀏覽過這項產品",
    reviewSubmit: "提交評論",
    reviewPending: "您的評論正在等待審批。",
    reviewDelete: "刪除瀏覽",
    reviewDeleteConfirm: "您確定要刪除瀏覽嗎",
    top10Details: "詳細信息",
    rewardsClaim: "兌換",
    claimText: "請告知店員您想要領取獎勵。",
    rewardsCollect: "累積點數！",
    historyRegBonus: "註冊額外獎勵",
    settingsDelete: "刪除我的帳戶",
    settingsDeleteConfirm: "確認要刪除帳戶?",
    settingsFacebook: "您已和臉書連接上了",
    settingsConnect: "與臉書連接",
    connectingToFB: "正在連接到臉書…",
    close: "休息中",
    notApplicable: "未知",
    error: "錯誤",
    logout: "登出",
    offlineMessage: "您的設備似乎離綫或網絡不穩定。<br><br>請重新連接再試一次。<br><br>謝謝！",
    myQR: "我的二維條碼",
    myQRnotes: "請向店員展示您的二維條碼來收集點數和領取獎勵。",
    myTicketsNone: "",
    plansNone: "",
    plansIntro: "",
    // TOAST MESSAGE
    toastProcessing: "處理中…",
    toastAuthError: "認證出錯。請重新登錄",
    toastScanFail: "掃描失敗！",
    toastFacebookFail: "臉書登錄失敗！",
    toastEarned: "您已獲得",
    toastClaimed: "您已 換取",
    requireCamAuthTitle: "權限錯誤",
    requireCamAuth: "為了完成這個行動，請允許訪問你的設置中的相機和容量",
    requireCamAuthGo: "去設置",
    requireLocAuth: "為了完成這個行動，請允許訪問妳的設置中的定位服務",
    requireNotificationAuth: "請檢查您的設置已確保允許推送信息",
    // SHARE
    shareMessage: "嘿！來看看這個應用程序！",
    shareSubject: "點數和獎勵！",
    // MISC
    welcome: "歡迎",
    welcomeNew1: "加入",
    welcomeNew2: "!",
    youHave: "你有",
    point: "點",
    points: "點",
    pointBalance: "您的目前點數",
    scanForPoints: "點數掃描",
    pointsToRedeem: "點數兌換",
    or: "或",
    scanToClaim: "掃描兌換",
    thankYou: "謝謝！",
    claimNumber: "兌換號碼",
    showToCash: "請向收銀員展示這組代碼",
    notifications: "通知",
    notificationsOff: "關閉通知",
    notificationsOn: "開啟通知",
    km: "公里",
    showMore: "更多…",
    nevermind: "沒關係",
    yesDelete: "是的，刪除",
    noon: "否",
    midnight: "凌晨",
    updateApp: "Get Update",
    // CUSTOM
    custom: customMessageArrayCH
  };
  }
  //console.log("typeof backTitleCHT",typeof backTitleCHT);
  if (typeof backTitleCHT != "undefined") {
  this.text["CHT"] = {
    // HEADER
    headerLogin: "",
    headerScan: "",
    headerCart: "",
    headerQR: "",
    // MENU
    menuLoginRegister: "",
    menuNews: "",
    menuProducts: backTitleCHT,
    menuTop10: "",
    menuLocations: "",
    menuLocation: "",
    menuShortcutLocation: "",
    menuRewards: "",
    menuLeaderboard: "",
    menuShareApp: "分享軟件",
    menuFavourites: "",
    menuReviews: "",
    menuHistory: "",
    menuOrders: "",
    menuTickets: "",
    // FORM FIELDS
    formAdd: "",
    formChange: "",
    formUpdate: "",
    formFacebookConnect: "",
    formLogin: "",
    formEmail: "",
    formPassword: "",
    formLoginTo: "",
    formForgot: "",
    formDontHave: "",
    formRegister: "",
    formName: "",
    formConfirmEmail: "",
    formConfirmPassword: "",
    formCreateAccount: "",
    formReset: "",
    formCurrentPass: "",
    formNewPass: "",
    formConfirmNewPass: "",
    formNewEmail: "",
    formConfirmNewEmail: "",
    // FORM MESSAGES
    formMsgIncorrectCred: "",
    formMsgError: "",
    formMsgInvalidUsername: "",
    formMsgSuccessRegister: "",
    formMsgError2: "",
    formMsgExists: "",
    formMsgResetError: "",
    formMsgNoLocation: "",
    formMsgIncorrectQR: "",
    formMsgScanOnce: "",
    formMsgTooSoon: "",
    formMsgInsufficient: "",
    formRemoveReward: "Please remove a reward to continue.",
    formMsgEmailSent: "",
    formMsgEmailInvalid: "",
    formMsgEmailNoMatch: "",
    formMsgPhoneInvalid: "",
    formMsgPasswordNoMatch: "",
    formMsgWrong: "",
    // PAGES
    newsExpires: "",
    leaderboardAll: "",
    leaderboardRank: "", // 1st = 1er
    leaderboardPointMonth: "",
    leaderboardTopMonth: "",
    leaderboardTH: "",
    leaderboardST: "",
    leaderboardND: "",
    leaderboardRD: "",
    leaderboardNone: "",
    leaderboardNotYet: "",
    locationRefresh: "",
    locationNoneFound: "",
    locationOpen: "",
    locationOpenUntil: "",
    locationUntil: "",
    locationClosed: "",
    locationSearch: "",
    locationInvalid: "",
    productSearchPre: "",
    productSearch: backSearchCHT,
    productTitle: backTitleCHT,
    productReview: "",
    productWriteReview: "",
    productReviewNone: "",
    productsNone: "",
    searchNo: "",
    result: "",
    results: "",
    //
    addToCart: "",
    addedToCart: "",
    yourCart: "",
    updateCart: "",
    removeCart: "",
    clearCart: "",
    orderDetails: "",
    submitCart: "",
    cartOptions: "",
    cartOptional: "",
    cartNoMax: "",
    cartMax: "", // MAX 3
    cartQuantity: "",
    cartTotal: "",
    cartSubtotal: "",
    cartAddOption: "",
    cartCoupon: "",
    add: "",
    invalidCoupon: "",
    emptyCart: "",
    cancel: "",
    continue: "",
    paymentDetails: "",
    enterPaymentDetails: "",
    finalizeOrder: "",
    formPhoneNumber: "",
    pickupLocation: "",
    formNotes: "",
    orderClosed: "",
    orderOpen: "",
    orderClosing: "",
    item: "",
    items: "",
    ordersNone: "",
    orderKind: "",
    orderViewReceipt: "",
    orderPickedUpOn: "",
    orderCancelledOn: "Your order was cancelled on:",
    addCard: "",
    useCard: "",
    stripePowered: "",
    selectACard: "",
    minimumOrder: "The minimum for ordering is ",
    minimumDifference: "To continue, you need to add ",
    maximumOrder: "The maxmimum order is ",
    maximumDifference: "To continue, you need to remove ",
    addRewards: "Add Rewards",
    noLessThan0: "Your total cannot be less than 0",
    historyRefund: "Refund",
    //
    order_sent: "",
    order_sent_reqPayment: "",
    order_processing: "Your order is being prepared",
    order_minutes_start: "",
    order_minutes_end: "",
    order_ready: "",
    order_complete: "",
    order_minutes_start_over: "",
    order_minutes_end_over: "",
    order_picked_up: "",
    order_cancelled: "",
    order_status_sent: "",
    order_status_delay: "",
    order_status_processing: "",
    order_status_ready: "",
    order_status_complete: "",
    order_status_cancelled: "",
    order_pickuptime: "",
    potentialPoints: "Potential Points",
    order_picked_up_claim: "Got it! Claim my points!",
    // subscriptions
    becomeAMember: "Become a Member",
    every: "Every",
    perday: "Daily",
    thisday: "Today",
    subday: "Subsequent days",
    pluralday: "days",
    perweek: "Weekly",
    thisweek: "This week",
    subweek: "Subsequent weeks",
    pluralweek: "weeks",
    permonth: "Monthly",
    thismonth: "This month",
    submonth: "Subsequent Months",
    pluralmonth: "months",
    peryear: "Annually",
    thisyear: "This year",
    subyear: "Subsequent years",
    pluralyear: "years",
    membership: "Membership",
    membershipCancel: "Cancel my Membership",
    membershipCancelConfirm: "Are you sure you want to cancel your membership?",
    yesCancel: "Yes, Cancel",
    //
    favouritesNone: "",
    historyNone: "",
    reviewNone: "",
    reviewPrompt: "",
    reviewAlready: "",
    reviewSubmit: "",
    reviewPending: "",
    reviewDelete: "",
    reviewDeleteConfirm: "",
    top10Details: "",
    rewardsClaim: "",
    claimText: "",
    rewardsCollect: "",
    historyRegBonus: "",
    settingsDelete: "",
    settingsDeleteConfirm: "",
    settingsFacebook: "",
    settingsConnect: "",
    connectingToFB: "",
    close: "",
    notApplicable: "",
    error: "",
    logout: "",
    offlineMessage: "",
    myQR: "",
    myQRnotes: "",
    myTicketsNone: "",
    plansNone: "",
    plansIntro: "",
    // TOAST MESSAGE
    toastProcessing: "",
    toastAuthError: "",
    toastScanFail: "",
    toastFacebookFail: "",
    toastEarned: "",
    toastClaimed: "",
    requireCamAuthTitle: "",
    requireCamAuth: "",
    requireCamAuthGo: "",
    requireLocAuth: "",
    requireNotificationAuth: "",
    // SHARE
    shareMessage: "",
    shareSubject: "",
    // MISC
    welcome: "",
    welcomeNew1: "",
    welcomeNew2: "",
    youHave: "",
    point: "",
    points: "",
    pointBalance: "",
    scanForPoints: "",
    pointsToRedeem: "",
    or: "",
    scanToClaim: "",
    thankYou: "",
    claimNumber: "",
    showToCash: "",
    notifications: "",
    notificationsOff: "",
    notificationsOn: "",
    km: "",
    showMore: "",
    nevermind: "",
    yesDelete: "",
    noon: "NOON",
    midnight: "MIDNIGHT",
    updateApp: "Get Update",
    // CUSTOM
    custom: customMessageArrayCHT
  };
  }

  //console.log("typeof backTitleCHS",typeof backTitleCHS);
  if (typeof backTitleCHS != "undefined") {
  this.text["CHS"] = {
    // HEADER
    headerLogin: "",
    headerScan: "",
    headerCart: "",
    headerQR: "",
    // MENU
    menuLoginRegister: "",
    menuNews: "",
    menuProducts: backTitleCHS,
    menuTop10: "",
    menuLocations: "",
    menuLocation: "",
    menuShortcutLocation: "",
    menuRewards: "",
    menuLeaderboard: "",
    menuShareApp: "分享软件",
    menuFavourites: "",
    menuReviews: "",
    menuHistory: "",
    menuOrders: "",
    menuTickets: "",
    // FORM FIELDS
    formAdd: "",
    formChange: "",
    formUpdate: "",
    formFacebookConnect: "",
    formLogin: "",
    formEmail: "",
    formPassword: "",
    formLoginTo: "",
    formForgot: "",
    formDontHave: "",
    formRegister: "",
    formName: "",
    formConfirmEmail: "",
    formConfirmPassword: "",
    formCreateAccount: "",
    formReset: "",
    formCurrentPass: "",
    formNewPass: "",
    formConfirmNewPass: "",
    formNewEmail: "",
    formConfirmNewEmail: "",
    // FORM MESSAGES
    formMsgIncorrectCred: "",
    formMsgError: "",
    formMsgInvalidUsername: "",
    formMsgSuccessRegister: "",
    formMsgError2: "",
    formMsgExists: "",
    formMsgResetError: "",
    formMsgNoLocation: "",
    formMsgIncorrectQR: "",
    formMsgScanOnce: "",
    formMsgTooSoon: "",
    formMsgInsufficient: "",
    formRemoveReward: "Please remove a reward to continue.",
    formMsgEmailSent: "",
    formMsgEmailInvalid: "",
    formMsgEmailNoMatch: "",
    formMsgPhoneInvalid: "",
    formMsgPasswordNoMatch: "",
    formMsgWrong: "",
    // PAGES
    newsExpires: "",
    leaderboardAll: "",
    leaderboardRank: "", // 1st = 1er
    leaderboardPointMonth: "",
    leaderboardTopMonth: "",
    leaderboardTH: "",
    leaderboardST: "",
    leaderboardND: "",
    leaderboardRD: "",
    leaderboardNone: "",
    leaderboardNotYet: "",
    locationRefresh: "",
    locationNoneFound: "",
    locationOpen: "",
    locationOpenUntil: "",
    locationUntil: "",
    locationClosed: "",
    locationSearch: "",
    locationInvalid: "",
    productSearchPre: "",
    productSearch: backSearchCHS,
    productTitle: backTitleCHS,
    productReview: "",
    productWriteReview: "",
    productReviewNone: "",
    productsNone: "",
    searchNo: "",
    result: "",
    results: "",
    //
    addToCart: "",
    addedToCart: "",
    yourCart: "",
    updateCart: "",
    removeCart: "",
    clearCart: "",
    orderDetails: "",
    submitCart: "",
    cartOptions: "",
    cartOptional: "",
    cartNoMax: "",
    cartMax: "", // MAX 3
    cartQuantity: "",
    cartTotal: "",
    cartSubtotal: "",
    cartAddOption: "",
    cartCoupon: "",
    add: "",
    invalidCoupon: "",
    emptyCart: "",
    cancel: "",
    continue: "",
    paymentDetails: "",
    enterPaymentDetails: "",
    finalizeOrder: "",
    formPhoneNumber: "",
    pickupLocation: "",
    formNotes: "",
    orderClosed: "",
    orderOpen: "",
    orderClosing: "",
    item: "",
    items: "",
    ordersNone: "",
    orderKind: "",
    orderViewReceipt: "",
    orderPickedUpOn: "",
    orderCancelledOn: "Your order was cancelled on:",
    addCard: "",
    useCard: "",
    stripePowered: "",
    selectACard: "",
    minimumOrder: "The minimum for ordering is ",
    minimumDifference: "To continue, you need to add ",
    maximumOrder: "The maxmimum order is ",
    maximumDifference: "To continue, you need to remove ",
    addRewards: "Add Rewards",
    noLessThan0: "Your total cannot be less than 0",
    historyRefund: "Refund",
    //
    order_sent: "",
    order_sent_reqPayment: "",
    order_processing: "Your order is being prepared",
    order_minutes_start: "",
    order_minutes_end: "",
    order_ready: "",
    order_complete: "",
    order_minutes_start_over: "",
    order_minutes_end_over: "",
    order_picked_up: "",
    order_cancelled: "",
    order_status_sent: "",
    order_status_delay: "",
    order_status_processing: "",
    order_status_ready: "",
    order_status_complete: "",
    order_status_cancelled: "",
    order_pickuptime: "",
    potentialPoints: "Potential Points",
    order_picked_up_claim: "Got it! Claim my points!",
    // subscriptions
    becomeAMember: "Become a Member",
    every: "Every",
    perday: "Daily",
    thisday: "Today",
    subday: "Subsequent days",
    pluralday: "days",
    perweek: "Weekly",
    thisweek: "This week",
    subweek: "Subsequent weeks",
    pluralweek: "weeks",
    permonth: "Monthly",
    thismonth: "This month",
    submonth: "Subsequent Months",
    pluralmonth: "months",
    peryear: "Annually",
    thisyear: "This year",
    subyear: "Subsequent years",
    pluralyear: "years",
    membership: "Membership",
    membershipCancel: "Cancel my Membership",
    membershipCancelConfirm: "Are you sure you want to cancel your membership?",
    yesCancel: "Yes, Cancel",
    //
    favouritesNone: "",
    historyNone: "",
    reviewNone: "",
    reviewPrompt: "",
    reviewAlready: "",
    reviewSubmit: "",
    reviewPending: "",
    reviewDelete: "",
    reviewDeleteConfirm: "",
    top10Details: "",
    rewardsClaim: "",
    claimText: "",
    rewardsCollect: "",
    historyRegBonus: "",
    settingsDelete: "",
    settingsDeleteConfirm: "",
    settingsFacebook: "",
    settingsConnect: "",
    connectingToFB: "",
    close: "",
    notApplicable: "",
    error: "",
    logout: "",
    offlineMessage: "",
    myQR: "",
    myQRnotes: "",
    myTicketsNone: "",
    plansNone: "",
    plansIntro: "",
    // TOAST MESSAGE
    toastProcessing: "",
    toastAuthError: "",
    toastScanFail: "",
    toastFacebookFail: "",
    toastEarned: "",
    toastClaimed: "",
    requireCamAuthTitle: "",
    requireCamAuth: "",
    requireCamAuthGo: "",
    requireLocAuth: "",
    requireNotificationAuth: "",
    // SHARE
    shareMessage: "",
    shareSubject: "",
    // MISC
    welcome: "",
    welcomeNew1: "",
    welcomeNew2: "",
    youHave: "",
    point: "",
    points: "",
    pointBalance: "",
    scanForPoints: "",
    pointsToRedeem: "",
    or: "",
    scanToClaim: "",
    thankYou: "",
    claimNumber: "",
    showToCash: "",
    notifications: "",
    notificationsOff: "",
    notificationsOn: "",
    km: "",
    showMore: "",
    nevermind: "",
    yesDelete: "",
    noon: "NOON",
    midnight: "MIDNIGHT",
    updateApp: "Get Update",
    // CUSTOM
    custom: customMessageArrayCHS
  };
  }

  if (typeof backTitleSP != "undefined") {
    this.text["SP"] = {
      // HEADER
      headerLogin: "Inicia Sesión",
      headerScan: "Escanear",
      headerCart: "Carro",
      headerQR: "",
      // MENU
      menuLoginRegister: "Inicia sesión / Regístrate",
      menuNews: "Noticias",
      menuProducts: backTitleSP,
      menuTop10: "Top 10",
      menuLocations: "Ubicaciones",
      menuLocation: "Nuestra ubicación",
      menuShortcutLocation: "Encuéntranos",
      menuRewards: "Recompensas",
      menuLeaderboard: "Tabla de posiciones",
      menuShareApp: "Comparte la app",
      menuFavourites: "Favoritos",
      menuReviews: "Reseñas",
      menuHistory: "Historia",
      menuOrders: "",
      menuTickets: "",
      // FORM FIELDS
      formAdd: "Agrega tu",
      formChange: "Cambia tu",
      formUpdate: "Actualiza tu",
      formFacebookConnect: "Conecta con Facebook",
      formLogin: "Inicia sesión con tu Email",
      formEmail: "Dirección de Email",
      formPassword: "Contraseña",
      formLoginTo: "Inicia sesión con mi cuenta",
      formForgot: "¿Olvidaste tu contraseña?",
      formDontHave: "¿No tienes una cuenta?",
      formRegister: "Regístrate",
      formName: "Nombre",
      formConfirmEmail: "Confirma tu Email",
      formConfirmPassword: "Confirma tu contraseña",
      formCreateAccount: "Crea una cuenta",
      formReset: "Restablecer contraseña",
      formCurrentPass: "Contraseña actual",
      formNewPass: "Nueva contraseña",
      formConfirmNewPass: "Confirma nueva contraseña",
      formNewEmail: "Nuevo Email",
      formConfirmNewEmail: "Confirma nuevo Email",
      // FORM MESSAGES
      formMsgIncorrectCred: "Inicio de sesión fallido. Credenciales incorrectas.",
      formMsgError: "Ocurrió un error. Por favor inténtalo de nuevo.",
      formMsgInvalidUsername: "Usuario debe ser un correo electrónico válido",
      formMsgSuccessRegister: "Te registraste correctamente",
      formMsgError2: "Oops! Ocurrió un error al registrarte",
      formMsgExists: "Lo sentimos, este usuario ya existe.",
      formMsgResetError: "Reseteo fallido. El usuario no existe.",
      formMsgNoLocation: "No hay ubicación que coincida. Por favor inténtalo de nuevo.",
      formMsgIncorrectQR: "Código QR incorrecto",
      formMsgScanOnce: "",
      formMsgTooSoon: "Has escaneado hace muy poco. Por favor intenta de nuevo más tarde.",
      formMsgInsufficient: "Cantidad de puntos insuficiente. Lo sentimos!",
      formRemoveReward: "Please remove a reward to continue.",
      formMsgEmailSent: "Te hemos enviado un email.",
      formMsgEmailInvalid: "Este email es inválido.",
      formMsgEmailNoMatch: "Estos emails no coinciden",
      formMsgPhoneInvalid: "Este número de teléfono es inválido.",
      formMsgPasswordNoMatch: "Las contraseñas no coinciden.",
      formMsgWrong: "Algo salió mal...",
      // PAGES
      newsExpires: "Expira el",
      leaderboardAll: "Mostrar todos",
      leaderboardRank: "En la posición ", // 1st = 1er
      leaderboardPointMonth: "este mes",
      leaderboardTopMonth: "Mejores usuarios del mes",
      leaderboardTH: "th",
      leaderboardST: "st",
      leaderboardND: "nd",
      leaderboardRD: "rd",
      leaderboardNone: "No hay nadie en la tabla de posiciones todavía. Conviértete en el primero!",
      leaderboardNotYet: "Todavía no ha sido rankeado",
      locationRefresh: "Actualiza tu ubicación",
      locationNoneFound: "No se encontraron ubicaciones",
      locationOpen: "Abierto",
      locationOpenUntil: "Abierto hasta las",
      locationUntil: "hasta",
      locationClosed: "Cerrado",
      locationSearch: "Buscar ubicaciones...",
      locationInvalid: "Ubicación inválida, por favor vuelve atrás e intenta nuevamente.",
      productSearchPre: "Buscar",
      productSearch: backSearchSP,
      productTitle: backTitleSP,
      productReview: "Inicia sesión / Regístrate para",
      productWriteReview: "escribir una reseña",
      productReviewNone: "Nadie ha escrito una reseña todavía!",
      productsNone: "No hay nada acá",
      searchNo: "Por favor prueba otra palabra clave",
      result: "resultado",
      results: "resultados",
      //
      addToCart: "Agregar al carro",
      addedToCart: "Agregado al carro",
      yourCart: "Mi carro de compras",
      updateCart: "Actualizar carro",
      removeCart: "Eliminar del carro",
      clearCart: "Vaciar carro",
      orderDetails: "Detalles de la orden",
      submitCart: "Envía la orden",
      cartOptions: "Opciones",
      cartOptional: "Opcional",
      cartNoMax: "NO MAX",
      cartMax: "MAX", // MAX 3
      cartQuantity: "Cantidad",
      cartTotal: "Total",
      cartSubtotal: "Subtotal",
      cartAddOption: "Agregar opción",
      cartCoupon: "",
      add: "",
      invalidCoupon: "",
      emptyCart: "Tu carro está vacío!",
      cancel: "Cancelar",
      continue: "Continuar",
      paymentDetails: "Detalles del pago",
      enterPaymentDetails: "Ingresa detalles de pago",
      finalizeOrder: "Finalizar orden",
      formPhoneNumber: "Número de teléfono",
      pickupLocation: "Ubicación para recoger",
      formNotes: "Instrucciones especiales",
      orderClosed: "Lo sentimos, esta ubicación está cerrada.",
      orderOpen: "Una vez que envíes tu orden, serás notificado cuando esté lista para ser recogida.",
      orderClosing: "Lo siento, esta ubicación está cerrando y ya no acepta órdenes. ",
      item: "item",
      items: "items",
      ordersNone: "No hay órdenes activas.",
      orderKind: "Orden",
      orderViewReceipt: "Ver recibo",
      orderPickedUpOn: "Tu orden fue recogida en:",
      orderCancelledOn: "Your order was cancelled on:",
      addCard: "Agregar nueva tarjeta",
      useCard: "Ver tarjetas guardadas",
      stripePowered: "Pagos proporcionados por Stripe",
      selectACard: "Por favor selecciona o agrega una nueva tarjeta",
      minimumOrder: "The minimum for ordering is ",
      minimumDifference: "To continue, you need to add ",
      maximumOrder: "The maxmimum order is ",
      maximumDifference: "To continue, you need to remove ",
      addRewards: "Add Rewards",
      noLessThan0: "Your total cannot be less than 0",
      historyRefund: "Refund",
      //
      order_sent: "Tu orden fue enviada",
      order_sent_reqPayment: "Esta orden requiere pagarse antes de proceder.",
      order_processing: "Your order is being prepared",
      order_minutes_start: "Tu orden estará lista en ",
      order_minutes_end: " minutos.",
      order_ready: "Tu orden está lista para que la retires!",
      order_complete: "Tu orden fue completada. Gracias!",
      order_minutes_start_over: "Lo siento, tu orden se atrasó ",
      order_minutes_end_over: " minutos.",
      order_picked_up: "Entendido! Gracias!",
      order_cancelled: "",
      order_status_sent: "",
      order_status_delay: "",
      order_status_processing: "",
      order_status_ready: "",
      order_status_complete: "",
      order_status_cancelled: "",
      order_pickuptime: "",
      potentialPoints: "Potential Points",
      order_picked_up_claim: "Got it! Claim my points!",
      // subscriptions
      becomeAMember: "Become a Member",
      every: "Every",
      perday: "Daily",
      thisday: "Today",
      subday: "Subsequent days",
      pluralday: "days",
      perweek: "Weekly",
      thisweek: "This week",
      subweek: "Subsequent weeks",
      pluralweek: "weeks",
      permonth: "Monthly",
      thismonth: "This month",
      submonth: "Subsequent Months",
      pluralmonth: "months",
      peryear: "Annually",
      thisyear: "This year",
      subyear: "Subsequent years",
      pluralyear: "years",
      membership: "Membership",
      membershipCancel: "Cancel my Membership",
      membershipCancelConfirm: "Are you sure you want to cancel your membership?",
      yesCancel: "Yes, Cancel",
      //
      favouritesNone: "No has marcado nada como favorito todavía.",
      historyNone: "No hay historia que mostrar. <br><br>Empieza a recaudar puntos!",
      reviewNone: "No has escrito ninguna reseña todavía.",
      reviewPrompt: "¿Qué piensas?",
      reviewAlready: "ya has escrito una reseña para este producto.",
      reviewSubmit: "Enviar reseña",
      reviewPending: "Tu reseña está pendiente de aprobación",
      reviewDelete: "Elimina esta reseña",
      reviewDeleteConfirm: "¿Estás seguro de querer eliminar esta reseña?",
      top10Details: "Detalles",
      rewardsClaim: "Canjear",
      claimText: "Dile al cajero que quieres canjear una recompensa.",
      rewardsCollect: "Colecciona puntos!",
      historyRegBonus: "Bono de registración",
      settingsDelete: "Elimina mi cuenta",
      settingsDeleteConfirm: "¿Estás seguro de querer eliminar esta reseña?",
      settingsFacebook: "Estás conectado con Facebook",
      settingsConnect: "Conéctate con Facebook",
      connectingToFB: "Conectando con Facebook...",
      close: "Cerrar",
      notApplicable: "N/A",
      error: "Error",
      logout: "Cerrar sesión",
      offlineMessage: "Tu dispositivo parece no estar conectado a Internet o tienes una conexión inestable. Por favor conéctate de nuevo a Internet e intenta de nuevo. Gracias!",
      myQR: "Mi código QR",
      myQRnotes: "Muestra tu código al cajero para ganar puntos y canjear tus recompensas.",
      myTicketsNone: "",
      plansNone: "",
      plansIntro: "",
      // TOAST MESSAGE
      toastProcessing: "Procesando...",
      toastAuthError: "Error de autenticación. Por favor inicia sesión nuevamente.",
      toastScanFail: "Escaneo fallido!",
      toastFacebookFail: "El inicio de sesión con Facebook falló!",
      toastEarned: "Has ganado",
      toastClaimed: "Has canjeado un",
      requireCamAuthTitle: "Error de permisos",
      requireCamAuth: "Para completar esta acción, por favor permite acceso a la cámara y a almacenamiento en tu configuración.",
      requireCamAuthGo: "Ir a Configuración",
      requireLocAuth: "Para completar esta acción, por favor permite acceso a los servicios de localización en tu configuración.",
      requireNotificationAuth: "Por favor revisa tu configuración para asegurarte de que las notificaciones están encendidas.",
      // SHARE
      shareMessage: "Hola! Mira esta app!",
      shareSubject: "Puntos y Recompensas",
      // MISC
      welcome: "Bienvenido",
      welcomeNew1: "Únete a",
      welcomeNew2: "programa de lealtad!",
      youHave: "Tienes",
      point: "punto",
      points: "puntos",
      pointBalance: "Tu balance de puntos",
      scanForPoints: "Escanea para puntos",
      pointsToRedeem: "puntos para canjear",
      or: "O",
      scanToClaim: "Escanea para canjear",
      thankYou: "Gracias!",
      claimNumber: "Canjea el número",
      showToCash: "Por favor muestra este código al cajero",
      notifications: "Notificaciones",
      notificationsOff: "Notificaciones están apagadas",
      notificationsOn: "Notificaciones están encendidas",
      km: "KM",
      showMore: "Mostrar más",
      nevermind: "No importa",
      yesDelete: "Sí, elimina",
      noon: "NOON",
      midnight: "MIDNIGHT",
      updateApp: "Get Update",
      // CUSTOM
      custom: customMessageArraySP
    };
  }

  this.init = function() {
    if (!$rootScope.selectedLanguage) {
      if (typeof defaultLang != "undefined") {
        $rootScope.selectedLanguage = defaultLang;
      } else {
        $rootScope.selectedLanguage = "ENG";
      }
    }

    $this.switch($rootScope.selectedLanguage);

    $rootScope.$watch(function() {
      return $rootScope.selectedLanguage;
    }, function() {
      $this.switch($rootScope.selectedLanguage);
    }, true);
  };

  this.switch = function($lang) {
    //console.log("switch", $lang);
    $rootScope.text = $this.text[$lang];
    //window.localStorage.setItem('TBlanguage', $lang);
    $localStorage.TBlanguage = $lang;
    AnalyticsService.registerEvent("click", "language", $lang);
  }
}]);


trueBlue.filter('getYoutubeUrl', function() {
  return function(item) {
    var str = item;
    var split = str.split(":");
    return "http://www.youtube.com/embed/"+split[1]+"?rel=0&amp;showinfo=0&amp;html5=1&amp;enablejsapi=1";
  }
});

trueBlue.filter('getYoutubeVideoId', function() {
  return function(item) {
    var str = item;
    var split = str.split(":");
    return split[1];
  }
});

trueBlue.service('YoutubeService', ['$q', '$timeout', '$rootScope', 'AppService', function($q, $timeout, $rootScope, AppService) {
  var $this = this;
  var youtube = [];
  var inited = false;
  
  this.init = function() {
    //console.log("INIT YOUTUBE SERVICE");
    $this.youtube = [];

    if (!$this.inited) {
      $this.inited = true;

      $rootScope.$watch(function() {
        return $rootScope.deviceisready;
      }, function() {
        if ($rootScope.deviceisready) {
          //console.log("device is ready, init the pause function");
          document.addEventListener("pause", $this.pause, false);
          document.addEventListener("resume", $this.pause, false);
        }
      });

      $rootScope.$watch(function() {
        return $rootScope.newsFinished;
      }, function() {
        if ($rootScope.newsFinished) {
          //console.log("load Youtube JS");
          $this.loadJS();
        }
      });
    }
  }

  this.loadJS = function() {
    if (typeof(YT) == 'undefined' || typeof(YT.Player) == 'undefined') {
      async('http://www.youtube.com/iframe_api');

      window.onYouTubePlayerAPIReady = function() {
        $this.waitForPlayers();
      };
    } else {
      $this.waitForPlayers();
    }
  }

  this.waitForPlayers = function() {
    //console.log("NEWS FINISHED! watcher", $(".youtube[video_id]").length);
    $timeout(function() {
      //console.log("NEWS FINISHED! watcher", $(".youtube[video_id]").length, "timeout");
      $this.getPlayers();
    });
  }

  this.getPlayers = function() {
    $(".youtube[video_id]").each(function() {
      if (!$(this).data("youtube-setup")) {
        $(this).data("youtube-setup", true);
        var player = new YT.Player($(this).attr('id'), {
          videoId: $(this).attr('video_id'),
          playerVars: { 'autoplay':0, 'controls':1, 'rel':0, 'showinfo':0, 'html5':1, 'enablejsapi':1 },
        });
        //console.log(player);
        $this.youtube.push(player);
      }
    });
  }

  this.pause = function(e) {
    //console.log("PAUSE!",e);

    if ($this.youtube && $this.youtube.length) {
      for (var i = 0; i < $this.youtube.length; i++) {
        var player = $this.youtube[i];
        //console.log(e, player);
        if (player.getPlayerState() == 1) {
          player.pauseVideo();
          //console.log("PAUSED!");
        } else {
          //console.log("didn't need to pause :)");
        }
      }
    }
  }
}]);


trueBlue.service('BeaconService', ['$http', '$q', '$timeout', '$rootScope', 'AnalyticsService', '$interval', '$localStorage', function($http, $q, $timeout, $rootScope, AnalyticsService, $interval, $localStorage) {

  var $this = this;
  var beaconsInStore = [];
  var reportOutBeacons = [];
  var iBeaconRegions = [];
  var androidBeaconCheck = {};
  var checkLeftBeacons = {};
  // var tappBaseUrl = 'http://localhost:3000/api/v1';
  // var tappKey = "cXLbR143nZ9zRee58x6A";
  var tappBaseUrl = "http://"+((server == "live") ? "208.75.74.79" : "54.227.44.217")+"/api/v1";
  var tappKey = null;

  function isAndroid() {
    return device.platform === 'Android'?  true : false;
  }

  // Store the api key locally?

  var parametersForRequest = {};

  // watch for deviceready
  this.watch = function() {
    tappKey = $rootScope.clientInfo.tapp_flag;
    parametersForRequest =  {
      url: tappBaseUrl + "/external_beacon_hit",
      apiKey: "Token token=" + tappKey
    }
    if ($localStorage.beacons !== null) {
      beaconsInStore = $localStorage.beacons;
    }
    if (!beaconsInStore) {
      beaconsInStore = [];
    }
    $rootScope.$watch(function() {
      return $rootScope.deviceisready;
    }, function() {
      if ($rootScope.deviceisready) {
        $this.preinit();
      }
    });
  }

  this.preinit = function() {
    console.log("BEACON PRE-INIT");
    // Beacon STUFF
    if (typeof device !== "undefined" && typeof cordova !== "undefined" && isAndroid()) {
      cordova.plugins.locationManager.isBluetoothEnabled()
      .then(function(isEnabled){
        console.log("bluetooth isEnabled: " + isEnabled);
        if (!isEnabled) {
          // maybe ask for if they want to turn it on or not before turning it on
          cordova.plugins.locationManager.enableBluetooth();
        }
      })
      // .fail(function(e) { console.error(e); })
      // .done();

      $this.init();

      $this.getBeaconData().then(function (data) {
        $this.startBeaconDetection(data);
      }, function (err) {
        console.log(err);
      });
    }
  }

  // deviceready
  this.init = function() {
    if (typeof cordova === "undefined") {
      return false;
    }

      var delegate = new cordova.plugins.locationManager.Delegate();

      // required in iOS 8+
      // cordova.plugins.locationManager.requestWhenInUseAuthorization();
      // ask for user's permission for ibeacon detection.

      cordova.plugins.locationManager.requestAlwaysAuthorization()

      delegate.didDetermineStateForRegion = function (pluginResult) {

          if (!isAndroid) {
              reportOutForIOS(pluginResult);
          }
      };

      delegate.didStartMonitoringForRegion = function (pluginResult) {
          console.log('didStartMonitoringForRegion:', pluginResult);

      };

      delegate.didExitRegion = function(result){
          if(result){
              // in the header, the token should be this format "Token token='whatever the otken is' "
              if (isAndroid) {
                reportOutForAndroid(result);
              }
              console.log("EXITED REGION: " + JSON.stringify(result));
          } else {
              console.log("didExitRegion has no data.");
          }
      };

      delegate.didRangeBeaconsInRegion = function (pluginResult) {
            beaconInRange(pluginResult, isAndroid);
      };
      // var beaconRegion = new cordova.plugins.locationManager.BeaconRegion(identifier, uuid, major, minor);
      cordova.plugins.locationManager.setDelegate(delegate);

  }

  this.getBeaconData = function () {
    // fetch region data from server
    var counter = 0;
    var deferred = $q.defer();
    var url = tappBaseUrl + "/get_beacon_data";
    $http.get(url,
      {headers: {
        Authorization: parametersForRequest["apiKey"]}
      })
    .then(function (response, status) {
      deferred.resolve(response.data);
    }, function (err) {
      if (counter < 4) {
        $this.getBeaconData();
        counter ++;
      }else {
        deferred.reject(err);
      }
    });
    return deferred.promise;
  }

  this.startBeaconDetection = function (beaconData) {
    var beaconRegion;
    var brUuid = 'f7826da6-4fa2-4e98-8024-bc5b71e0893e';
    var brMinor = undefined;
    var brNotifyEntryStateOnDisplay = true;
    // var beaconRegions = $this.getBeaconData();
    for (var i = 0; i < beaconData.length; i++) {
      beaconRegion = new cordova.plugins.locationManager.BeaconRegion(beaconData[i].identifier,
      brUuid, beaconData[i].major_id,
      brMinor, brNotifyEntryStateOnDisplay);
      cordova.plugins.locationManager.startMonitoringForRegion(beaconRegion)
        .fail(function(e) { console.log(e); })
        .done();
      cordova.plugins.locationManager.startRangingBeaconsInRegion(beaconRegion)
        .fail(function(e) { console.log(e); })
        .done();
    }
  }

  function reportOutForIOS(pluginResult) {

    if(pluginResult.state === "CLRegionStateOutside"){
        reportLeft(pluginResult);
    }
  }

  function reportOutForAndroid(pluginResult) {
      if (androidBeaconCheck[pluginResult.region.major] !== undefined) {
        androidBeaconCheck[pluginResult.region.major] += 1;
      }else {
        androidBeaconCheck[pluginResult.region.major] = 1;
      }
      if (checkLeftBeacons[pluginResult.region.major] === undefined) {
          checkLeftBeacons[pluginResult.region.major] = 0;
      }
      $timeout(function () {
        if (androidBeaconCheck[pluginResult.region.major] !== 0) {
          var intervalId = $interval(function () {
            if (androidBeaconCheck[pluginResult.region.major] !== 0) {
              checkLeftBeacons[pluginResult.region.major] += 1;
            }else {
              checkLeftBeacons[pluginResult.region.major] = 0;
            }
            if (checkLeftBeacons[pluginResult.region.major] >= 5) {
              reportLeft(pluginResult);
              checkLeftBeacons[pluginResult.region.major] = 0;
              $interval.cancel(intervalId);
            }
          }, 500);
        }else {
          $interval.cancel(intervalId);
        }
      }, 1000);
  }



  function beaconInRange(pluginResult, isAndroid) {
      var beacons;
      var beaconFound = pluginResult.beacons;
      var timeNow = Date.now();
      var outBeacons = [];
      if (beaconFound.length > 0 ) {
          for (var i = 0; i < beaconFound.length; i++) {
            if (reportOutBeacons) {
              var matchOutBeacons = reportOutBeacons.find(function (b) {
                 return b.minor === beaconFound[i].minor;
                //  console.log(beaconFound[i].minor);
              })
            } else {
              matchOutBeacons = null;
            }
           if (!matchOutBeacons) {
            if (isAndroid) {
              if (androidBeaconCheck[beaconFound[i].major] !== undefined) {
                androidBeaconCheck[beaconFound[i].major] = 0 ;
              }
            }
            if (beaconsInStore) {
              var matchBeacon = beaconsInStore.find(function (beacon) {
                return beacon.minor === beaconFound[i].minor;
              });
            } else {
              matchBeacon = null;
            }
            // alert("matchBeacon from inrange" + matchBeacon);
            if (!matchBeacon) {
              if (beaconFound[i].proximity === "ProximityUnknown") {
                beaconFound[i]["unknown"] = 1;
              }else if (beaconFound[i].proximity === "ProximityFar") {
                beaconFound[i]["far"] = 1;
              }else {
                beaconFound[i]["inRange"] = 1;
              }
              beaconsInStore.push(beaconFound[i]);
            }else {
              if (matchBeacon.reported !== true) {
                matchBeacon["reported"] = true;
              }

              if (beaconFound[i].proximity === "ProximityUnknown") {
                if (matchBeacon["in"]) {
                  // out case
                  if (matchBeacon["unknown"] > 0) {
                    if (matchBeacon["far"] > 0) {
                      if (matchBeacon["unknown"]/matchBeacon["far"] > 3) {
                        // report out of range, and splice from local storage;
                        if (!matchBeacon["out"]) {
                          matchBeacon["out"] = true;
                          reportOut(matchBeacon);
                        }else {
                          return;
                        }
                     }
                    }else {
                      if (matchBeacon["unknown"] > 4) {
                        if (!matchBeacon["out"]) {
                          matchBeacon["out"] = true;
                          reportOut(matchBeacon);
                        }else {
                          return;
                        }
                      }
                    }
                    matchBeacon["unknown"] += 1;
                  }else {
                    matchBeacon["unknown"] = 1;
                  }
                }
              }else if (beaconFound[i].proximity === "ProximityFar") {
                if (matchBeacon["in"]) {
                  // out case
                  // if (matchBeacon["unknown"] > 0) {
                    if (matchBeacon["far"] > 0 ) {
                      matchBeacon["far"] += 1;
                      if (matchBeacon["far"] > 15) {
                        if (!matchBeacon["out"]) {
                          matchBeacon["out"] = true;
                          reportOut(matchBeacon);
                          // clear 'far ' so that, it wont come in again;
                        }else {
                          return;
                        }
                      }
                    }else {
                      matchBeacon["far"] = 1;
                    }
                  // }
                }
              }else {
                if (matchBeacon["inRange"] > 0) {
                  matchBeacon["inRange"] += 1;
                  if (matchBeacon["inRange"] > 3) {

                    if (!matchBeacon["recorded"]) {
                      // inBeacons.push(matchBeacon);
                      matchBeacon["recorded"] = true;
                      matchBeacon.timeStamp = Date.now();
                      matchBeacon["in"] = true;
                    }
                    matchBeacon["far"] = 0;
                    matchBeacon["unknown"] = 0;
                  }
                }else {
                  matchBeacon["inRange"] = 1;
                }
              }

            function reportOut(matchBeacon) {
              var timeNow = Date.now();
              var sameRegionCounter = 0;
              for (var i = 0; i < beaconsInStore.length; i++) {
                if (beaconsInStore[i].major === matchBeacon.major) {
                  if (beaconsInStore[i].minor !== matchBeacon.minor) {
                    sameRegionCounter += 1;
                  }
                }
              }
              if (sameRegionCounter === 0) {
                outBeacons.push(matchBeacon);
                reportOutBeacons.push(matchBeacon);
                $this.registerBeaconHit(matchBeacon);
                // $http
                //   .post(parametersForRequest["url"],
                //     {
                //       minor_id: matchBeacon.minor,
                //       entered: matchBeacon.timeStamp,
                //       exited: timeNow,
                //       // identifier: parametersForRequest["identifier"]
                //     },
                //     {headers: {
                //       Authorization: parametersForRequest["apiKey"]}
                //     }
                //   );
              }
             }

           }
          }
         }
          if (outBeacons.length > 0) {
            for (var i = 0; i < outBeacons.length; i++) {
              beaconsInStore.splice(beaconsInStore.indexOf(outBeacons[i]), 1);
            }
            $timeout(function () {
              for (var i = 0; i < outBeacons.length; i++) {
                reportOutBeacons.splice(reportOutBeacons.indexOf(outBeacons[i]), 1);
              }
            }, 2500);
          }
          $localStorage.beacons = beaconsInStore;
          // $window.localStorage.setItem('beacons', JSON.stringify(beaconsInStore));
    }
  }



  function reportLeft(pluginResult) {
    var counter;
    var leftRegion = pluginResult.region;
    var timeNow = Date.now();
    var matchedBeacons = [];
    //console.log("beaconsInStore", beaconsInStore);
      for (var i = 0; i < beaconsInStore.length; i++) {
        if (reportOutBeacons) {
          var matchOutBeacons = reportOutBeacons.find(function (b) {
            return b.minor === beaconsInStore[i].minor;
          })
        } else {
          matchOutBeacons = null;
        }
        if (!matchOutBeacons) {
          if (beaconsInStore[i].major === leftRegion.major && beaconsInStore[i].uuid === leftRegion.uuid) {
            if (beaconsInStore[i]["in"] && counter !== 1 ) {
              // send user id ($rootScope.userDetails.id) && token ($rootScope.token) && device id () with the request
              $this.registerBeaconHit(beaconsInStore[i]);
              counter = 1;
          }
          matchedBeacons.push(beaconsInStore[i]);
          reportOutBeacons.push(beaconsInStore[i]);
        }
      }
    }
    //console.log("matchedBeacons", matchedBeacons);
    if (matchedBeacons.length > 0) {
      for (var i = 0; i < matchedBeacons.length; i++) {
        beaconsInStore.splice(beaconsInStore.indexOf(matchedBeacons[i]), 1);
      }
      $localStorage.beacons = beaconsInStore;
      // $window.localStorage.setItem('beacons', JSON.stringify(beaconsInStore));
      $timeout(function () {
        for (var i = 0; i < matchedBeacons.length; i++) {
          reportOutBeacons.splice(reportOutBeacons.indexOf(matchedBeacons[i]), 1);
        }
      }, 2500);
    }
  }


  this.registerBeaconHit = function (beacon) {
    var counter = 0;
    var deferred = $q.defer();
    var dataString = [];
    var timeNow = Date.now();
    dataString.push({ name: "minor_id", value: beacon.minor });
    dataString.push({ name: "entered", value: beacon.timeStamp });
    dataString.push({ name: "exited", value: timeNow });
    if ($rootScope.token) {
      dataString.push({ name: "notification_token", value: $rootScope.token });
    }
    if ($rootScope.userDetails.id) {
      dataString.push({ name: "external_id", value: $rootScope.userDetails.id });
    }
    if (device) {
      dataString.push({ name: "device", value: $rootScope.udid });
    }

    $http.post(
      parametersForRequest["url"],
      $.param(dataString),
      {headers: {
        "Content-type" : "application/x-www-form-urlencoded; charset=utf-8",
        Authorization: parametersForRequest["apiKey"]}
      }
    ).then(function (response, status) {
      console.log("registerBeaconHit", response, status);
      deferred.resolve(status);
    }, function (err) {
      console.log("registerBeaconHit error", err);
      if (counter < 4) {
        $this.registerBeaconHit(beacon);
        counter ++;
      }else {
        deferred.reject(err);
      }
    });
    return deferred.promise;
  }

}]);


// CONTROLLERS ============================================

trueBlue.controller('loaderController', function($rootScope, $scope, $timeout, $location, $localForage, AppService, DataService, AnalyticsService) {
  $rootScope.currentParent = "loader";

  $rootScope.$watchGroup([function() {
    return $rootScope.done;
  },function() {
    return $rootScope.finished;
  }], function() {
    //console.log("loaderController... done?",$rootScope.done,"finished?",$rootScope.finished);
    if ($rootScope.done && $rootScope.finished) {
      $location.url('/');
    }
  }, true);

  //console.log("getUpdateList...");

  var $appVersion;
  AnalyticsService.getAppVersion().then(function(data) {
    if (data) {
      $appVersion = data;
      $localForage.getItem("c"+$rootScope.clientId).then(function(getData) {
        if (!getData || getData && getData.data != $appVersion) {
          $localForage.clear().then(function() {
            //console.log("cleared forage", getData, $appVersion, $localForage);
            continueLoading();
          });
        } else {
          //console.log("keep forage");
          continueLoading();
        }
      });
    } else {
      continueLoading();
    }
  }, function(e) {
    //console.log("error", e);
  });

  function continueLoading() {
    //console.log("continueLoading...", $appVersion);
    $localForage.setItem("c"+$rootScope.clientId,$appVersion);

    AppService.removeSplash();
    DataService.getUpdateList();

    $rootScope.loading_text = "Loading";

    $scope.one = function() {
      $scope.dots = ".";
      $timeout(function() { $scope.two(); }, 250);
    }

    $scope.two = function() {
      $scope.dots = "..";
      $timeout(function() { $scope.three(); }, 250);
    }

    $scope.three = function() {
      $scope.dots = "...";
      $timeout(function() { $scope.one(); }, 250);
    }

    $scope.dots = ".";
    $scope.one();

  }
});

trueBlue.controller('newsController', function($rootScope, $scope, $timeout, $localStorage, DataService, AppService, AnalyticsService, PushService, YoutubeService) {
  $rootScope.newsFinished  = false;
  $rootScope.currentParent = "news";
  $scope.showLimit = 4;
  $scope.newsDone = 0;

  $scope.tempNews = [];
  $scope.notifications = [];
  $scope.instagram = [];

  //console.log("newsController");
  AnalyticsService.registerEvent("load", "start news", new Date()*1);
  DataService.resolveClient().then(function(data) {

    if ($rootScope.clientInfo.youtube_flag) {
      YoutubeService.init();
    }

    DataService.getRegionDistances().then(function(data) {
      DataService.getClosestRegion().then(function() {
        //console.log("selectedRegion:", $rootScope.selectedRegion);

        if ($rootScope.notification) {
          PushService.showNotification();
        }

        $scope.$watchGroup([function() {
          return $rootScope.userDetails;
        },function() {
          return $rootScope.notification;
        }], function() {
          //console.log("watchGroup...");
          $scope.getNotifications();
        }, true);

        if ($rootScope.regions) {
          $scope.$watch(function() {
            return $rootScope.selectedRegion;
          }, function() {
            $scope.refreshRegion();
          }, true);
        } else {
          $scope.refreshRegion();
        }

        $('.content').scroll(function() {
          //console.log("content scrolling...", $('.content').scrollTop());
          if ($('.content')[0].scrollHeight - $('.content').scrollTop() - $('.content').outerHeight(true) <= 50) {
            //console.log("show more!");
            $scope.showMore();
          }
        });
      }, function(e) {
        //console.log("error", e);
      });
    }, function(e) {
      //console.log("error", e);
    });
  }, function(e) {
    //console.log("error", e);
  });

  $scope.refreshRegion = function() {
    DataService.news().then(function(data) {
      $scope.tempNews = resolveNews(data);//(data && data.news) ? data.news : [];
      //console.log("$scope.tempNews", $scope.tempNews);

      if ($rootScope.clientInfo.instagram_params) {
        var instaParams = $rootScope.clientInfo.instagram_params.split(",");  // THIS NEEDS TO BE DEPRECATED, but cannot. not yet.
        DataService.getInstagramFeed(instaParams[0],instaParams[1]).then(function(data) {
          $scope.instagram = data;
          //console.log("$scope.instagram", $scope.instagram);
          if ($scope.instagram.length) {
            $scope.tempNews = $scope.tempNews.concat($scope.instagram);
          }
          $scope.finishNews();
        }, function(e) {
          //console.log("error", e);
        });
      } else {
        $scope.finishNews();
      }
    }, function(e) {
      //console.log("error", e);
    });
  }

  function resolveNews($data) {
    var response = [];
    var now = new Date().getTime() / 1000;

    for ($item in $data.news) {
      $data.news[$item].video = ($data.news[$item].video) || null;
      // //console.log("$item", $data.news[$item].end_date, now);
      if (!$data.news[$item].end_date || $data.news[$item].end_date && $data.news[$item].end_date > now) {
        // //console.log("add $item", !$data.news[$item].end_date, ($data.news[$item].end_date), $data.news[$item].end_date > now);
        response.push($data.news[$item]);
      }
    }

    return response;
  }

  $scope.finishNews = function() {
    // check if record exists and at what state
    for ($news in $scope.tempNews) {
      var $state = $localStorage['NEWS_'+$scope.tempNews[$news].id];//window.localStorage.getItem('NEWS_'+$scope.tempNews[$news].id);
      $scope.tempNews[$news].state = ($state) ? $state : 0;
    }

    $scope.setState($scope.tempNews);
  }

  $scope.getNotifications = function() {
    DataService.getNotifications().then(function(data) {
      $scope.notifications = data;
      //console.log("$scope.notifications", $scope.notifications);

      // check if record exists and at what state
      for ($news in $scope.notifications) {
        var $state = $localStorage['NEWS_'+$scope.notifications[$news].id];//window.localStorage.getItem('NEWS_'+$scope.notifications[$news].id);
        $scope.notifications[$news].state = ($state) ? $state : 0;
      }

      // set the state to read if not already
      $scope.setState($scope.notifications);
    }, function(e) {
      //console.log("error", e);
    });
  };

  $scope.setState = function($array) {
    $scope.newsDone++;

    for ($news in $array) {
      if (!$array[$news]) { break; }
      var $state = $localStorage['NEWS_'+$array[$news].id];//window.localStorage.getItem('NEWS_'+$array[$news].id);
      if (!$state) {
        //window.localStorage.setItem('NEWS_'+$array[$news].id, 1);
        $localStorage['NEWS_'+$array[$news].id] = 1;
      }
    }

    if ($scope.newsDone >= 2) {
      // not completely reliable, but it will count news + notifications...
      //console.log($scope.tempNews, $scope.notifications);
      // scope.notifications will always have something (or be empty, but it's always loaded)
      $scope.news = $scope.tempNews.concat($scope.notifications);
      //console.log("NEWS FINISHED!", $scope.news);
      $rootScope.newsFinished = true;
      AnalyticsService.registerEvent("load", "finish news", new Date()*1);
    }
  }

  if (!$rootScope.newsShowLimit || $rootScope.newsShowLimit == 0) {
    $rootScope.newsShowLimit = $rootScope.defaultShowLimit;
  }

  $scope.showMore = function() {
    $rootScope.newsShowLimit += $rootScope.defaultShowLimit;
    YoutubeService.waitForPlayers();
  }

  $scope.closeArticle = function($event) {
    var $parent = $($event.currentTarget).closest('article');
    //window.localStorage.setItem('NEWS_'+$parent.attr('news_id'), 2);
    $localStorage['NEWS_'+$parent.attr('news_id')] = 2;
    $parent.slideUp();
  }
});

trueBlue.controller('productsController', function($rootScope, $scope, $routeParams, $filter, DataService, UserService, AnalyticsService) {
  $rootScope.currentParent = "products";
  $scope.searchWithin = null;
  $scope.selected = {};
  $scope.selected.region = DataService.getRegionDetails($rootScope.selectedRegion);
  // //console.log("$rootScope.selectedRegion", $rootScope.selectedRegion, "scope.selected.region", $scope.selected.region);

  if ($routeParams.categoryId && $routeParams.categoryId.charAt(0) == "m") {
    $scope.hideBackBar = true;
    $scope.categoryId = $routeParams.categoryId.slice(1);
  } else {
    $scope.categoryId = ($routeParams.categoryId) ? $routeParams.categoryId : "null";
  }

  if ($scope.categoryId && $scope.categoryId != "null") {
    $rootScope.currentParent += " "+$scope.categoryId;
  }

  DataService.resolveClient().then(function(data) {
    $scope.$watchGroup([function() {
      return $rootScope.userDetails;
    },function() {
      return $rootScope.selectedRegion;
    }], function() {
      UserService.getUserFavourites().then(function(data) {
        getData();
      }, function(data) {
        getData();
      });
    }, true);
  }, function(e) {
    //console.log("error", e);
  });

  $scope.saveQuery = function($ele) {
    $rootScope.previousQuery = $($ele.currentTarget).val();
    //console.log($rootScope.previousQuery);
  }

  function getCumulativeCount($cates,$cate) {
    var $count = $cate.product_count;
    for ($d in $cates) {
      if ($cates[$d].parent_id == $cate.id) {
        $count += $cates[$d].product_count;
        if ($cates[$d].child_count) {
          $cates[$d].cumulative_count = getCumulativeCount($cates,$cates[$d]);
        }
      }
    }
    //console.log("cat id", $cate.id, $count);
    return $count;
  }

  function getData() {
    if ($rootScope.previousQuery) {
      $scope.query = $rootScope.previousQuery;
      $rootScope.previousQuery = null;
    }

    DataService.products().then(function(data) {
      DataService.categories().then(function(data) {
        //console.log("productsController categories", data);
        var $categories = data;
        // get child categories
        if ($scope.categoryId != "null") {
          $scope.searchWithin = DataService.getCategoryName($scope.categoryId);
        }
        // populate categories.
        var $categoryArray = [];
        for ($c in $categories) {
          //console.log($categories[$c].child_count, $categories[$c].product_count);
          $categories[$c].cumulative_count = $categories[$c].product_count ? $categories[$c].product_count : 0;
          //console.log("cat id 1:", $categories[$c].id,  $categories[$c].product_count, $categories[$c].cumulative_count);
          if ($categories[$c].child_count) {
            $categories[$c].cumulative_count = getCumulativeCount($categories,$categories[$c]);
          }
          //console.log("cat id 2:", $categories[$c].id,  $categories[$c].product_count, $categories[$c].cumulative_count);
          if ($categories[$c].cumulative_count > 0) {
            if ($scope.categoryId == "null" && ($categories[$c].parent_id == "" || !$categories[$c].parent_id) || $categories[$c].parent_id == $scope.categoryId) {
              $categoryArray.push($categories[$c]);
            }
          }
          if ($scope.categoryId != "null" && $scope.categoryId == $categories[$c].id) {
            $scope.category = $categories[$c];
            //console.log("current category", $scope.category);
          }
          if ($categories[$c].id == $scope.categoryId && $categories[$c].parent_id) {
            //console.log("parent category", $categories[$c].parent_id);
            $rootScope.currentParent += " "+$categories[$c].parent_id;
          }
        }

        //console.log("cats", $categories);
        $scope.categories = $categoryArray;

        // this effects the app's data - does not require a scope apply afterwards.
        for ($p in DataService.productData) {
          if (UserService.userFavouritesList) {
            DataService.productData[$p].favourited = (UserService.checkFavourite(DataService.productData[$p].id) >= 0) ? true : false;
          } else {
            DataService.productData[$p].favourited = false;
          }
        }

        $scope.products = ($scope.categoryId != "null") ? DataService.filterProducts($scope.categoryId) : DataService.productData;

        //console.log("$scope.products", $scope.products);

        $scope.productsWpic = [];
        $scope.productsWOpic = [];
        for ($q in $scope.products) {
          if ($filter('checkRegion')($scope.products[$q])) {
            if ($scope.products[$q].image && $scope.products[$q].image != "") {
              $scope.productsWpic.push($scope.products[$q]);
            } else {
              $scope.productsWOpic.push($scope.products[$q]);
            }
          }
        }
      }, function(e) {
        //console.log("error", e);
      });
    }, function(e) {
      //console.log("error", e);
    });
  }

  $scope.thumbBack = function($product) {
    if ($product.image) {
      //console.log("thumbBack", $product.id, $product.image);
      var a = $product.image;
      var b = "300px_";
      var position = a.lastIndexOf('/')+1;
      var output = [a.slice(0, position), b, a.slice(position)].join('');

      return {
        'background-image': 'url("' + output + '")'
      };
    }
  }

  $scope.search = function($product){
    if (!$scope.query) {
      return true;
    }
    //console.log("search through:", $product, $product.product_desc);
    if ($product.product_name || $product.product_desc) {
      var $name = ($filter('getTranslation')($product.product_name, $rootScope.selectedLanguage));
      var $desc = ($filter('getTranslation')($product.product_desc, $rootScope.selectedLanguage));
      if (
        $name && $name.toLowerCase().indexOf($scope.query.toLowerCase())!=-1 ||
        $desc && $desc.toLowerCase().indexOf($scope.query.toLowerCase())!=-1
      ) {
        if ($filter('checkRegion')($product)) {
          return true;
        }
      }
    }
  };

  $scope.getCategoryName = function($catId){
    return DataService.getCategoryName($catId);
  }
});

trueBlue.controller('productDetailsController', function($rootScope, $scope, $routeParams, $timeout, $filter, $localStorage, DataService, UserService, AnalyticsService) {
  $rootScope.currentParent = "products";

  DataService.resolveClient().then(function(data) {
    getData();
  }, function(e) {
    //console.log("error", e);
  });

  $scope.categories = null;

  function getData() {
    DataService.categories().then(function(data) {
      $scope.categories = data;
      $scope.getBackTitle = function() {
        if ($routeParams.categoryId == "f") {
          return $rootScope.text.menuFavourites;
        } else if ($routeParams.categoryId == "r") {
          return $rootScope.text.menuReviews;
        } else if ($routeParams.categoryId == "t") {
          return $rootScope.text.menuTop10;
        } else if ($routeParams.categoryId && $routeParams.categoryId != 0) {
          return $filter('getTranslation')(DataService.getCategoryName($routeParams.categoryId), $rootScope.selectedLanguage);
        } else {
          return $rootScope.text.productTitle;
        }
      }

      if ($routeParams.categoryId) {
        $rootScope.currentParent += " "+$routeParams.categoryId;
        addCategoryParent($routeParams.categoryId);
      }
    }, function(e) {
      //console.log("error", e);
    });

    function addCategoryParent($id) {
      for ($c in $scope.categories) {
        if ($scope.categories[$c].id == $id) {
          if ($scope.categories[$c].parent_id) {
            $rootScope.currentParent += " "+$scope.categories[$c].parent_id;
            addCategoryParent($scope.categories[$c].parent_id);
          }
          return false;
        }
      }
    }

    DataService.products().then(function(data) {
      DataService.getProductFirst($routeParams.productId).then(function(data) {
        $scope.product = data;
        //console.log("productDetails", data);
        // //console.log("productDetails", data);
        // //console.log("clientInfo", $rootScope.clientInfo, $rootScope.clientInfo.order_flag);
        // //console.log("DATA clientInfo", DataService.clientInfo, DataService.clientInfo.order_flag);
        // //console.log("getProductVariations", $scope.product, $scope.product.variations.length);
        $scope.keepUpdated = false;
        $scope.purchaseAvailable = false;

        // determine if a variation has a quantity, if it does, reload the product variation everytime this page is loaded.
        if ($scope.product.variations) {
          for($vari in $scope.product.variations) {
            if ($scope.product.variations[$vari].quantity && !$scope.keepUpdated) {
              //console.log("has quantity!");
              $scope.keepUpdated = true;
            }
            if ($scope.product.variations[$vari].purchase_flag === 1 && !$scope.purchaseAvailable) {
              //console.log("something can be purchased!");
              $scope.purchaseAvailable = true;
            }
          }
        }

        //console.log("$scope.keepUpdated", $scope.keepUpdated, "$scope.purchaseAvailable", $scope.purchaseAvailable);

        if (!$scope.product.variables || !$scope.product.variations || $scope.keepUpdated === true) {
          //console.log("pre getProductVariations");
          DataService.getProductVariations($routeParams.productId).then(function(data) {
            $scope.product.variations = data.variations;
            $scope.product.variables = data.variables;
            //console.log("getProductVariations", $scope.product);
            for ($v in $scope.product.variations) {
              var q = parseInt($scope.product.variations[$v].quantity);
              var s = parseInt($scope.product.variations[$v].sold);
              var r = "";
              if (s >= q) {
                r = $rootScope.text.soldOut;
              } else {
                r = "<strong>" + (q-s) + "</strong> out of <strong>" + q + "</strong> remaining";
              }
              $scope.product.variations[$v].quantityStr = r;
            }
            $timeout(function() {
              $scope.$apply();
            });
          }, function(e) {
            //console.log("error", e);
          });
        }

        UserService.getProductRatings($scope.product.id).then(function(data) {
          $scope.ratings = data;
          for ($r in $scope.ratings) {
            if ($scope.ratings[$r].user_fb_id && !$scope.ratings[$r].user_image) {
              $scope.ratings[$r].user_image = "https://graph.facebook.com/"+$scope.ratings[$r].user_fb_id+"/picture?height=100";
            }
          }
        }, function(e) {
          //console.log("error", e);
        });

        $scope.$watch(function() {
          return $rootScope.userDetails;
        }, function() {
          //console.log("hit");
          getFavourites();
        }, true);

        $scope.$watch(function() {
          return UserService.userRatings;
        }, function() {
          //console.log("hit2");
          getReviews();
        }, true);
      }, function(e) {
        //console.log("error", e);
      });
    }, function(e) {
      //console.log("error", e);
    });
  };

  $scope.toggleFav = function() {
    var $banner = $('.banner[rel="heart"]');
    if ($rootScope.userDetails) {
      if ($banner.hasClass('add')) {
        $banner.addClass('added');
      }
      $banner.removeClass('add removed').toggleClass('added').addClass('processing');
      if ($banner.hasClass('added')) {
        UserService.addFavourite($scope.product.id).then(function() { $banner.removeClass('processing'); });
        $scope.product.favourited = "added";
      } else {
        $banner.addClass('removed');
        UserService.removeFavourite($scope.product.id).then(function() { $banner.removeClass('processing'); });
        $scope.product.favourited = "";
      }
    } else {
      //$('section#forms').addClass('favourite').show();
      $rootScope.popupForm('favourite user');
    }
  }

  $scope.reviewForm = function() {
    if ($scope.product.image) {
      var a = $scope.product.image;
      var b = "100px_";
      var position = a.lastIndexOf('/')+1;
      var output = [a.slice(0, position), b, a.slice(position)].join('');
      $rootScope.setFormImage(output);
    }
    $('section#forms').attr('pid', $scope.product.id);//.addClass('review').show();
    $rootScope.popupForm('review user');
  }

  function getReviews() {
    UserService.getUserRatings().then(function() {
      UserService.checkRating($scope.product.id).then(function(data) {
        //console.log("check rating", $rootScope.userDetails, data);
        $scope.product.reviewed = data;
        if ($rootScope.userDetails) {
          var $section = $('section#forms');
          $('.spinner[rel="ratings"]', $section).hide();
          $('form[name="rating"] .rating > .icon', $section).removeClass('rated');
          if ($scope.product.reviewed.id) {
            $('.already', $section).show();
            $('form[name="rating"]', $section).hide();
          } else {
            $('.already', $section).hide();
            $('form[name="rating"]', $section).show();
          }
        }
      }, function(e) {
        //console.log("error", e);
      });
    }, function(e) {
      //console.log("error", e);
    });
  }

  function getFavourites() {
    UserService.getUserFavourites().then(function() {
      $scope.product.favourited = (UserService.checkFavourite($scope.product.id) >= 0) ? "add" : "";
    }, function() {
      // error
      $scope.product.favourited = null;
    });
  }

  $scope.getUserPic = function($rating) {
    if ($rating && $rating.user_image) {
      return {
        'background-image': 'url("' + $rating.user_image + '")',
        'background-size': 'cover',
        'background-position': 'center center'
      };
    }
  }

  $scope.addtocart = function() {
    var $cart = [];
    //console.log("ADD TO CART?", $scope.product);

    if ($localStorage.cart) {
      $cart['products'] = JSON.parse($localStorage.cart);
    } else {
      $cart['products'] = [];
    }

    // if there's only 1 variation and all variable sets only have 1 option, it is auto-selected and added.
    var $noOptions = true;
    if ($scope.product.variations.length > 1) {
      //console.log("$scope.product.variations.length", $scope.product.variations.length);
      $noOptions = false;
    }
    if ($noOptions) {
      if ($scope.product.variables.length) {
        //console.log("$scope.product.variables.length",$scope.product.variables.length);
        for (var $si in $scope.product.variables) {
          //console.log("$scope.product.variables[$si].items.length", $scope.product.variables[$s].items.length);
          if ($scope.product.variables[$si].items.length > 1 || $scope.product.variables[$si].items.required_flag == 0) {
            // if there's more than 1 option in the variable, ask them.
            // if there's a variable that's optional, we need to ask them...
            $noOptions = false;
            break;
          }
        }
      }
    }

    var $product = {};

    // otherwise, show the pop-up.
    if (!$noOptions) {
      $rootScope.tempProduct = $scope.product;
      if ($scope.product.image) {
        var a = $scope.product.image;
        var b = "100px_";
        var position = a.lastIndexOf('/')+1;
        var output = [a.slice(0, position), b, a.slice(position)].join('');
      }
      $rootScope.setFormImage((output) ? output : null);
      $rootScope.popupForm('add_to_cart');
    } else { // auto-add to cart, quantity 1
      $product['id'] = $scope.product.id;
      $product['variation'] = $scope.product.variations[0].id;
      var $subtotal = $scope.product.variations[0].value;
      if ($scope.product.variables.length) {
        $product['variable'] = {};
        for (var $s2 in $scope.product.variables) {
          var $spv2 = $scope.product.variables[$s2];
          $product['variable'][$spv2.set_id] = []
          $product['variable'][$spv2.set_id].push($spv2.items[0].id);
          if ($spv2.items[0].type == 0) {
            $subtotal += parseFloat($spv2.items[0].value);
          } else if ($spv2.items[0].type == 1) {
            var $p = scope.subtotal * (parseFloat($spv2.items[0].value)/100);
            $subtotal += $p;
          }
        }
      }

      //console.log("READY TO ADD TO CART!", $product);

      var $found = null;
      if ($cart['products'] && $cart['products'].length) {
        for (var $cp in $cart['products']) {
          var $p = $cart['products'][$cp];
          //console.log("COMPARE TO CART ITEMS", $p, $product);
          var $temp = {};
          $temp['id'] = $p.id;
          $temp['variation'] = $p.variation;
          $temp['variable'] = $p.variable;
          if (JSON.stringify($temp) == JSON.stringify($product)) {
            $cart['products'][$cp].quantity++;
            $cart['products'][$cp].subtotal = parseInt($cart['products'][$cp].subtotal) + parseInt($subtotal);
            $found = true;
            break;
          }
        }
      }

      if (!$found) {
        $product['quantity'] = 1;
        $product['subtotal'] = $subtotal;
        $cart["products"].push($product);
      }

      AnalyticsService.registerEvent("cart", "add", $scope.product.id);

      $('nav#header #cart').addClass('added');
      setTimeout(function() {
        $('nav#header #cart').removeClass('added');
      }, 2000);

      $localStorage.cart = JSON.stringify($cart['products']);
      //console.log($localStorage.cart);
    }
  }
});

trueBlue.controller('top10Controller', function($rootScope, $scope, $routeParams, $timeout, $location, DataService, UserService) {
  $scope.selectedRegionA = (!$routeParams.regionId || $routeParams.regionId == "null") ? null : $routeParams.regionId;
  $scope.categoryId = (!$routeParams.categoryId) ? null : $routeParams.categoryId;
  $scope.allRegions = $rootScope.regions;

  //console.log("selectedRegionA", $scope.selectedRegionA);
  //console.log("categoryId", $scope.categoryId);

  $rootScope.currentParent = "top10";
  if ($scope.categoryId) {
    $rootScope.currentParent += " "+$scope.categoryId;
  }

  DataService.resolveClient().then(function(data) {
    getData();
  }, function(e) {
    //console.log("error", e);
  });

  $scope.changeTop10Region = function() {
    //console.log("top10/"+$routeParams.rank+"/"+($rootScope.selectedRegion ? $rootScope.selectedRegion : 'null')+"/"+$scope.categoryId+"/");
    $location.url("top10/"+$routeParams.rank+"/"+($rootScope.selectedRegion ? $rootScope.selectedRegion : 'null')+"/"+$scope.categoryId+"/");
  }

  function getData() {
    DataService.top10($scope.selectedRegionA, $scope.categoryId).then(function(data) {
      $scope.length = data.length;
      $scope.current = $routeParams.rank;
      if ($scope.length > 0 && $routeParams.rank > $scope.length) {
        $routeParams.rank = $scope.length;
      }
      DataService.getTop10Details($routeParams.rank).then(function(data) {
        $scope.product = data;
        $scope.prev = $scope.product.rank - 1;
        $scope.current = $scope.product.rank;
        $scope.next = $scope.product.rank + 1;

        if ($scope.prev <= 0) {
          $scope.prev = $scope.length;
        }
        if ($scope.next > $scope.length) {
          $scope.next = 1;
        }

        UserService.getProductRatings($scope.product.id).then(function(data) {
          $scope.ratings = data;
          for ($r in $scope.ratings) {
            if ($scope.ratings[$r].user_fb_id && !$scope.ratings[$r].user_image) {
              $scope.ratings[$r].user_image = "https://graph.facebook.com/"+$scope.ratings[$r].user_fb_id+"/picture?height=100";
            }
          }
        }, function(e) {
          //console.log("error", e);
        });
      }, function() {
        $scope.product = 'null';
      });
    }, function(e) {
      //console.log("error", e);
    });
  };

  $scope.getUserPic = function($rating) {
    if ($rating && $rating.user_image) {
      return {
        'background-image': 'url("' + $rating.user_image + '")',
        'background-size': 'cover',
        'background-position': 'center center'
      };
    }
  }
});

trueBlue.controller('locationsController', function($rootScope, $scope, $timeout, $filter, AppService, DataService, AnalyticsService) {
  $rootScope.currentParent = "locations";

  AnalyticsService.registerEvent("load", "start locations", new Date()*1);
  DataService.resolveClient().then(function(data) {
    $scope.$watch(function() {
      return $rootScope.selectedRegion;
    }, function() {
      getData();
    }, true);
  }, function(e) {
    //console.log("error", e);
  });

  function getData() {
    DataService.locations().then(function(data) {
      $scope.locations = data;
      if (data.length) {
        calculateDistances();
      }
    }, function(e) {
      //console.log("error", e);
    });
  }

  $scope.gotoSettings = function(buttonIndex) {
    if (buttonIndex == 2) {
      AnalyticsService.registerEvent("location", "settings", null);
      cordova.plugins.diagnostic.switchToSettings(function(){
        //console.log("Successfully switched to Settings app");
      }, function(error){
        console.error("The following error occurred: "+error);
      });
    }
  }

  $scope.refreshGPS = function() {
    try {
      cordova.plugins.diagnostic.getLocationAuthorizationStatus(function(status){
        //console.log("refreshGPS", status);
        AnalyticsService.registerEvent("location", "gps status", status);
        if (status == "authorized_always" || status == "authorized_when_in_use" || status == "GRANTED") {
          $rootScope.GPS = null;
          calculateDistances();
        } else if (status != "not_determined") {
          navigator.notification.confirm(
            $rootScope.text.requireLocAuth, // message
            $scope.gotoSettings,            // callback to invoke with index of button pressed
            $rootScope.text.requireCamAuthTitle,           // title
            [$rootScope.text.nevermind,$rootScope.text.requireCamAuthGo]     // buttonLabels
          );
        } else {
          $rootScope.GPS = null;
          calculateDistances();
        }
      }, function(error) {
        //console.log("getLocationAuthorizationStatus error:", error);
        $rootScope.GPS = null;
        calculateDistances();
      });
    } catch(error) {
      $rootScope.GPS = null;
      calculateDistances();
    }
  }

  // does this work..?
  $(document).on("resume", $scope.onResume);

  $scope.onResume = function() {
    //console.log("resumed");
    $scope.refreshGPS();
  }
  //

  function calculateDistances() {
    AppService.requestLocation().then(function() {
      AppService.getLocation().then(function() {
        DataService.calculateDirectDistances().then(function(data) {
          // give the scope the data to generate the page
          $scope.locations = DataService.locationData;
          AnalyticsService.registerEvent("load", "finish locations", new Date()*1);
        }, function(e) {
          //console.log("error", e);
        });
      }, function(e) {
        //console.log("error", e);
      });
    }, function(e) {
      //console.log("error", e);
    });
  }

  $scope.refreshRegion = function() {
    AnalyticsService.registerEvent("load", "start region", new Date()*1);
    DataService.locations().then(function(data) {
      DataService.products().then(function(data) {
        if (DataService.locationData[0] && !DataService.locationData[0].distance) {
          //console.log("get coords");
          calculateDistances();
        } else {
          //console.log("here!");
          $scope.locations = DataService.locationData;
          AnalyticsService.registerEvent("load", "finish region", new Date()*1);
        }
      }, function(e) {
        //console.log("error", e);
      });
    }, function(e) {
      //console.log("error", e);
    });
  }

  $scope.checkTime = function($location) {
    return DataService.isItOpen($location);
  }

  $scope.search = function($location){
    if (!$scope.query) {
      return true;
    }
  //  //console.log("search through:", $location.location_name, $location.location_address, $location.location_city);
    if ($location.location_name || $location.location_address || $location.location_city) {
      var $name = ($filter('getTranslation')($location.location_name, $rootScope.selectedLanguage));
      var $addr = $location.location_address;
      var $city = $location.location_city;
      if (
        $name && $name.toLowerCase().indexOf($scope.query.toLowerCase())!=-1 ||
        $addr && $addr.toLowerCase().indexOf($scope.query.toLowerCase())!=-1 ||
        $city && $city.toLowerCase().indexOf($scope.query.toLowerCase())!=-1
      ) {
        if ($filter('checkRegion')($location)) {
        //  //console.log("GOOD!", $location);
          return true;
        }
      }
    }
    return false;
  };
});

trueBlue.controller('locationDetailsController', function($rootScope, $scope, $routeParams, $timeout, $filter, DataService, AppService, AnalyticsService) {
  $rootScope.currentParent = "locations";

  AnalyticsService.registerEvent("load", "start locations", new Date()*1);
  DataService.resolveClient().then(function(data) {
    DataService.locations($routeParams.locationId).then(function(data) {
      //console.log("getLocationDetails", $routeParams.locationId);
      DataService.getLocationDetails($routeParams.locationId).then(function(data) {
        //console.log("getLocationDetails", data);
        $scope.location = data;

        if (!$scope.location.status) {
          DataService.isItOpen($scope.location);
        }
        if (!$scope.location.distance) {
          calculateDistances();
        }
      }, function() {
        $scope.location = "null";
      });
    }, function(e) {
      //console.log("error", e);
    });
  }, function(e) {
    //console.log("error", e);
  });

  function calculateDistances() {
    AppService.requestLocation().then(function() {
      AppService.getLocation().then(function() {
        DataService.calculateDirectDistances().then(function(data) {
          DataService.getLocationDetails($routeParams.locationId).then(function(data) {
            $scope.location = data;
            AnalyticsService.registerEvent("load", "finish locations", new Date()*1);
          }, function(e) {
            //console.log("error", e);
          });
        }, function(e) {
          //console.log("error", e);
        });
      }, function(e) {
        //console.log("error", e);
      });
    }, function(e) {
      //console.log("error", e);
    });
  }

  $scope.checkTime = function($location) {
    return DataService.isItOpen($location);
  }

  $scope.getLogo = function($loc) {
    if ($loc && $loc.location_logo) {
      var a = $loc.location_logo;
      var b = "300px_";
      var position = a.lastIndexOf('/')+1;
      var output = [a.slice(0, position), b, a.slice(position)].join('');
      return {
        'background-image': 'url("' + output + '")',
        'background-size': 'contain',
        'background-position': 'center center',
        'background-color': $loc.location_logo_hex,
        'border-color': $loc.location_logo_hex
      };
    }
  }
});

trueBlue.controller('rewardsController', function($rootScope, $scope, $timeout, UserService, DataService) {
  $rootScope.currentParent = "rewards";

  DataService.resolveClient().then(function() {
    DataService.rewards().then(function(data) {
      $scope.rewards = data;
      //console.log("rewards", data);

      var $realMax = 0;
      for ($reward in $scope.rewards) {
        //console.log("reward_points...", $scope.rewards[$reward].reward_points, Number($scope.rewards[$reward].reward_points) > $realMax);
        if (Number($scope.rewards[$reward].reward_points) > $realMax) {
          $realMax = Number($scope.rewards[$reward].reward_points);
        }
      }

      $scope.max = Math.round($realMax*1.25);

      $scope.$watch(function() {
        return $rootScope.userDetails;
      }, function() {
        var $section = $('section#forms');
        if ($rootScope.userDetails) {
          $scope.userProfile = getProfilePic($rootScope.userDetails);
        } else {
          $scope.userProfile = { 'bottom' : '5%' };
          $('.progress_bar .progress').removeAttr('style');
          $('.user.icon .line').show();
        }
        if ($section.hasClass('user')) {
          $rootScope.setFormImage(($rootScope.userDetails) ? $rootScope.userDetails.image : null);
        }
      }, true);
    }, function(e) {
      //console.log("error", e);
    });
  }, function(e) {
    //console.log("error", e);
  });

  $scope.loadReward = function($element) {
    var $rid = $($element.currentTarget).attr('reward_id');
    var $section = $('section#forms');
    $section.attr('rid', $rid);
    $rootScope.popupForm('reward');
  }

  function getProfilePic($user) {
    //console.log("getProfilePic", $user);
    if ($user) {
      var $userPos = ($user.current_points/$scope.max)*100;
      var $userPer = ($userPos >= 85) ? 85 : ($userPos <= 5) ? 5 : $userPos;
      //console.log("USER", $userPos, $userPer, $scope.max);

      var $css = {
        'bottom': $userPer+"%"
      };

      if ($user.image) {
        $css['background-image'] = 'url("' + $user.image + '")';
        $css['background-size'] = 'cover';
        $css['background-position'] = 'center center';
      }

      $('.progress_bar .progress').css({
        'height': $userPos+"%"
      });

      if ($userPos > 100) {
        $('.user.icon .line').hide();
      } else {
        $('.user.icon .line').show();
      }

      //console.log($css);

      return $css;
    }
  }

  $scope.getRewardPer = function($reward) {
    if ($reward) {
      var $rewardPos = ($reward.reward_points/$scope.max)*100;
      var $rewardPer = $rewardPos;

      var $css = {
        'bottom': $rewardPer+"%"
      }

      return $css;
    }
  }

  $scope.getRewardPic = function($reward) {
    if ($reward) {
      var $rewardPos = ($reward.reward_points/$scope.max)*100;
      var $rewardPer = $rewardPos;

      //console.log("REWARD", $rewardPos, $rewardPer, $scope.max);

      var $css = {
        'bottom': $rewardPer+"%"
      }

      if ($reward.reward_url) {
        var a = $reward.reward_url;
        var b = "300px_";
        var position = a.lastIndexOf('/')+1;
        var output = [a.slice(0, position), b, a.slice(position)].join('');

        $css['background-image'] = 'url("' + output + '")';
        $css['background-size'] = 'cover';
        $css['background-position'] = 'center center';
      }

      return $css;
    }
  }
});

trueBlue.controller('leaderboardController', function($rootScope, $scope, DataService, UserService, $routeParams) {
  $rootScope.currentParent = "leaderboard";
  $scope.selectedRegionA = (!$routeParams.regionId) ? null : $routeParams.regionId;
  $scope.allRegions = $rootScope.regions;

  DataService.getLeaderboard($scope.selectedRegionA).then(function(data) {
    $scope.leaderboard = data;
    //console.log($scope.leaderboard, $scope.leaderboard.length);

    for ($i in $scope.leaderboard) {
      if ($scope.leaderboard[$i].fb_id && !$scope.leaderboard[$i].image) {
        $scope.leaderboard[$i].image = "https://graph.facebook.com/"+$scope.leaderboard[$i].fb_id+"/picture?height=100&width=100";
      }
    }

    $scope.$watch(function() {
      return $rootScope.apiKey;
    }, function() {
      if ($rootScope.apiKey) {
        //console.log("getUserDetails from getLeaderboard");
        UserService.getUserDetails().then(function() {
          UserService.getMyRank($scope.selectedRegionA).then(function(data) {
            $scope.userRankLoaded = !data.error;
            $scope.userRank = data.ranks;
            $scope.rank_text = (!$scope.userRank[0]) ? null : numSuffix($scope.userRank[0].rank);
          });
        });
      } else {
        $scope.userRank = null;
        $scope.rank_text = null;
      }
    }, true);

    $scope.$watch(function() {
      return $rootScope.text;
    }, function() {
      if ($scope.userRank) {
        $scope.rank_text = (!$scope.userRank[0]) ? null : numSuffix($scope.userRank[0].rank);
      }
    }, true);
  }, function(e) {
    //console.log("error", e);
  });

  function numSuffix(number) {
    var suffixes = [$rootScope.text.leaderboardTH, $rootScope.text.leaderboardST, $rootScope.text.leaderboardND, $rootScope.text.leaderboardRD];
    var relevantDigits = (number < 30) ? number % 20 : number % 30;
    var suffix = (relevantDigits <= 3) ? suffixes[relevantDigits] : suffixes[0];
    return number+suffix;
  }

  $scope.getProfilePic = function($user) {
    if ($user && $user.image) {
      return {
        'background-image': 'url("' + $user.image + '")',
        'background-size': 'cover',
        'background-position': 'center center'
      };
    }
  }
});

trueBlue.controller('historyController', function($rootScope, $scope, $timeout, $localStorage, UserService, DataService, ShoppingService) {
  $rootScope.currentParent = "history";

  $scope.$watchGroup([function() {
    return $rootScope.apiKey;
  },function() {
    return $rootScope.userDetails;
  }], function() {
    //console.log("historyController checkUser");
    UserService.checkUser();
  }, true);

  $scope.$watch(function() {
    return UserService.userHistory;
  }, function() {
    //console.log("historyController UserService.userHistory");
    getHistory();
  }, true);

  if ($localStorage.orders) {
    $scope.$watch(function() {
      return $localStorage.orders;
    }, function() {
      //console.log("historyController $localStorage.orders");
      UserService.getHistory();
    }, true);
  }

  $scope.getEventKind = function($kind) {
    switch ($kind) {
      case "scan":
        return $rootScope.text.headerScan;
      case "redeem":
        return $rootScope.text.rewardsClaim;
      case "registration bonus":
        return $rootScope.text.historyRegBonus;
      case "order points":
        return $rootScope.text.orderKind;
      case "order":
        return $rootScope.text.orderKind;
      case "refund":
        return $rootScope.text.refund;
      case "plan":
        return $rootScope.text.membership;
      default:
        return $kind;
    }
  }

  UserService.getHistory();

  function getHistory() {
    $scope.scanHistory = (UserService.userHistory) ? UserService.userHistory : {};
    //console.log("scan history", UserService.userHistory);//, UserService.userHistory.length, $scope.scanHistory.length);
    DataService.inactiveProducts().then(function(data) {
      ShoppingService.getOrderHistory().then(function(data) {
        for (var a = 0; a < data.length; a++) {
          data[a].json = JSON.parse(data[a].json_obj);
        }
        $scope.history = $scope.scanHistory.concat(data);
        //console.log("order history", data, data.length, $scope.history.length);
      }, function(e) {
        //console.log("error", e);
      });
    }, function(e) {
      //console.log("error", e);
    });
  }
});

trueBlue.controller('favouritesController', function($rootScope, $scope, $timeout, UserService) {
  $rootScope.currentParent = "favourites";
  UserService.checkUser();

  $timeout(function() {
    $scope.$watch(function() {
      return $rootScope.userDetails;
    }, function() {
      UserService.checkUser();
    }, true);
  });

  UserService.getUserFavourites().then(function(data) {
    $scope.favourites = data;
    $scope.favouritesWpic = [];
    $scope.favouritesWOpic = [];
    for ($q in $scope.favourites) {
      if ($scope.favourites[$q].image && $scope.favourites[$q].image != "") {
        $scope.favouritesWpic.push($scope.favourites[$q]);
      } else {
        $scope.favouritesWOpic.push($scope.favourites[$q]);
      }
    }
  }, function(e) {
    //console.log("error", e);
  });

  $scope.thumbBack = function($product) {
    if ($product.image) {
      //console.log("thumbBack", $product.id, $product.image);
      var a = $product.image;
      var b = "300px_";
      var position = a.lastIndexOf('/')+1;
      var output = [a.slice(0, position), b, a.slice(position)].join('');
      return {
        'background-image': 'url("' + output + '")'
      };
    }
  }
});

trueBlue.controller('reviewsController', function($rootScope, $scope, $timeout, UserService) {
  $rootScope.currentParent = "reviews";
  UserService.checkUser();

  $timeout(function() {
    $scope.$watch(function() {
      return $rootScope.userDetails;
    }, function() {
      UserService.checkUser();
    }, true);
  });

  UserService.getUserRatings().then(function(data) {
    $scope.ratings = data;
  }, function(e) {
    //console.log("error", e);
  });

  $scope.deleteArticle = null;
  $scope.deleteReview = function($event) {
    $scope.deleteArticle = $($event.currentTarget).closest('article');
    navigator.notification.confirm(
      $rootScope.text.reviewDeleteConfirm, // message
      $scope.onConfirm,            // callback to invoke with index of button pressed
      $rootScope.text.reviewDelete,           // title
      [$rootScope.text.nevermind,$rootScope.text.yesDelete]     // buttonLabels
    );
  }

  $scope.onConfirm = function(buttonIndex) {
    if (buttonIndex == 2 && $scope.deleteArticle) {
      UserService.removeRating($scope.deleteArticle.attr('product_id')).then(function() {
        $scope.deleteArticle.remove();
        $scope.deleteArticle = null;
      });
    }
  }

  $scope.getRatingStatus = function($rating) {
    switch($rating) {
      case 1:
        return "approved";
        break;
      case -1:
        return "denied";
        break;
      default:
        return "pending";
        break;
    }
  }
});

trueBlue.controller('settingsController', function($rootScope, $scope, $timeout, UserService, DataService, PushService, AnalyticsService) {
  $rootScope.currentParent = "settings";
  $scope.updatingNotify = false;
  UserService.checkUser();

  $timeout(function() {
    $scope.$watch(function() {
      return $rootScope.userDetails;
    }, function() {
      UserService.checkUser();
    }, true);
  });

  //console.log("getUserDetails from settings");
  UserService.getUserDetails();

  $scope.editName = function() {
    $rootScope.popupForm('name user');
    $('section#forms form:visible input:first-child').focus();
  };

  $scope.editUsername = function() {
    $rootScope.popupForm('username user');
    $('section#forms form:visible input:first-child').focus();
  };

  $scope.editPassword = function() {
    $rootScope.popupForm('password user');
    $('section#forms form:visible input:first-child').focus();
  };

  $scope.gotoSettings = function(buttonIndex) {
    if (buttonIndex == 2) {
      AnalyticsService.registerEvent("notification", "settings", null);
      cordova.plugins.diagnostic.switchToSettings(function(){
        //console.log("Successfully switched to Settings app");
      }, function(error){
        console.error("The following error occurred: "+error);
      });
    }
  }

  // set notification toggle, and make sure we have permission if anything
  $scope.notificationToggle = function() {
    var status = $rootScope.tokenStatus;
    $scope.updatingNotify = true;
    PushNotification.hasPermission(function(data) {
    //console.log("notificationToggle, PushNotification.hasPermission?", $rootScope.tokenStatus);
      if (data.isEnabled) {
        PushService.changeStatus($rootScope.token, (status == 1) ? 0 : 1).then(function() {
          $scope.updatingNotify = false;
        });
      } else {
        $scope.updatingNotify = false;
        navigator.notification.confirm(
          $rootScope.text.requireNotificationAuth, // message
          $scope.gotoSettings,            // callback to invoke with index of button pressed
          $rootScope.text.requireCamAuthTitle,           // title
          [$rootScope.text.nevermind,$rootScope.text.requireCamAuthGo]     // buttonLabels
        );
      }
    });
  };

  $scope.facebook = function() {
    UserService.facebookConnect();
  };

  $scope.logout = function() {
    UserService.logout();
  };

  $scope.deleteUser = function() {
    navigator.notification.confirm(
      $rootScope.text.settingsDeleteConfirm, // message
      $scope.onConfirm,            // callback to invoke with index of button pressed
      $rootScope.text.settingsDelete,           // title
      [$rootScope.text.nevermind,$rootScope.text.yesDelete]     // buttonLabels
    );
  };

  $scope.onConfirm = function(buttonIndex) {
    if (buttonIndex == 2) {
      UserService.deleteUser();
    }
  }
});

trueBlue.controller('pageController', function($rootScope, $scope, $routeParams, DataService, $filter, $timeout) {
  $rootScope.currentParent = "";

  DataService.pages().then(function(data) {
    //console.log("pages", data);
    //console.log("pageId", $routeParams.pageId);
    DataService.getPageDetails($routeParams.pageId).then(function(data) {
      //console.log("getPageDetails", data);
      $scope.page = data;
      $rootScope.currentParent = $filter('lowercaseTrim')($filter('getTranslation')($scope.page.label,'ENG'));
      //console.log("$rootScope.currentParent", $rootScope.currentParent);

      $timeout(function() {
        $('a[href^="http"]').each(function(i) {
          $(this).click(function(e) {
            window.open($(this).attr('href'), '_system');
            e.preventDefault();
          });
        });
      });
    }, function(e) {
      //console.log("error", e);
    });
  }, function(e) {
    //console.log("error", e);
  });
});

trueBlue.controller('galleryGroupController', function($rootScope, $scope, $filter, $routeParams, DataService, $timeout) {
  $scope.groupId = $routeParams.groupId;
  $rootScope.currentParent = "gallery group_"+$scope.groupId;

  DataService.galleries().then(function(data) {
    //console.log("galleries", data);
    DataService.filterGalleries($scope.groupId).then(function(data) {
      //console.log("filterGalleries", data);
      $scope.galleries = data;
    }, function(e) {
      //console.log("error", e);
    });
  }, function(e) {
    //console.log("error", e);
  });

  $scope.thumbBack = function($product, $grid_opt, $link_opt) {
    if ($link_opt == "0") {
      return false;
    }
    if ($product.image) {
      //console.log("thumbBack", $product.id, $product.image);
      var a = $product.image;
      var b = ($grid_opt && $grid_opt == 1) ? "600px_" : "300px_";
      var position = a.lastIndexOf('/')+1;
      var output = [a.slice(0, position), b, a.slice(position)].join('');

      return {
        'background-image': 'url("' + output + '")'
      };
    }
  }

  $scope.search = function($product){
    if (!$scope.query || $scope.query.length < 2) {
      return false;
    }
    //console.log("search through:", $product);
    if ($product.title || $product.description) {
      var $title = ($filter('getTranslation')($product.title, $rootScope.selectedLanguage));
      var $desc = ($filter('getTranslation')($product.description, $rootScope.selectedLanguage));
      if (
        $title && $title.toLowerCase().indexOf($scope.query.toLowerCase())!=-1 ||
        $desc && $desc.toLowerCase().indexOf($scope.query.toLowerCase())!=-1
      ) {
        if (!$product.src) {
          $product.src = $product.image;
        }
        return true;
      }
    }
    return false;
  };
});

trueBlue.controller('galleryController', function($rootScope, $scope, $filter, $routeParams, DataService, $timeout) {
  $scope.groupId = ($routeParams.groupId) ? $routeParams.groupId : null;
  $scope.galleryId = $routeParams.galleryId;
  if (!$rootScope.currentParent && !$scope.groupId) {
    $rootScope.currentParent = "gallery gallery_"+$scope.galleryId;
  }
  if ($rootScope.currentParent && $rootScope.currentParent.indexOf("gallery") < 0) {
    $rootScope.currentParent += " gallery";
  }

  if (!$rootScope.galleryShowLimit) {
    $rootScope.galleryShowLimit = [];
  }
  if ($rootScope.galleryShowLimit && !$rootScope.galleryShowLimit[$scope.galleryId]) {
    $rootScope.galleryShowLimit[$scope.galleryId] = 6;
  }

  $scope.showMore = function() {
    $rootScope.galleryShowLimit[$scope.galleryId] += 6;
  }

  DataService.galleries().then(function(data) {
    DataService.getGalleryDetails($scope.galleryId).then(function(data) {
      //console.log("getGalleryDetails", data);
      $scope.gallery = data;
      $scope.items = data.items;
    }, function(e) {
      //console.log("error", e);
    });
  }, function(e) {
    //console.log("error", e);
  });

  $scope.thumbBack = function($item, $grid_opt, $link_opt) {
    if ($link_opt == "0") {
      return false;
    }
    if ($item.image) {
      //console.log("thumbBack", $product.id, $product.image);
      var a = $item.image;
      var b = ($grid_opt && $grid_opt == 1) ? "600px_" : "300px_";
      var position = a.lastIndexOf('/')+1;
      var output = [a.slice(0, position), b, a.slice(position)].join('');

      return {
        'background-image': 'url("' + output + '")'
      };
    }
  }

  $scope.prevQuery = "";
  $scope.search = function($product){
    if (!$scope.query) {
      return true;
    }
    if ($scope.prevQuery != $scope.query) {
      $scope.showLimit = 6;
      $scope.prevQuery = $scope.query;
    }
    //console.log("search through:", $product);
    if ($product.title || $product.description) {
      var $title = ($filter('getTranslation')($product.title, $rootScope.selectedLanguage));
      var $desc = ($filter('getTranslation')($product.description, $rootScope.selectedLanguage));
      if (
        $title && $title.toLowerCase().indexOf($scope.query.toLowerCase())!=-1 ||
        $desc && $desc.toLowerCase().indexOf($scope.query.toLowerCase())!=-1
      ) {
        return true;
      }
    }
    return false;
  };
});

trueBlue.controller('galleryItemController', function($rootScope, $scope, $routeParams, DataService, $timeout) {
  $scope.groupId = ($routeParams.groupId) ? $routeParams.groupId : null;
  $scope.galleryId = ($routeParams.galleryId) ? $routeParams.galleryId : null;
  $scope.itemId = $routeParams.itemId;

  //console.log($scope.groupId, $scope.galleryId, $scope.itemId);
  if (!$rootScope.currentParent && !$scope.groupId) {
    $rootScope.currentParent = "gallery gallery_"+$scope.galleryId;
  }

  DataService.galleries().then(function(data) {
    DataService.getGalleryDetails($scope.galleryId).then(function(data) {
      //console.log("getGalleryDetails", data);
      $scope.gallery = data;
      DataService.getGalleryItemDetails($scope.galleryId, $scope.itemId).then(function(data) {
        //console.log("getGalleryItemDetails", data);
        $scope.item = data;
      }, function(e) {
        //console.log("error", e);
      });
    }, function(e) {
      //console.log("error", e);
    });
  }, function(e) {
    //console.log("error", e);
  });
});

trueBlue.controller('ordersController', function($rootScope, $scope, $timeout, DataService, UserService, ShoppingService, AnalyticsService) {
  $rootScope.currentParent = "orders";
  $scope.Object = window.Object;

  DataService.resolveClient().then(function(data) {
    $timeout(function() {
      $scope.$watch(function() {
        return $rootScope.activeOrders;
      }, function() {
        updateOrders();
      }, true);

      $scope.$watch(function() {
        return $rootScope.completedOrders;
      }, function() {
        updateCompletedOrders();
      }, true);
    });
  }, function(e) {
    //console.log("error", e);
  });

  function updateOrders() {
    //console.log("updateOrders",$rootScope.activeOrders,($rootScope.activeOrders == {}), $.isEmptyObject($rootScope.activeOrders));
    // //console.log("updateOrders, activeOrders", $rootScope.activeOrders);
    $scope.orderReceipts = {};
    // //console.log("orderReceipts");
    // //console.log($scope.orderReceipts);
    // //console.log(Object.keys($scope.orderReceipts).length);
    // //console.log(($scope.orderReceipts && !Object.keys($scope.orderReceipts).length));
    for (var $order in $rootScope.activeOrders) {
      //console.log("for each", $rootScope.activeOrders[$order]);
      ShoppingService.getOrderReceipt($rootScope.activeOrders[$order].id).then(function(data) {
        //console.log("data", data);
        if (data.status == "complete" || data.status == "cancelled") {
          return false;
        }
        $scope.orderReceipts["o_"+data.id] = data;
        //console.log("$scope", $scope.orderReceipts);
      }, function(e) {
        //console.log("error", e);
      });
    }
    if ($.isEmptyObject($rootScope.activeOrders)) {
      delete $rootScope.activeOrders;
    }
  }

  function updateCompletedOrders() {
    if ($rootScope.completedOrders) {
      $scope.completedOrderReceipts = {};
      //console.log("updateOrders, completedOrders", $rootScope.completedOrders);
      for (var $com in $rootScope.completedOrders) {
        ShoppingService.getOrderReceipt($rootScope.completedOrders[$com]).then(function(data) {
          //console.log("completedOrder", $rootScope.completedOrders[$com], "data:", data);
          $scope.completedOrderReceipts["o_"+data.id] = data;
        }, function(e) {
          //console.log("error", e);
        });
      }
    }
  }

  $scope.expandReceipt = function($event) {
    if (!$($event.currentTarget).data('open')) {
      $($event.currentTarget).closest('.receipt_container').addClass('open');
      $('div:hidden',$event.currentTarget).addClass('show');
      $('.show',$event.currentTarget).slideDown();
      $($event.currentTarget).data('open', true);
    } else {
      $($event.currentTarget).closest('.receipt_container').removeClass('open');
      $('.show',$event.currentTarget).slideUp();
      $($event.currentTarget).removeData('open');
    }
  }

  // let the user update the order to complete
  $scope.orderPickedUp = function($event, $order_id) {
    AnalyticsService.registerEvent("cart", "complete", $order_id);
    ShoppingService.updateOrder($order_id, "status", "complete").then(function() {
      ShoppingService.getOrderHistory("update completed");
    });
    setTimeout(function() {
      $($event.currentTarget).closest('.receipt_container').slideUp(250, function() {
        delete $scope.orderReceipts["o_"+$order_id];
        delete $rootScope.activeOrders["o_"+$order_id];
        //console.log("active",$rootScope.activeOrders,($rootScope.activeOrders == {}));
        if ($.isEmptyObject($rootScope.activeOrders)) {
          $rootScope.activeOrders = null;
          delete $rootScope.activeOrders;
        }
      });
    }, 500);
  }

  $scope.acceptReschedule = function ($event, $order_id) {
    ShoppingService.updateOrder($order_id, "status", "accept").then(function() {
      ShoppingService.getOrderHistory("update accepted");
    });
    setTimeout(function() {
      $($event.currentTarget).closest('.suggest-time-container').slideUp(250);
    }, 500);
  }

  $scope.declineReschedule = function ($event, $order_id) {
    ShoppingService.cancelOrder($order_id).then(function() {
      ShoppingService.getOrderHistory("update declined");
    });
    setTimeout(function() {
      $($event.currentTarget).closest('.receipt_container').slideUp(250, function() {
        // remove cancelled order
        delete $scope.orderReceipts["o_"+$order_id];
        delete $rootScope.activeOrders["o_"+$order_id];
        //console.log("active",$rootScope.activeOrders,($rootScope.activeOrders == {}));
        if ($.isEmptyObject($rootScope.activeOrders)) {
          $rootScope.activeOrders = null;
          delete $rootScope.activeOrders;
        }
      });
    }, 500);
  }

});

trueBlue.controller('orderDetailsController', function($rootScope, $routeParams, $scope, $timeout, $localStorage, DataService, UserService, ShoppingService, AnalyticsService) {
  $rootScope.currentParent = "history";

  $scope.getBackTitle = function() {
    if ($routeParams.backId == "o") {
      return $rootScope.text.menuOrders;
    } else if ($routeParams.backId == "t") {
      return $rootScope.text.menuTickets;
    } else {
      return $rootScope.text.menuHistory;
    }
  }

  DataService.resolveClient().then(function(data) {
    updateOrders();
  }, function(e) {
    //console.log("error", e);
  });

  function updateOrders() {
    ShoppingService.getOrderReceipt($routeParams.orderId).then(function(data) {
      //console.log(data);
      $scope.order = data;
      $timeout(function() {
        $scope.$apply();
      });
    }, function(e) {
      //console.log("error", e);
    });
  }

  // allow for a quick reordering - adds to cart
  $scope.reOrder = function() {
    var $order = JSON.parse($scope.order.json_obj);

    if (!$rootScope.cart) {
      $rootScope.cart = {};
    }

    var $cart = [];
    if ($localStorage.cart) {
      $cart['products'] = JSON.parse($localStorage.cart);
    } else {
      $cart['products'] = [];
    }

    for ($p in $order.products) {
      var $product = $order.products[$p];

      var $found = null;
      if ($cart['products'] && $cart['products'].length) {
        for (var $cp in $cart['products']) {
          var $pr = $cart['products'][$cp];
          var $temp = {};
          $temp['id'] = $pr.id;
          $temp['variation'] = $pr.variation;
          $temp['variable'] = $pr.variable;
          var $pro = {};
          $pro['id'] = $product.id;
          $pro['variation'] = $product.variation;
          $pro['variable'] = $product.variable;
          if (JSON.stringify($temp) == JSON.stringify($pro)) {
            $cart['products'][$cp].quantity += $product.quantity;
            $cart['products'][$cp].subtotal += $product.subtotal;
            $found = true;
            break;
          }
        }
      }

      if (!$found) {
        $product['quantity'] = $product.quantity;
        $product['subtotal'] = $product.subtotal;
        $cart["products"].push($product);
      }
    }

    AnalyticsService.registerEvent("cart", "add order", $routeParams.orderId);

    $('nav#header #cart').addClass('added');
    setTimeout(function() {
      $('nav#header #cart').removeClass('added');
    }, 2000);

    $localStorage.cart = JSON.stringify($cart['products']);

    if (!$rootScope.cart['phone']) {
      $rootScope.cart['phone'] = $order.phone;
    }

    if ($rootScope.cart['notes']) {
      $rootScope.cart['notes'] += "\r"+$order.notes;
    } else {
      $rootScope.cart['notes'] = $order.notes;
    }

    $scope.added = true;

    setTimeout(function() {
      $scope.added = false;
    }, 2500);
  }

  // let the user update the order to complete
  $scope.orderPickedUp = function() {
    var $order_id = $routeParams.orderId;
    //console.log("orderPickedUp", $order_id);
    AnalyticsService.registerEvent("cart", "claim points", $order_id);
    ShoppingService.updateOrder($order_id, "status", "complete").then(function() {
      ShoppingService.getOrderHistory("update completed").then(function() {
        //console.log("updateOrders");
        UserService.getHistory("claimed!");
        updateOrders();
      });
    });
  }
});

trueBlue.controller('ticketsController', function($rootScope, $scope, UserService, ShoppingService) {
  $rootScope.currentParent = "tickets";

  $rootScope.$watch(function() {
    return $rootScope.tickets;
  }, function() {
    $scope.myTickets = $rootScope.tickets;
    //console.log("tickets updated", $scope.myTickets);
  }, true);

  ShoppingService.checkForTickets();
});

trueBlue.controller('membershipPlansController', function($rootScope, $scope, DataService, ShoppingService, AnalyticsService) {
  $rootScope.currentParent = "plans";

  DataService.getSubscriptionPlans().then(function(response) {
    //console.log("GET SUBSCRIPTION PLANS!", response)
    $scope.plans = response;
    // also needs to read if the user has a plan.
    $scope.getUserSubscriptions();
  });

  $scope.getUserSubscriptions = function() {
    if ($rootScope.userDetails) {
      DataService.getUserSubscriptions().then(function(response) {
        //console.log("GET USER SUBSCRIPTIONS!", response)
        $scope.activePlan = $scope.getActivePlan(response.plans);
      });
    }
  };

  $scope.cancelSubscription = function($token) {
    // $timeout(function() {
    //   navigator.notification.confirm(
    //     $rootScope.text.membershipCancelConfirm, // message
    //     function(buttonIndex){
    //         $scope.onConfirm(buttonIndex, $token);
    //     }, // callback to invoke with index of button pressed
    //     $rootScope.text.membershipCancel,           // title
    //     [$rootScope.text.nevermind,$rootScope.text.yesCancel]     // buttonLabels
    //   );
    // }, 100);
    ShoppingService.cancelSubscription($token).then(function() {
      $scope.getUserSubscriptions();
    });
  };

  $scope.onConfirm = function(buttonIndex, $token) {
    if (buttonIndex == 2) {
      ShoppingService.cancelSubscription($token).then(function() {
        $scope.getUserSubscriptions();
      });
    }
  }

  $scope.getActivePlan = function(plans) {
    var activePlan = null;
    var now = new Date();
    for (var b = 0; b < plans.length; b++) {
      var plan = plans[b];
      var periodEnd = new Date(plan.stripe_response.current_period_end);
      if (plan.stripe_response.status == "active") {
        activePlan = plan;
        break;
      } else if (plan.stripe_response.status == "canceled" && activePlan < periodEnd) {
        activePlan = plan;
      }
    }
    //console.log("activePlan", activePlan);
    return activePlan;
  }

  $scope.getPlan = function(plan_id) {
    for (var a = 0; a < $scope.plans.length; a++) {
      if ($scope.plans[a].id == plan_id) {
        return $scope.plans[a];
      }
    }
    return false;
  }

  $scope.selectPlan = function($event) {
    var target = $event.currentTarget;
    var plan_id = $(target).attr('data-planId');
    if (!$rootScope.userDetails) {
      //console.log("create listener");
      var listener = $rootScope.$watch(function() {
        return $rootScope.userDetails;
      }, function () {
        if ($rootScope.userDetails) {
          $rootScope.closeMenu();
          $scope.addPlanToCart($scope.getPlan(plan_id));
          listener(); // cancel watch
        }
      });
      $rootScope.popupForm('user plans');
    } else {
      $scope.addPlanToCart($scope.getPlan(plan_id));
    }
  }

  $scope.addPlanToCart = function(plan) {
    //console.log("BUY THIS PLAN:", plan.id);
    $rootScope.cart = {};
    $rootScope.cart['subscription'] = plan;
    $rootScope.cart['user_id'] = $rootScope.userDetails.id;
    $rootScope.cart['name'] = $rootScope.userDetails.name;
    $rootScope.cart['email'] = $rootScope.userDetails.username;
    $rootScope.cart['total'] = (plan.amount/100);

    if ($scope.activePlan && $scope.activePlan.stripe_response.status != "canceled") {
      $rootScope.cart['subscription_token'] = $scope.activePlan.subscription_token;
      $rootScope.text.custom.orderNote = "There will not be any prorating. You will be charged the full amount for this membership.";
    }

    $scope.addOrder();
  }

  $scope.addOrder = function() {
    //console.log("addOrder cart", $rootScope.cart);
    AnalyticsService.registerEvent("cart", "submit subscription", $rootScope.cart['subscription'].id);

    ShoppingService.addOrder($rootScope.cart).then(function(data) {
      //console.log("addOrder", data);
      //console.log("cart", $rootScope.cart);
      if (!data.error) {
        $scope.this_order_id = data.order_id;
        if ($rootScope.clientInfo.stripe_flag == 1) {
          $rootScope.cart['order_id'] = data.order_id;
          $scope.gotoPaymentDetails();

          var watchForClose = $rootScope.$watch(function() {
            return $rootScope.popUpType;
          }, function() {
            if ($rootScope.popUpType != "payment_details") {
              //console.log(":/ $rootScope.popUpType", $rootScope.popUpType);
              $rootScope.text.custom.orderNote = null;
              $scope.getUserSubscriptions();
              watchForClose();
            }
          });
        } else {
          //console.log("stripe disabled, purchase complete");
        }
      } else {
        //console.log("error in making the order...");
      }
    });
  }

  $scope.gotoPaymentDetails = function() {
    $rootScope.setFormImage(null);
    //console.log("gotoPaymentDetails");
    $rootScope.popupForm('payment_details');
  }
});

trueBlue.controller('instagramController', function($rootScope, $scope, $timeout, DataService, $routeParams) {
  $rootScope.currentParent = "instagram";
  $scope.instagram = null;
  $scope.showLimit = $rootScope.defaultShowLimit;

  DataService.resolveClient().then(function(data) {
    // double check that the client has instagram credentials - user_id, api_key
    if ($rootScope.clientInfo.instagram_params) {
      $scope.instagram = [];
      var instaParams = $rootScope.clientInfo.instagram_params.split(","); // THIS NEEDS TO BE DEPRECATED, but cannot. not yet.
      if ($routeParams.type == "user") {
        $rootScope.currentParent += " user";
        DataService.getInstagramFeed(instaParams[0],instaParams[1]).then(function(data) {
          //console.log(instaParams[0],instaParams[1],data);
          $scope.instagram = data;
        });
      } else {
        $rootScope.currentParent += " " + $routeParams.value;
        DataService.getInstagramTagFeed($routeParams.value,instaParams[1]).then(function(data) {
          //console.log($routeParams.value,instaParams[1],data);
          $scope.instagram = data;
        }, function(e) {
          //console.log("error", e);
        });
      }
    } else {
      $scope.instagram = [];
    }
  }, function(e) {
    //console.log("error", e);
  });

  $scope.showMore = function() {
    $scope.showLimit += $rootScope.defaultShowLimit;
  }

  $timeout(function () {
    // auto load content when scrolling
    $('.content').scroll(function() {
      //console.log("content scrolling...", $('.content').scrollTop());
      if ($('.content')[0].scrollHeight - $('.content').scrollTop() - $('.content').outerHeight(true) <= 50) {
        //console.log("show more!");
        $scope.showMore();
      }
    });
  });
});

trueBlue.controller('subscriptionSettingsController', function($rootScope, $scope, $timeout, $localStorage, DataService, UserService, ShoppingService) {
  $rootScope.currentParent = "subscription_settings";
  var d = new Date();
  var n = d.getFullYear();
  $scope.thisYear = n;
  $scope.thisMonth = d.getMonth();

  // start here, create the order object
  $scope.getCustomer = function() {
    // if we have the user's stripe token, we can skip some stripe functions
    if ($localStorage.stripe_token) {
      // get cards to choose from
      ShoppingService.getStripeCards().then(function(data) {
        //console.log("getStripeCards", data);
        if (!data.error) {
          $scope.cards = data.cards;
          if ($scope.cards.data.length) {
            $scope.newCard = false;
          } else {
            $scope.newCard = true;
          }
        } else {
          $localStorage.stripe_token = null;
          $scope.cards = [];
          $scope.newCard = true;
        }
      }, function(e) {
        //console.log("error", e);
      });
    } else {
      $scope.cards = [];
      $scope.newCard = true;
    }
  }

  $scope.toggleAddCard = function() {
    if ($scope.newCard) {
      $scope.newCard = false;
    } else {
      $scope.newCard = true;
    }
  }

  $scope.deleteCard = function($event) {
    var card = $($event.currentTarget);
    $(card).closest('li').fadeOut();
    ShoppingService.deleteStripeCard($localStorage.stripe_token, card.attr('card_id')).then(function(data) {
      //console.log("DELETE STRIPE CARD!", data);
      $scope.getCustomer();
    }, function(e) {
      //console.log("error", e);
    });
  }

  $scope.addStripeCard = function() {
    //console.log("addStripeCard");
    var form = $('[js-addNewCard-form]');
    var $error = $('.error', form);
    var $submit = $('.submit_btn', form);

    $error.hide().html('');
    $submit.addClass('processing');
    form.addClass("processing");

    // create the objects
    var obj = {};
    obj["number"] = $('input[name="number"]',form).val();
    obj["exp_month"] = $('select[name="month"]',form).val();
    obj["exp_year"] = $('select[name="year"]',form).val();
    obj["cvc"] = $('input[name="cvc"]',form).val();
    obj["name"] = $('input[name="name"]',form).val();
    obj["stripe_customer_token"] = $localStorage.stripe_token;
    obj["client_id"] = $rootScope.clientId;

    Stripe.card.createToken(form, function(err, token) {
      //console.log("stripe.tokens.create", err, token);
      if (token.error) {
        $error.html(token.error.message).show();
        $rootScope.enableShield();
        $submit.removeClass('processing');
        form.removeClass("processing");
      } else {
        obj["stripe_token"] = token.id;
        if ($localStorage.stripe_token) {
          //console.log("$localStorage.stripe_token", $localStorage.stripe_token, obj);
          obj["stripe_customer_token"] = $localStorage.stripe_token;
          ShoppingService.addStripeCard(obj).then(function(data) {
            //console.log("addStripeCard", obj, data);
            obj["stripe_card_token"] = data.stripe_card_token;
            $scope.newCard = false;
            $scope.cards = [];
            $scope.getCustomer();
          }, function(e) {
            //console.log("error", e);
          });
        }
      }
    });
  }

  $scope.getSubscriptions = function() {
    DataService.getUserSubscriptions().then(function(response) {
      //console.log("GET USER SUBSCRIPTIONS!", response)
      $scope.subs = response;
    });
  }

  $scope.cancelSubscription = function($token) {
    $timeout(function() {
      navigator.notification.confirm(
        $rootScope.text.membershipCancelConfirm, // message
        function(buttonIndex){
            $scope.onConfirm(buttonIndex, $token);
        }, // callback to invoke with index of button pressed
        $rootScope.text.membershipCancel,           // title
        [$rootScope.text.nevermind,$rootScope.text.yesCancel]     // buttonLabels
      );
    }, 100);
  };

  $scope.onConfirm = function(buttonIndex, $token) {
    if (buttonIndex == 2) {
      ShoppingService.cancelSubscription($token).then(function() {
        $scope.getSubscriptions();
      });
    }
  }

  $timeout(function() {
    //console.log("subscriptionSettingsController timeout");
    $scope.getCustomer();
    $scope.getSubscriptions();
  });

  var waitForOrderHistoryData =
  $rootScope.$watch(function() {
    return ShoppingService.orderHistoryData;
  }, function() {
    if (ShoppingService.orderHistoryData) {
      $scope.getSubscriptions();
    }
  });
});

trueBlue.controller('DynamicRoutes', function($rootScope, $scope, $routeParams, $http, $location, $route) {
  // in case there are custom pages, custom routes!
  var customPageName = ($routeParams.name).toLowerCase().replace(/ /g,'');
  $rootScope.currentParent = "custom "+customPageName;
  $route.current.templateUrl = 'Partials/' + customPageName + ".html";
  $rootScope.customBackTitle = $routeParams.name;
  $http.get($route.current.templateUrl).then(function (msg) {
    //console.log("templateURL http:",msg);
    //console.log(msg.data);
    $('section.content').html(msg.data);
  });
});
